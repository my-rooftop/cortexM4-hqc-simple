
hqc-simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b154  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001094  0800b290  0800b290  0000c290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c324  0800c324  0000e194  2**0
                  CONTENTS
  4 .ARM          00000008  0800c324  0800c324  0000d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c32c  0800c32c  0000e194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c32c  0800c32c  0000d32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c330  0800c330  0000d330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  0800c334  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000194  0800c4c8  0000e194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  0800c4c8  0000e34c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc7d  00000000  00000000  0000e1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002764  00000000  00000000  00019e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0001c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b6  00000000  00000000  0001d148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016191  00000000  00000000  0001d9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc0d  00000000  00000000  00033b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887ad  00000000  00000000  0004379c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbf49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003770  00000000  00000000  000cbf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000cf6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000194 	.word	0x20000194
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b278 	.word	0x0800b278

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000198 	.word	0x20000198
 8000178:	0800b278 	.word	0x0800b278

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <PQCLEAN_HQC128_CLEAN_code_encode>:
 * a concatenated code word.
 *
 * @param[out] em Pointer to an array that is the tensor code word
 * @param[in] m Pointer to an array that is the message
 */
void PQCLEAN_HQC128_CLEAN_code_encode(uint64_t *em, const uint8_t *m) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b08e      	sub	sp, #56	@ 0x38
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
    uint8_t tmp[VEC_N1_SIZE_BYTES] = {0};
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	222a      	movs	r2, #42	@ 0x2a
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f00a f8ba 	bl	800a5f8 <memset>

    PQCLEAN_HQC128_CLEAN_reed_solomon_encode(tmp, m);
 8000484:	f107 0308 	add.w	r3, r7, #8
 8000488:	6839      	ldr	r1, [r7, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f007 f994 	bl	80077b8 <PQCLEAN_HQC128_CLEAN_reed_solomon_encode>
    PQCLEAN_HQC128_CLEAN_reed_muller_encode(em, tmp);
 8000490:	f107 0308 	add.w	r3, r7, #8
 8000494:	4619      	mov	r1, r3
 8000496:	6878      	ldr	r0, [r7, #4]
 8000498:	f007 f8f6 	bl	8007688 <PQCLEAN_HQC128_CLEAN_reed_muller_encode>

}
 800049c:	bf00      	nop
 800049e:	3738      	adds	r7, #56	@ 0x38
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <PQCLEAN_HQC128_CLEAN_code_decode>:
 * @brief Decoding the code word em to a message m using the concatenated code
 *
 * @param[out] m Pointer to an array that is the message
 * @param[in] em Pointer to an array that is the code word
 */
void PQCLEAN_HQC128_CLEAN_code_decode(uint8_t *m, const uint64_t *em) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08e      	sub	sp, #56	@ 0x38
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
    uint8_t tmp[VEC_N1_SIZE_BYTES] = {0};
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	222a      	movs	r2, #42	@ 0x2a
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f00a f89c 	bl	800a5f8 <memset>

    PQCLEAN_HQC128_CLEAN_reed_muller_decode(tmp, em);
 80004c0:	f107 0308 	add.w	r3, r7, #8
 80004c4:	6839      	ldr	r1, [r7, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f007 f91e 	bl	8007708 <PQCLEAN_HQC128_CLEAN_reed_muller_decode>
    PQCLEAN_HQC128_CLEAN_reed_solomon_decode(m, tmp);
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	4619      	mov	r1, r3
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f007 fe0a 	bl	80080ec <PQCLEAN_HQC128_CLEAN_reed_solomon_decode>

}
 80004d8:	bf00      	nop
 80004da:	3738      	adds	r7, #56	@ 0x38
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <compute_fft_betas>:
/**
 * @brief Computes the basis of betas (omitting 1) used in the additive FFT and its transpose
 *
 * @param[out] betas Array of size PARAM_M-1
 */
static void compute_fft_betas(uint16_t *betas) {
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    size_t i;
    for (i = 0; i < PARAM_M - 1; ++i) {
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	e00e      	b.n	800050c <compute_fft_betas+0x2c>
        betas[i] = 1 << (PARAM_M - 1 - i);
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f1c3 0307 	rsb	r3, r3, #7
 80004f4:	2201      	movs	r2, #1
 80004f6:	fa02 f103 	lsl.w	r1, r2, r3
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	b28a      	uxth	r2, r1
 8000504:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < PARAM_M - 1; ++i) {
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	3301      	adds	r3, #1
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	2b06      	cmp	r3, #6
 8000510:	d9ed      	bls.n	80004ee <compute_fft_betas+0xe>
    }
}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <compute_subset_sums>:
 *
 * @param[out] subset_sums Array of size 2^set_size receiving the subset sums
 * @param[in] set Array of set_size elements
 * @param[in] set_size Size of the array set
 */
static void compute_subset_sums(uint16_t *subset_sums, const uint16_t *set, uint16_t set_size) {
 800051e:	b480      	push	{r7}
 8000520:	b087      	sub	sp, #28
 8000522:	af00      	add	r7, sp, #0
 8000524:	60f8      	str	r0, [r7, #12]
 8000526:	60b9      	str	r1, [r7, #8]
 8000528:	4613      	mov	r3, r2
 800052a:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j;
    subset_sums[0] = 0;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	801a      	strh	r2, [r3, #0]

    for (i = 0; i < set_size; ++i) {
 8000532:	2300      	movs	r3, #0
 8000534:	82fb      	strh	r3, [r7, #22]
 8000536:	e024      	b.n	8000582 <compute_subset_sums+0x64>
        for (j = 0; j < (1 << i); ++j) {
 8000538:	2300      	movs	r3, #0
 800053a:	82bb      	strh	r3, [r7, #20]
 800053c:	e017      	b.n	800056e <compute_subset_sums+0x50>
            subset_sums[(1 << i) + j] = set[i] ^ subset_sums[j];
 800053e:	8afb      	ldrh	r3, [r7, #22]
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	4413      	add	r3, r2
 8000546:	8819      	ldrh	r1, [r3, #0]
 8000548:	8abb      	ldrh	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	4413      	add	r3, r2
 8000550:	881a      	ldrh	r2, [r3, #0]
 8000552:	8afb      	ldrh	r3, [r7, #22]
 8000554:	2001      	movs	r0, #1
 8000556:	4098      	lsls	r0, r3
 8000558:	8abb      	ldrh	r3, [r7, #20]
 800055a:	4403      	add	r3, r0
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	68f8      	ldr	r0, [r7, #12]
 8000560:	4403      	add	r3, r0
 8000562:	404a      	eors	r2, r1
 8000564:	b292      	uxth	r2, r2
 8000566:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < (1 << i); ++j) {
 8000568:	8abb      	ldrh	r3, [r7, #20]
 800056a:	3301      	adds	r3, #1
 800056c:	82bb      	strh	r3, [r7, #20]
 800056e:	8aba      	ldrh	r2, [r7, #20]
 8000570:	8afb      	ldrh	r3, [r7, #22]
 8000572:	2101      	movs	r1, #1
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	429a      	cmp	r2, r3
 800057a:	dbe0      	blt.n	800053e <compute_subset_sums+0x20>
    for (i = 0; i < set_size; ++i) {
 800057c:	8afb      	ldrh	r3, [r7, #22]
 800057e:	3301      	adds	r3, #1
 8000580:	82fb      	strh	r3, [r7, #22]
 8000582:	8afa      	ldrh	r2, [r7, #22]
 8000584:	88fb      	ldrh	r3, [r7, #6]
 8000586:	429a      	cmp	r2, r3
 8000588:	d3d6      	bcc.n	8000538 <compute_subset_sums+0x1a>
        }
    }
}
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	371c      	adds	r7, #28
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <radix>:
 * @param[out] f0 Array half the size of f
 * @param[out] f1 Array half the size of f
 * @param[in] f Array of size a power of 2
 * @param[in] m_f 2^{m_f} is the smallest power of 2 greater or equal to the number of coefficients of f
 */
static void radix(uint16_t *f0, uint16_t *f1, const uint16_t *f, uint32_t m_f) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
 80005a4:	603b      	str	r3, [r7, #0]
    switch (m_f) {
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	f200 816e 	bhi.w	800088c <radix+0x2f4>
 80005b0:	a201      	add	r2, pc, #4	@ (adr r2, 80005b8 <radix+0x20>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	08000879 	.word	0x08000879
 80005bc:	08000839 	.word	0x08000839
 80005c0:	0800078b 	.word	0x0800078b
 80005c4:	080005c9 	.word	0x080005c9
    case 4:
        f0[4] = f[8] ^ f[12];
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3310      	adds	r3, #16
 80005cc:	8819      	ldrh	r1, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3318      	adds	r3, #24
 80005d2:	881a      	ldrh	r2, [r3, #0]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3308      	adds	r3, #8
 80005d8:	404a      	eors	r2, r1
 80005da:	b292      	uxth	r2, r2
 80005dc:	801a      	strh	r2, [r3, #0]
        f0[6] = f[12] ^ f[14];
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3318      	adds	r3, #24
 80005e2:	8819      	ldrh	r1, [r3, #0]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	331c      	adds	r3, #28
 80005e8:	881a      	ldrh	r2, [r3, #0]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	330c      	adds	r3, #12
 80005ee:	404a      	eors	r2, r1
 80005f0:	b292      	uxth	r2, r2
 80005f2:	801a      	strh	r2, [r3, #0]
        f0[7] = f[14] ^ f[15];
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	331c      	adds	r3, #28
 80005f8:	8819      	ldrh	r1, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	331e      	adds	r3, #30
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	330e      	adds	r3, #14
 8000604:	404a      	eors	r2, r1
 8000606:	b292      	uxth	r2, r2
 8000608:	801a      	strh	r2, [r3, #0]
        f1[5] = f[11] ^ f[13];
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3316      	adds	r3, #22
 800060e:	8819      	ldrh	r1, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	331a      	adds	r3, #26
 8000614:	881a      	ldrh	r2, [r3, #0]
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	330a      	adds	r3, #10
 800061a:	404a      	eors	r2, r1
 800061c:	b292      	uxth	r2, r2
 800061e:	801a      	strh	r2, [r3, #0]
        f1[6] = f[13] ^ f[14];
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	331a      	adds	r3, #26
 8000624:	8819      	ldrh	r1, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	331c      	adds	r3, #28
 800062a:	881a      	ldrh	r2, [r3, #0]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	330c      	adds	r3, #12
 8000630:	404a      	eors	r2, r1
 8000632:	b292      	uxth	r2, r2
 8000634:	801a      	strh	r2, [r3, #0]
        f1[7] = f[15];
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f103 021e 	add.w	r2, r3, #30
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	330e      	adds	r3, #14
 8000640:	8812      	ldrh	r2, [r2, #0]
 8000642:	801a      	strh	r2, [r3, #0]
        f0[5] = f[10] ^ f[12] ^ f1[5];
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3314      	adds	r3, #20
 8000648:	881a      	ldrh	r2, [r3, #0]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3318      	adds	r3, #24
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4053      	eors	r3, r2
 8000652:	b299      	uxth	r1, r3
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	330a      	adds	r3, #10
 8000658:	881a      	ldrh	r2, [r3, #0]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	330a      	adds	r3, #10
 800065e:	404a      	eors	r2, r1
 8000660:	b292      	uxth	r2, r2
 8000662:	801a      	strh	r2, [r3, #0]
        f1[4] = f[9] ^ f[13] ^ f0[5];
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3312      	adds	r3, #18
 8000668:	881a      	ldrh	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	331a      	adds	r3, #26
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	4053      	eors	r3, r2
 8000672:	b299      	uxth	r1, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	330a      	adds	r3, #10
 8000678:	881a      	ldrh	r2, [r3, #0]
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	3308      	adds	r3, #8
 800067e:	404a      	eors	r2, r1
 8000680:	b292      	uxth	r2, r2
 8000682:	801a      	strh	r2, [r3, #0]

        f0[0] = f[0];
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	881a      	ldrh	r2, [r3, #0]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	801a      	strh	r2, [r3, #0]
        f1[3] = f[7] ^ f[11] ^ f[15];
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	330e      	adds	r3, #14
 8000690:	881a      	ldrh	r2, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3316      	adds	r3, #22
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4053      	eors	r3, r2
 800069a:	b299      	uxth	r1, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	331e      	adds	r3, #30
 80006a0:	881a      	ldrh	r2, [r3, #0]
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	3306      	adds	r3, #6
 80006a6:	404a      	eors	r2, r1
 80006a8:	b292      	uxth	r2, r2
 80006aa:	801a      	strh	r2, [r3, #0]
        f0[3] = f[6] ^ f[10] ^ f[14] ^ f1[3];
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	330c      	adds	r3, #12
 80006b0:	881a      	ldrh	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3314      	adds	r3, #20
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	4053      	eors	r3, r2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	331c      	adds	r3, #28
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	4053      	eors	r3, r2
 80006c4:	b299      	uxth	r1, r3
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	3306      	adds	r3, #6
 80006ca:	881a      	ldrh	r2, [r3, #0]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3306      	adds	r3, #6
 80006d0:	404a      	eors	r2, r1
 80006d2:	b292      	uxth	r2, r2
 80006d4:	801a      	strh	r2, [r3, #0]
        f0[2] = f[4] ^ f0[4] ^ f0[3] ^ f1[3];
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3308      	adds	r3, #8
 80006da:	881a      	ldrh	r2, [r3, #0]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3308      	adds	r3, #8
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	4053      	eors	r3, r2
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3306      	adds	r3, #6
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	4053      	eors	r3, r2
 80006ee:	b299      	uxth	r1, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	3306      	adds	r3, #6
 80006f4:	881a      	ldrh	r2, [r3, #0]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3304      	adds	r3, #4
 80006fa:	404a      	eors	r2, r1
 80006fc:	b292      	uxth	r2, r2
 80006fe:	801a      	strh	r2, [r3, #0]
        f1[1] = f[3] ^ f[5] ^ f[9] ^ f[13] ^ f1[3];
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3306      	adds	r3, #6
 8000704:	881a      	ldrh	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	330a      	adds	r3, #10
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	4053      	eors	r3, r2
 800070e:	b29a      	uxth	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3312      	adds	r3, #18
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	4053      	eors	r3, r2
 8000718:	b29a      	uxth	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	331a      	adds	r3, #26
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	4053      	eors	r3, r2
 8000722:	b299      	uxth	r1, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	3306      	adds	r3, #6
 8000728:	881a      	ldrh	r2, [r3, #0]
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	3302      	adds	r3, #2
 800072e:	404a      	eors	r2, r1
 8000730:	b292      	uxth	r2, r2
 8000732:	801a      	strh	r2, [r3, #0]
        f1[2] = f[3] ^ f1[1] ^ f0[3];
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3306      	adds	r3, #6
 8000738:	881a      	ldrh	r2, [r3, #0]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3302      	adds	r3, #2
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	4053      	eors	r3, r2
 8000742:	b299      	uxth	r1, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	3306      	adds	r3, #6
 8000748:	881a      	ldrh	r2, [r3, #0]
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3304      	adds	r3, #4
 800074e:	404a      	eors	r2, r1
 8000750:	b292      	uxth	r2, r2
 8000752:	801a      	strh	r2, [r3, #0]
        f0[1] = f[2] ^ f0[2] ^ f1[1];
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3304      	adds	r3, #4
 8000758:	881a      	ldrh	r2, [r3, #0]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3304      	adds	r3, #4
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	4053      	eors	r3, r2
 8000762:	b299      	uxth	r1, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	3302      	adds	r3, #2
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	3302      	adds	r3, #2
 800076e:	404a      	eors	r2, r1
 8000770:	b292      	uxth	r2, r2
 8000772:	801a      	strh	r2, [r3, #0]
        f1[0] = f[1] ^ f0[1];
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	3302      	adds	r3, #2
 8000778:	881a      	ldrh	r2, [r3, #0]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3302      	adds	r3, #2
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	4053      	eors	r3, r2
 8000782:	b29a      	uxth	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	801a      	strh	r2, [r3, #0]
        break;
 8000788:	e087      	b.n	800089a <radix+0x302>

    case 3:
        f0[0] = f[0];
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	881a      	ldrh	r2, [r3, #0]
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	801a      	strh	r2, [r3, #0]
        f0[2] = f[4] ^ f[6];
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3308      	adds	r3, #8
 8000796:	8819      	ldrh	r1, [r3, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	330c      	adds	r3, #12
 800079c:	881a      	ldrh	r2, [r3, #0]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3304      	adds	r3, #4
 80007a2:	404a      	eors	r2, r1
 80007a4:	b292      	uxth	r2, r2
 80007a6:	801a      	strh	r2, [r3, #0]
        f0[3] = f[6] ^ f[7];
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	330c      	adds	r3, #12
 80007ac:	8819      	ldrh	r1, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	330e      	adds	r3, #14
 80007b2:	881a      	ldrh	r2, [r3, #0]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3306      	adds	r3, #6
 80007b8:	404a      	eors	r2, r1
 80007ba:	b292      	uxth	r2, r2
 80007bc:	801a      	strh	r2, [r3, #0]
        f1[1] = f[3] ^ f[5] ^ f[7];
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3306      	adds	r3, #6
 80007c2:	881a      	ldrh	r2, [r3, #0]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	330a      	adds	r3, #10
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	4053      	eors	r3, r2
 80007cc:	b299      	uxth	r1, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	330e      	adds	r3, #14
 80007d2:	881a      	ldrh	r2, [r3, #0]
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	3302      	adds	r3, #2
 80007d8:	404a      	eors	r2, r1
 80007da:	b292      	uxth	r2, r2
 80007dc:	801a      	strh	r2, [r3, #0]
        f1[2] = f[5] ^ f[6];
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	330a      	adds	r3, #10
 80007e2:	8819      	ldrh	r1, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	330c      	adds	r3, #12
 80007e8:	881a      	ldrh	r2, [r3, #0]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	3304      	adds	r3, #4
 80007ee:	404a      	eors	r2, r1
 80007f0:	b292      	uxth	r2, r2
 80007f2:	801a      	strh	r2, [r3, #0]
        f1[3] = f[7];
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f103 020e 	add.w	r2, r3, #14
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	3306      	adds	r3, #6
 80007fe:	8812      	ldrh	r2, [r2, #0]
 8000800:	801a      	strh	r2, [r3, #0]
        f0[1] = f[2] ^ f0[2] ^ f1[1];
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3304      	adds	r3, #4
 8000806:	881a      	ldrh	r2, [r3, #0]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	3304      	adds	r3, #4
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	4053      	eors	r3, r2
 8000810:	b299      	uxth	r1, r3
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	3302      	adds	r3, #2
 8000816:	881a      	ldrh	r2, [r3, #0]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3302      	adds	r3, #2
 800081c:	404a      	eors	r2, r1
 800081e:	b292      	uxth	r2, r2
 8000820:	801a      	strh	r2, [r3, #0]
        f1[0] = f[1] ^ f0[1];
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3302      	adds	r3, #2
 8000826:	881a      	ldrh	r2, [r3, #0]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	3302      	adds	r3, #2
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	4053      	eors	r3, r2
 8000830:	b29a      	uxth	r2, r3
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	801a      	strh	r2, [r3, #0]
        break;
 8000836:	e030      	b.n	800089a <radix+0x302>

    case 2:
        f0[0] = f[0];
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	881a      	ldrh	r2, [r3, #0]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	801a      	strh	r2, [r3, #0]
        f0[1] = f[2] ^ f[3];
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3304      	adds	r3, #4
 8000844:	8819      	ldrh	r1, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3306      	adds	r3, #6
 800084a:	881a      	ldrh	r2, [r3, #0]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3302      	adds	r3, #2
 8000850:	404a      	eors	r2, r1
 8000852:	b292      	uxth	r2, r2
 8000854:	801a      	strh	r2, [r3, #0]
        f1[0] = f[1] ^ f0[1];
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3302      	adds	r3, #2
 800085a:	881a      	ldrh	r2, [r3, #0]
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3302      	adds	r3, #2
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	4053      	eors	r3, r2
 8000864:	b29a      	uxth	r2, r3
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	801a      	strh	r2, [r3, #0]
        f1[1] = f[3];
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	1d9a      	adds	r2, r3, #6
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	3302      	adds	r3, #2
 8000872:	8812      	ldrh	r2, [r2, #0]
 8000874:	801a      	strh	r2, [r3, #0]
        break;
 8000876:	e010      	b.n	800089a <radix+0x302>

    case 1:
        f0[0] = f[0];
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	881a      	ldrh	r2, [r3, #0]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	801a      	strh	r2, [r3, #0]
        f1[0] = f[1];
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3302      	adds	r3, #2
 8000884:	881a      	ldrh	r2, [r3, #0]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	801a      	strh	r2, [r3, #0]
        break;
 800088a:	e006      	b.n	800089a <radix+0x302>

    default:
        radix_big(f0, f1, f, m_f);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f000 f806 	bl	80008a4 <radix_big>
        break;
 8000898:	bf00      	nop
    }
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop

080008a4 <radix_big>:

static void radix_big(uint16_t *f0, uint16_t *f1, const uint16_t *f, uint32_t m_f) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b098      	sub	sp, #96	@ 0x60
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	603b      	str	r3, [r7, #0]
    uint16_t Q[2 * (1 << (PARAM_FFT - 2)) + 1] = {0};
 80008b2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	821a      	strh	r2, [r3, #16]
    uint16_t R[2 * (1 << (PARAM_FFT - 2)) + 1] = {0};
 80008c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	821a      	strh	r2, [r3, #16]

    uint16_t Q0[1 << (PARAM_FFT - 2)] = {0};
 80008d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
    uint16_t Q1[1 << (PARAM_FFT - 2)] = {0};
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
    uint16_t R0[1 << (PARAM_FFT - 2)] = {0};
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
    uint16_t R1[1 << (PARAM_FFT - 2)] = {0};
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]

    size_t i, n;

    n = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    n <<= (m_f - 2);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	3b02      	subs	r3, #2
 8000902:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	65bb      	str	r3, [r7, #88]	@ 0x58
    memcpy(Q, f + 3 * n, 2 * n);
 800090a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	461a      	mov	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	1899      	adds	r1, r3, r2
 800091a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800091c:	005a      	lsls	r2, r3, #1
 800091e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000922:	4618      	mov	r0, r3
 8000924:	f009 fead 	bl	800a682 <memcpy>
    memcpy(Q + n, f + 3 * n, 2 * n);
 8000928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000930:	18d0      	adds	r0, r2, r3
 8000932:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000934:	4613      	mov	r3, r2
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	1899      	adds	r1, r3, r2
 8000942:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	461a      	mov	r2, r3
 8000948:	f009 fe9b 	bl	800a682 <memcpy>
    memcpy(R, f, 4 * n);
 800094c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800094e:	009a      	lsls	r2, r3, #2
 8000950:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	4618      	mov	r0, r3
 8000958:	f009 fe93 	bl	800a682 <memcpy>

    for (i = 0; i < n; ++i) {
 800095c:	2300      	movs	r3, #0
 800095e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000960:	e030      	b.n	80009c4 <radix_big+0x120>
        Q[i] ^= f[2 * n + i];
 8000962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	3360      	adds	r3, #96	@ 0x60
 8000968:	443b      	add	r3, r7
 800096a:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 800096e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000970:	0059      	lsls	r1, r3, #1
 8000972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000974:	440b      	add	r3, r1
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	6879      	ldr	r1, [r7, #4]
 800097a:	440b      	add	r3, r1
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4053      	eors	r3, r2
 8000980:	b29a      	uxth	r2, r3
 8000982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	3360      	adds	r3, #96	@ 0x60
 8000988:	443b      	add	r3, r7
 800098a:	f823 2c1c 	strh.w	r2, [r3, #-28]
        R[n + i] ^= Q[i];
 800098e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000992:	4413      	add	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	3360      	adds	r3, #96	@ 0x60
 8000998:	443b      	add	r3, r7
 800099a:	f833 1c30 	ldrh.w	r1, [r3, #-48]
 800099e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	3360      	adds	r3, #96	@ 0x60
 80009a4:	443b      	add	r3, r7
 80009a6:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 80009aa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80009ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009ae:	4403      	add	r3, r0
 80009b0:	404a      	eors	r2, r1
 80009b2:	b292      	uxth	r2, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	3360      	adds	r3, #96	@ 0x60
 80009b8:	443b      	add	r3, r7
 80009ba:	f823 2c30 	strh.w	r2, [r3, #-48]
    for (i = 0; i < n; ++i) {
 80009be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009c0:	3301      	adds	r3, #1
 80009c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80009c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80009c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d3ca      	bcc.n	8000962 <radix_big+0xbe>
    }

    radix(Q0, Q1, Q, m_f - 1);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80009d4:	f107 0120 	add.w	r1, r7, #32
 80009d8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80009dc:	f7ff fddc 	bl	8000598 <radix>
    radix(R0, R1, R, m_f - 1);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80009e8:	f107 0110 	add.w	r1, r7, #16
 80009ec:	f107 0018 	add.w	r0, r7, #24
 80009f0:	f7ff fdd2 	bl	8000598 <radix>

    memcpy(f0, R0, 2 * n);
 80009f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80009f6:	005a      	lsls	r2, r3, #1
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f009 fe3f 	bl	800a682 <memcpy>
    memcpy(f0 + n, Q0, 2 * n);
 8000a04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	18d0      	adds	r0, r2, r3
 8000a0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a0e:	005a      	lsls	r2, r3, #1
 8000a10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a14:	4619      	mov	r1, r3
 8000a16:	f009 fe34 	bl	800a682 <memcpy>
    memcpy(f1, R1, 2 * n);
 8000a1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a1c:	005a      	lsls	r2, r3, #1
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	68b8      	ldr	r0, [r7, #8]
 8000a26:	f009 fe2c 	bl	800a682 <memcpy>
    memcpy(f1 + n, Q1, 2 * n);
 8000a2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	18d0      	adds	r0, r2, r3
 8000a32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a34:	005a      	lsls	r2, r3, #1
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f009 fe21 	bl	800a682 <memcpy>
}
 8000a40:	bf00      	nop
 8000a42:	3760      	adds	r7, #96	@ 0x60
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <fft_rec>:
 * @param[in] f_coeffs Number of coefficients of f
 * @param[in] m Number of betas
 * @param[in] m_f Number of coefficients of f (one more than its degree)
 * @param[in] betas FFT constants
 */
static void fft_rec(uint16_t *w, uint16_t *f, size_t f_coeffs, uint8_t m, uint32_t m_f, const uint16_t *betas) {
 8000a48:	b5b0      	push	{r4, r5, r7, lr}
 8000a4a:	b0f8      	sub	sp, #480	@ 0x1e0
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 8000a52:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8000a56:	6020      	str	r0, [r4, #0]
 8000a58:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8000a5c:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 8000a60:	6001      	str	r1, [r0, #0]
 8000a62:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8000a66:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8000a6a:	600a      	str	r2, [r1, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000a72:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000a76:	701a      	strb	r2, [r3, #0]
    uint16_t f0[1 << (PARAM_FFT - 2)] = {0};
 8000a78:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
    uint16_t f1[1 << (PARAM_FFT - 2)] = {0};
 8000a82:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
    uint16_t gammas[PARAM_M - 2] = {0};
 8000a8c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
    uint16_t deltas[PARAM_M - 2] = {0};
 8000a98:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
    uint16_t gammas_sums[1 << (PARAM_M - 2)] = {0};
 8000aa4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000aa8:	2280      	movs	r2, #128	@ 0x80
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f009 fda3 	bl	800a5f8 <memset>
    uint16_t u[1 << (PARAM_M - 2)] = {0};
 8000ab2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000ab6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000aba:	4618      	mov	r0, r3
 8000abc:	2380      	movs	r3, #128	@ 0x80
 8000abe:	461a      	mov	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f009 fd99 	bl	800a5f8 <memset>
    uint16_t v[1 << (PARAM_M - 2)] = {0};
 8000ac6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000aca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8000ace:	4618      	mov	r0, r3
 8000ad0:	2380      	movs	r3, #128	@ 0x80
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f009 fd8f 	bl	800a5f8 <memset>
    uint16_t tmp[PARAM_M - (PARAM_FFT - 1)] = {0};
 8000ada:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000ade:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	811a      	strh	r2, [r3, #8]
    uint16_t beta_m_pow;
    size_t i, j, k;
    size_t x;

    // Step 1
    if (m_f == 1) {
 8000aea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	f040 8085 	bne.w	8000bfe <fft_rec+0x1b6>
        for (i = 0; i < m; ++i) {
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000afa:	e020      	b.n	8000b3e <fft_rec+0xf6>
            tmp[i] = PQCLEAN_HQC128_CLEAN_gf_mul(betas[i], f[1]);
 8000afc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8000b06:	4413      	add	r3, r2
 8000b08:	881a      	ldrh	r2, [r3, #0]
 8000b0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000b0e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3302      	adds	r3, #2
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	f004 fbb5 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4619      	mov	r1, r3
 8000b24:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000b28:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8000b2c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8000b30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (i = 0; i < m; ++i) {
 8000b34:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000b38:	3301      	adds	r3, #1
 8000b3a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000b3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000b42:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d3d5      	bcc.n	8000afc <fft_rec+0xb4>
        }

        w[0] = f[0];
 8000b50:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000b54:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	881a      	ldrh	r2, [r3, #0]
 8000b5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000b60:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	801a      	strh	r2, [r3, #0]
        x = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        for (j = 0; j < m; ++j) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8000b74:	e039      	b.n	8000bea <fft_rec+0x1a2>
            for (k = 0; k < x; ++k) {
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000b7c:	e025      	b.n	8000bca <fft_rec+0x182>
                w[x + k] = w[k] ^ tmp[j];
 8000b7e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8000b88:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	8819      	ldrh	r1, [r3, #0]
 8000b92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000b96:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8000b9a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8000b9e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000ba2:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8000ba6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000baa:	4403      	add	r3, r0
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8000bb2:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 8000bb6:	6800      	ldr	r0, [r0, #0]
 8000bb8:	4403      	add	r3, r0
 8000bba:	404a      	eors	r2, r1
 8000bbc:	b292      	uxth	r2, r2
 8000bbe:	801a      	strh	r2, [r3, #0]
            for (k = 0; k < x; ++k) {
 8000bc0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000bca:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8000bce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d3d3      	bcc.n	8000b7e <fft_rec+0x136>
            }
            x <<= 1;
 8000bd6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        for (j = 0; j < m; ++j) {
 8000be0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000be4:	3301      	adds	r3, #1
 8000be6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8000bea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000bee:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d3bc      	bcc.n	8000b76 <fft_rec+0x12e>
        }

        return;
 8000bfc:	e224      	b.n	8001048 <fft_rec+0x600>
    }

    // Step 2: compute g
    if (betas[m - 1] != 1) {
 8000bfe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000c02:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8000c14:	4413      	add	r3, r2
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d04c      	beq.n	8000cb6 <fft_rec+0x26e>
        beta_m_pow = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
        x = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        x <<= m_f;
 8000c28:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8000c2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        for (i = 1; i < x; ++i) {
 8000c38:	2301      	movs	r3, #1
 8000c3a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000c3e:	e034      	b.n	8000caa <fft_rec+0x262>
            beta_m_pow = PQCLEAN_HQC128_CLEAN_gf_mul(beta_m_pow, betas[m - 1]);
 8000c40:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000c44:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8000c56:	4413      	add	r3, r2
 8000c58:	881a      	ldrh	r2, [r3, #0]
 8000c5a:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f004 fb12 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
            f[i] = PQCLEAN_HQC128_CLEAN_gf_mul(beta_m_pow, f[i]);
 8000c6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8000c76:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	8819      	ldrh	r1, [r3, #0]
 8000c80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8000c8a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8000c8e:	6812      	ldr	r2, [r2, #0]
 8000c90:	18d4      	adds	r4, r2, r3
 8000c92:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8000c96:	4618      	mov	r0, r3
 8000c98:	f004 faf7 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	8023      	strh	r3, [r4, #0]
        for (i = 1; i < x; ++i) {
 8000ca0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000caa:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8000cae:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d3c4      	bcc.n	8000c40 <fft_rec+0x1f8>
        }
    }

    // Step 3
    radix(f0, f1, f, m_f);
 8000cb6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000cba:	f5a3 72e8 	sub.w	r2, r3, #464	@ 0x1d0
 8000cbe:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 8000cc2:	f507 70de 	add.w	r0, r7, #444	@ 0x1bc
 8000cc6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000cca:	6812      	ldr	r2, [r2, #0]
 8000ccc:	f7ff fc64 	bl	8000598 <radix>

    // Step 4: compute gammas and deltas
    for (i = 0; i + 1 < m; ++i) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000cd6:	e049      	b.n	8000d6c <fft_rec+0x324>
        gammas[i] = PQCLEAN_HQC128_CLEAN_gf_mul(betas[i], PQCLEAN_HQC128_CLEAN_gf_inverse(betas[m - 1]));
 8000cd8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8000ce2:	4413      	add	r3, r2
 8000ce4:	881c      	ldrh	r4, [r3, #0]
 8000ce6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000cea:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8000cfc:	4413      	add	r3, r2
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 fb1b 	bl	800533c <PQCLEAN_HQC128_CLEAN_gf_inverse>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f004 fabd 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8000d1e:	443b      	add	r3, r7
 8000d20:	f823 2c30 	strh.w	r2, [r3, #-48]
        deltas[i] = PQCLEAN_HQC128_CLEAN_gf_square(gammas[i]) ^ gammas[i];
 8000d24:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8000d2e:	443b      	add	r3, r7
 8000d30:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 fad1 	bl	80052dc <PQCLEAN_HQC128_CLEAN_gf_square>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8000d48:	443b      	add	r3, r7
 8000d4a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8000d4e:	4053      	eors	r3, r2
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8000d5c:	443b      	add	r3, r7
 8000d5e:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (i = 0; i + 1 < m; ++i) {
 8000d62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000d66:	3301      	adds	r3, #1
 8000d68:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000d6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000d76:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d3ab      	bcc.n	8000cd8 <fft_rec+0x290>
    }

    // Compute gammas sums
    compute_subset_sums(gammas_sums, gammas, m - 1);
 8000d80:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000d84:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8000d94:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fbc0 	bl	800051e <compute_subset_sums>

    // Step 5
    fft_rec(u, f0, (f_coeffs + 1) / 2, m - 1, m_f - 1, deltas);
 8000d9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000da2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	085c      	lsrs	r4, r3, #1
 8000dac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000db0:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	b2dd      	uxtb	r5, r3
 8000dba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8000dc4:	f107 009c 	add.w	r0, r7, #156	@ 0x9c
 8000dc8:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 8000dcc:	9201      	str	r2, [sp, #4]
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	462b      	mov	r3, r5
 8000dd2:	4622      	mov	r2, r4
 8000dd4:	f7ff fe38 	bl	8000a48 <fft_rec>

    k = 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    k <<= ((m - 1) & 0xf); // &0xf is to let the compiler know that m-1 is small.
 8000dde:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000de2:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	f003 030f 	and.w	r3, r3, #15
 8000dee:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    if (f_coeffs <= 3) { // 3-coefficient polynomial f case: f1 is constant
 8000dfa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000dfe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d86d      	bhi.n	8000ee4 <fft_rec+0x49c>
        w[0] = u[0];
 8000e08:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000e0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e10:	881a      	ldrh	r2, [r3, #0]
 8000e12:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000e16:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	801a      	strh	r2, [r3, #0]
        w[k] = u[0] ^ f1[0];
 8000e1e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000e22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e26:	8819      	ldrh	r1, [r3, #0]
 8000e28:	f8b7 21b4 	ldrh.w	r2, [r7, #436]	@ 0x1b4
 8000e2c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8000e36:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 8000e3a:	6800      	ldr	r0, [r0, #0]
 8000e3c:	4403      	add	r3, r0
 8000e3e:	404a      	eors	r2, r1
 8000e40:	b292      	uxth	r2, r2
 8000e42:	801a      	strh	r2, [r3, #0]
        for (i = 1; i < k; ++i) {
 8000e44:	2301      	movs	r3, #1
 8000e46:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000e4a:	e044      	b.n	8000ed6 <fft_rec+0x48e>
            w[i] = u[i] ^ PQCLEAN_HQC128_CLEAN_gf_mul(gammas_sums[i], f1[0]);
 8000e4c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000e50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000e54:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8000e58:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8000e5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8000e66:	443b      	add	r3, r7
 8000e68:	f833 3cbc 	ldrh.w	r3, [r3, #-188]
 8000e6c:	f8b7 21b4 	ldrh.w	r2, [r7, #436]	@ 0x1b4
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 fa09 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8000e86:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	ea84 0201 	eor.w	r2, r4, r1
 8000e92:	b292      	uxth	r2, r2
 8000e94:	801a      	strh	r2, [r3, #0]
            w[k + i] = w[i] ^ f1[0];
 8000e96:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8000ea0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	8819      	ldrh	r1, [r3, #0]
 8000eaa:	f8b7 21b4 	ldrh.w	r2, [r7, #436]	@ 0x1b4
 8000eae:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8000eb2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000eb6:	4403      	add	r3, r0
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8000ebe:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 8000ec2:	6800      	ldr	r0, [r0, #0]
 8000ec4:	4403      	add	r3, r0
 8000ec6:	404a      	eors	r2, r1
 8000ec8:	b292      	uxth	r2, r2
 8000eca:	801a      	strh	r2, [r3, #0]
        for (i = 1; i < k; ++i) {
 8000ecc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000ed6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8000eda:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d3b4      	bcc.n	8000e4c <fft_rec+0x404>
 8000ee2:	e0b1      	b.n	8001048 <fft_rec+0x600>
        }
    } else {
        fft_rec(v, f1, f_coeffs / 2, m - 1, m_f - 1, deltas);
 8000ee4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000ee8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	085c      	lsrs	r4, r3, #1
 8000ef0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000ef4:	f2a3 13d5 	subw	r3, r3, #469	@ 0x1d5
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b2dd      	uxtb	r5, r3
 8000efe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 8000f08:	f107 001c 	add.w	r0, r7, #28
 8000f0c:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 8000f10:	9201      	str	r2, [sp, #4]
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	462b      	mov	r3, r5
 8000f16:	4622      	mov	r2, r4
 8000f18:	f7ff fd96 	bl	8000a48 <fft_rec>

        // Step 6
        memcpy(w + k, v, 2 * k);
 8000f1c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8000f26:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	18d0      	adds	r0, r2, r3
 8000f2e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f32:	005a      	lsls	r2, r3, #1
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f009 fba2 	bl	800a682 <memcpy>
        w[0] = u[0];
 8000f3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000f42:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f46:	881a      	ldrh	r2, [r3, #0]
 8000f48:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000f4c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	801a      	strh	r2, [r3, #0]
        w[k] ^= u[0];
 8000f54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8000f5e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	8819      	ldrh	r1, [r3, #0]
 8000f68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000f6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f70:	881a      	ldrh	r2, [r3, #0]
 8000f72:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8000f7c:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 8000f80:	6800      	ldr	r0, [r0, #0]
 8000f82:	4403      	add	r3, r0
 8000f84:	404a      	eors	r2, r1
 8000f86:	b292      	uxth	r2, r2
 8000f88:	801a      	strh	r2, [r3, #0]
        for (i = 1; i < k; ++i) {
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8000f90:	e054      	b.n	800103c <fft_rec+0x5f4>
            w[i] = u[i] ^ PQCLEAN_HQC128_CLEAN_gf_mul(gammas_sums[i], v[i]);
 8000f92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000f96:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f9a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8000f9e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8000fa2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8000fac:	443b      	add	r3, r7
 8000fae:	f833 0cbc 	ldrh.w	r0, [r3, #-188]
 8000fb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8000fb6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8000fba:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8000fbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f004 f961 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8000fd6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8000fda:	6812      	ldr	r2, [r2, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	ea84 0201 	eor.w	r2, r4, r1
 8000fe2:	b292      	uxth	r2, r2
 8000fe4:	801a      	strh	r2, [r3, #0]
            w[k + i] ^= w[i];
 8000fe6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8000fea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8000ff6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	8819      	ldrh	r1, [r3, #0]
 8001000:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800100a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	4413      	add	r3, r2
 8001012:	881a      	ldrh	r2, [r3, #0]
 8001014:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8001018:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800101c:	4403      	add	r3, r0
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8001024:	f5a0 70e6 	sub.w	r0, r0, #460	@ 0x1cc
 8001028:	6800      	ldr	r0, [r0, #0]
 800102a:	4403      	add	r3, r0
 800102c:	404a      	eors	r2, r1
 800102e:	b292      	uxth	r2, r2
 8001030:	801a      	strh	r2, [r3, #0]
        for (i = 1; i < k; ++i) {
 8001032:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001036:	3301      	adds	r3, #1
 8001038:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800103c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8001040:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001044:	429a      	cmp	r2, r3
 8001046:	d3a4      	bcc.n	8000f92 <fft_rec+0x54a>
        }
    }
}
 8001048:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 800104c:	46bd      	mov	sp, r7
 800104e:	bdb0      	pop	{r4, r5, r7, pc}

08001050 <PQCLEAN_HQC128_CLEAN_fft>:
 *
 * @param[out] w Array
 * @param[in] f Array of 2^PARAM_FFT elements
 * @param[in] f_coeffs Number coefficients of f (i.e. deg(f)+1)
 */
void PQCLEAN_HQC128_CLEAN_fft(uint16_t *w, const uint16_t *f, size_t f_coeffs) {
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	f5ad 7d59 	sub.w	sp, sp, #868	@ 0x364
 8001056:	af02      	add	r7, sp, #8
 8001058:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800105c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001060:	6018      	str	r0, [r3, #0]
 8001062:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001066:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800106a:	6019      	str	r1, [r3, #0]
 800106c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001070:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8001074:	601a      	str	r2, [r3, #0]
    uint16_t betas[PARAM_M - 1] = {0};
 8001076:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	819a      	strh	r2, [r3, #12]
    uint16_t betas_sums[1 << (PARAM_M - 1)] = {0};
 8001084:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001088:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800108c:	4618      	mov	r0, r3
 800108e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001092:	461a      	mov	r2, r3
 8001094:	2100      	movs	r1, #0
 8001096:	f009 faaf 	bl	800a5f8 <memset>
    uint16_t f0[1 << (PARAM_FFT - 1)] = {0};
 800109a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800109e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80010a2:	461a      	mov	r2, r3
 80010a4:	2300      	movs	r3, #0
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	6053      	str	r3, [r2, #4]
 80010aa:	6093      	str	r3, [r2, #8]
 80010ac:	60d3      	str	r3, [r2, #12]
    uint16_t f1[1 << (PARAM_FFT - 1)] = {0};
 80010ae:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80010b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80010b6:	461a      	mov	r2, r3
 80010b8:	2300      	movs	r3, #0
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	6053      	str	r3, [r2, #4]
 80010be:	6093      	str	r3, [r2, #8]
 80010c0:	60d3      	str	r3, [r2, #12]
    uint16_t deltas[PARAM_M - 1] = {0};
 80010c2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80010c6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	819a      	strh	r2, [r3, #12]
    uint16_t u[1 << (PARAM_M - 1)] = {0};
 80010d4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80010d8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80010dc:	4618      	mov	r0, r3
 80010de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e2:	461a      	mov	r2, r3
 80010e4:	2100      	movs	r1, #0
 80010e6:	f009 fa87 	bl	800a5f8 <memset>
    uint16_t v[1 << (PARAM_M - 1)] = {0};
 80010ea:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80010ee:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 80010f2:	4618      	mov	r0, r3
 80010f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f8:	461a      	mov	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	f009 fa7c 	bl	800a5f8 <memset>

    size_t i, k;

    // Follows Gao and Mateer algorithm
    compute_fft_betas(betas);
 8001100:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f9eb 	bl	80004e0 <compute_fft_betas>

    // Step 1: PARAM_FFT > 1, nothing to do

    // Compute gammas sums
    compute_subset_sums(betas_sums, betas, PARAM_M - 1);
 800110a:	f507 7150 	add.w	r1, r7, #832	@ 0x340
 800110e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001112:	2207      	movs	r2, #7
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa02 	bl	800051e <compute_subset_sums>

    // Step 2: beta_m = 1, nothing to do

    // Step 3
    radix(f0, f1, f, PARAM_FFT);
 800111a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800111e:	f5a3 7254 	sub.w	r2, r3, #848	@ 0x350
 8001122:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8001126:	f507 700c 	add.w	r0, r7, #560	@ 0x230
 800112a:	2304      	movs	r3, #4
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	f7ff fa33 	bl	8000598 <radix>

    // Step 4: Compute deltas
    for (i = 0; i < PARAM_M - 1; ++i) {
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001138:	e023      	b.n	8001182 <PQCLEAN_HQC128_CLEAN_fft+0x132>
        deltas[i] = PQCLEAN_HQC128_CLEAN_gf_square(betas[i]) ^ betas[i];
 800113a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8001144:	443b      	add	r3, r7
 8001146:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800114a:	4618      	mov	r0, r3
 800114c:	f004 f8c6 	bl	80052dc <PQCLEAN_HQC128_CLEAN_gf_square>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800115e:	443b      	add	r3, r7
 8001160:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001164:	4053      	eors	r3, r2
 8001166:	b299      	uxth	r1, r3
 8001168:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800116c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001170:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8001174:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < PARAM_M - 1; ++i) {
 8001178:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800117c:	3301      	adds	r3, #1
 800117e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001182:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001186:	2b06      	cmp	r3, #6
 8001188:	d9d7      	bls.n	800113a <PQCLEAN_HQC128_CLEAN_fft+0xea>
    }

    // Step 5
    fft_rec(u, f0, (f_coeffs + 1) / 2, PARAM_M - 1, PARAM_FFT - 1, deltas);
 800118a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800118e:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	085a      	lsrs	r2, r3, #1
 8001198:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800119c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80011a0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2303      	movs	r3, #3
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2307      	movs	r3, #7
 80011ac:	f7ff fc4c 	bl	8000a48 <fft_rec>
    fft_rec(v, f1, f_coeffs / 2, PARAM_M - 1, PARAM_FFT - 1, deltas);
 80011b0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80011b4:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	085a      	lsrs	r2, r3, #1
 80011bc:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 80011c0:	f107 0010 	add.w	r0, r7, #16
 80011c4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	2303      	movs	r3, #3
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2307      	movs	r3, #7
 80011d0:	f7ff fc3a 	bl	8000a48 <fft_rec>

    k = 1 << (PARAM_M - 1);
 80011d4:	2380      	movs	r3, #128	@ 0x80
 80011d6:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
    // Step 6, 7 and error polynomial computation
    memcpy(w + k, v, 2 * k);
 80011da:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80011e4:	f5a2 7253 	sub.w	r2, r2, #844	@ 0x34c
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	18d0      	adds	r0, r2, r3
 80011ec:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80011f0:	005a      	lsls	r2, r3, #1
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	f009 fa43 	bl	800a682 <memcpy>

    // Check if 0 is root
    w[0] = u[0];
 80011fc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001200:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800120a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	801a      	strh	r2, [r3, #0]

    // Check if 1 is root
    w[k] ^= u[0];
 8001212:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800121c:	f5a2 7253 	sub.w	r2, r2, #844	@ 0x34c
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	4413      	add	r3, r2
 8001224:	8819      	ldrh	r1, [r3, #0]
 8001226:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800122a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800122e:	881a      	ldrh	r2, [r3, #0]
 8001230:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	f507 7056 	add.w	r0, r7, #856	@ 0x358
 800123a:	f5a0 7053 	sub.w	r0, r0, #844	@ 0x34c
 800123e:	6800      	ldr	r0, [r0, #0]
 8001240:	4403      	add	r3, r0
 8001242:	404a      	eors	r2, r1
 8001244:	b292      	uxth	r2, r2
 8001246:	801a      	strh	r2, [r3, #0]

    // Find other roots
    for (i = 1; i < k; ++i) {
 8001248:	2301      	movs	r3, #1
 800124a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800124e:	e054      	b.n	80012fa <PQCLEAN_HQC128_CLEAN_fft+0x2aa>
        w[i] = u[i] ^ PQCLEAN_HQC128_CLEAN_gf_mul(betas_sums[i], v[i]);
 8001250:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001254:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8001258:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800125c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8001260:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001264:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001268:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800126c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8001270:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001274:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8001278:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 800127c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001280:	4619      	mov	r1, r3
 8001282:	f004 f802 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8001286:	4603      	mov	r3, r0
 8001288:	4619      	mov	r1, r3
 800128a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8001294:	f5a2 7253 	sub.w	r2, r2, #844	@ 0x34c
 8001298:	6812      	ldr	r2, [r2, #0]
 800129a:	4413      	add	r3, r2
 800129c:	ea84 0201 	eor.w	r2, r4, r1
 80012a0:	b292      	uxth	r2, r2
 80012a2:	801a      	strh	r2, [r3, #0]
        w[k + i] ^= w[i];
 80012a4:	f8d7 2350 	ldr.w	r2, [r7, #848]	@ 0x350
 80012a8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80012ac:	4413      	add	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80012b4:	f5a2 7253 	sub.w	r2, r2, #844	@ 0x34c
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	8819      	ldrh	r1, [r3, #0]
 80012be:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80012c8:	f5a2 7253 	sub.w	r2, r2, #844	@ 0x34c
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	881a      	ldrh	r2, [r3, #0]
 80012d2:	f8d7 0350 	ldr.w	r0, [r7, #848]	@ 0x350
 80012d6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80012da:	4403      	add	r3, r0
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	f507 7056 	add.w	r0, r7, #856	@ 0x358
 80012e2:	f5a0 7053 	sub.w	r0, r0, #844	@ 0x34c
 80012e6:	6800      	ldr	r0, [r0, #0]
 80012e8:	4403      	add	r3, r0
 80012ea:	404a      	eors	r2, r1
 80012ec:	b292      	uxth	r2, r2
 80012ee:	801a      	strh	r2, [r3, #0]
    for (i = 1; i < k; ++i) {
 80012f0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80012f4:	3301      	adds	r3, #1
 80012f6:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80012fa:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80012fe:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001302:	429a      	cmp	r2, r3
 8001304:	d3a4      	bcc.n	8001250 <PQCLEAN_HQC128_CLEAN_fft+0x200>
    }
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	f507 7757 	add.w	r7, r7, #860	@ 0x35c
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}
	...

08001314 <PQCLEAN_HQC128_CLEAN_fft_retrieve_error_poly>:
 *
 * @param[out] error Array with the error
 * @param[out] error_compact Array with the error in a compact form
 * @param[in] w Array of size 2^PARAM_M
 */
void PQCLEAN_HQC128_CLEAN_fft_retrieve_error_poly(uint8_t *error, const uint16_t *w) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b0ca      	sub	sp, #296	@ 0x128
 8001318:	af00      	add	r7, sp, #0
 800131a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800131e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001322:	6018      	str	r0, [r3, #0]
 8001324:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001328:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800132c:	6019      	str	r1, [r3, #0]
    uint16_t gammas[PARAM_M - 1] = {0};
 800132e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	819a      	strh	r2, [r3, #12]
    uint16_t gammas_sums[1 << (PARAM_M - 1)] = {0};
 800133c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001340:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001344:	4618      	mov	r0, r3
 8001346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800134a:	461a      	mov	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	f009 f953 	bl	800a5f8 <memset>
    uint16_t k;
    size_t i, index;

    compute_fft_betas(gammas);
 8001352:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f8c2 	bl	80004e0 <compute_fft_betas>
    compute_subset_sums(gammas_sums, gammas, PARAM_M - 1);
 800135c:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2207      	movs	r2, #7
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8d9 	bl	800051e <compute_subset_sums>

    k = 1 << (PARAM_M - 1);
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    error[0] ^= 1 ^ ((uint16_t) - w[0] >> 15);
 8001372:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001376:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001382:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	425b      	negs	r3, r3
 800138c:	b29b      	uxth	r3, r3
 800138e:	0bdb      	lsrs	r3, r3, #15
 8001390:	b29b      	uxth	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4053      	eors	r3, r2
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f083 0301 	eor.w	r3, r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013a2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
    error[0] ^= 1 ^ ((uint16_t) - w[k] >> 15);
 80013aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 80013c0:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 80013c4:	6809      	ldr	r1, [r1, #0]
 80013c6:	440b      	add	r3, r1
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	425b      	negs	r3, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	0bdb      	lsrs	r3, r3, #15
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4053      	eors	r3, r2
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f083 0301 	eor.w	r3, r3, #1
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	701a      	strb	r2, [r3, #0]

    for (i = 1; i < k; ++i) {
 80013ea:	2301      	movs	r3, #1
 80013ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80013f0:	e076      	b.n	80014e0 <PQCLEAN_HQC128_CLEAN_fft_retrieve_error_poly+0x1cc>
        index = PARAM_GF_MUL_ORDER - gf_log[gammas_sums[i]];
 80013f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001402:	461a      	mov	r2, r3
 8001404:	4b3c      	ldr	r3, [pc, #240]	@ (80014f8 <PQCLEAN_HQC128_CLEAN_fft_retrieve_error_poly+0x1e4>)
 8001406:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800140a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800140e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        error[index] ^= 1 ^ ((uint16_t) - w[i] >> 15);
 8001412:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001416:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001420:	4413      	add	r3, r2
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800142e:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 8001432:	6809      	ldr	r1, [r1, #0]
 8001434:	440b      	add	r3, r1
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	425b      	negs	r3, r3
 800143a:	b29b      	uxth	r3, r3
 800143c:	0bdb      	lsrs	r3, r3, #15
 800143e:	b29b      	uxth	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4053      	eors	r3, r2
 8001444:	b2da      	uxtb	r2, r3
 8001446:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800144a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800144e:	6819      	ldr	r1, [r3, #0]
 8001450:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001454:	440b      	add	r3, r1
 8001456:	f082 0201 	eor.w	r2, r2, #1
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

        index = PARAM_GF_MUL_ORDER - gf_log[gammas_sums[i] ^ 1];
 800145e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001462:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001466:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800146a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800146e:	f083 0301 	eor.w	r3, r3, #1
 8001472:	b29b      	uxth	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <PQCLEAN_HQC128_CLEAN_fft_retrieve_error_poly+0x1e4>)
 8001478:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800147c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001480:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        error[index] ^= 1 ^ ((uint16_t) - w[k + i] >> 15);
 8001484:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001488:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001492:	4413      	add	r3, r2
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	f8b7 1122 	ldrh.w	r1, [r7, #290]	@ 0x122
 800149a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800149e:	440b      	add	r3, r1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 80014a6:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 80014aa:	6809      	ldr	r1, [r1, #0]
 80014ac:	440b      	add	r3, r1
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	425b      	negs	r3, r3
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	0bdb      	lsrs	r3, r3, #15
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4053      	eors	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80014c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014c6:	6819      	ldr	r1, [r3, #0]
 80014c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014cc:	440b      	add	r3, r1
 80014ce:	f082 0201 	eor.w	r2, r2, #1
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]
    for (i = 1; i < k; ++i) {
 80014d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014da:	3301      	adds	r3, #1
 80014dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80014e0:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80014e4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d382      	bcc.n	80013f2 <PQCLEAN_HQC128_CLEAN_fft_retrieve_error_poly+0xde>
    }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	0800b2d0 	.word	0x0800b2d0

080014fc <KeccakF1600_StatePermute>:
 *
 * Description: The Keccak F1600 Permutation
 *
 * Arguments:   - uint64_t *state: pointer to input/output Keccak state
 **************************************************/
static void KeccakF1600_StatePermute(uint64_t *state) {
 80014fc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001500:	f6ad 3d8c 	subw	sp, sp, #2956	@ 0xb8c
 8001504:	af00      	add	r7, sp, #0
 8001506:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800150a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800150e:	6018      	str	r0, [r3, #0]
    uint64_t Eka, Eke, Eki, Eko, Eku;
    uint64_t Ema, Eme, Emi, Emo, Emu;
    uint64_t Esa, Ese, Esi, Eso, Esu;

    // copyFromState(A, state)
    Aba = state[0];
 8001510:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001514:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8001522:	e9c1 2300 	strd	r2, r3, [r1]
    Abe = state[1];
 8001526:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800152a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001534:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8001538:	e9c1 2300 	strd	r2, r3, [r1]
    Abi = state[2];
 800153c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001540:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800154a:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 800154e:	e9c1 2300 	strd	r2, r3, [r1]
    Abo = state[3];
 8001552:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001556:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001560:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8001564:	e9c1 2300 	strd	r2, r3, [r1]
    Abu = state[4];
 8001568:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800156c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001576:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 800157a:	e9c1 2300 	strd	r2, r3, [r1]
    Aga = state[5];
 800157e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001582:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800158c:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 8001590:	e9c1 2300 	strd	r2, r3, [r1]
    Age = state[6];
 8001594:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001598:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015a2:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 80015a6:	e9c1 2300 	strd	r2, r3, [r1]
    Agi = state[7];
 80015aa:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80015ae:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80015b8:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 80015bc:	e9c1 2300 	strd	r2, r3, [r1]
    Ago = state[8];
 80015c0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80015c4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80015ce:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 80015d2:	e9c1 2300 	strd	r2, r3, [r1]
    Agu = state[9];
 80015d6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80015da:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80015e4:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]
    Aka = state[10];
 80015ec:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80015f0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80015fa:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 80015fe:	e9c1 2300 	strd	r2, r3, [r1]
    Ake = state[11];
 8001602:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001606:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8001610:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8001614:	e9c1 2300 	strd	r2, r3, [r1]
    Aki = state[12];
 8001618:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800161c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8001626:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 800162a:	e9c1 2300 	strd	r2, r3, [r1]
    Ako = state[13];
 800162e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001632:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800163c:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 8001640:	e9c1 2300 	strd	r2, r3, [r1]
    Aku = state[14];
 8001644:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001648:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001652:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8001656:	e9c1 2300 	strd	r2, r3, [r1]
    Ama = state[15];
 800165a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800165e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8001668:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 800166c:	e9c1 2300 	strd	r2, r3, [r1]
    Ame = state[16];
 8001670:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001674:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 800167e:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 8001682:	e9c1 2300 	strd	r2, r3, [r1]
    Ami = state[17];
 8001686:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800168a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001694:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8001698:	e9c1 2300 	strd	r2, r3, [r1]
    Amo = state[18];
 800169c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80016a0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80016aa:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 80016ae:	e9c1 2300 	strd	r2, r3, [r1]
    Amu = state[19];
 80016b2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80016b6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80016c0:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 80016c4:	e9c1 2300 	strd	r2, r3, [r1]
    Asa = state[20];
 80016c8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80016cc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80016d6:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 80016da:	e9c1 2300 	strd	r2, r3, [r1]
    Ase = state[21];
 80016de:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80016e2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80016ec:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 80016f0:	e9c1 2300 	strd	r2, r3, [r1]
    Asi = state[22];
 80016f4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80016f8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 8001702:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 8001706:	e9c1 2300 	strd	r2, r3, [r1]
    Aso = state[23];
 800170a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800170e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8001718:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 800171c:	e9c1 2300 	strd	r2, r3, [r1]
    Asu = state[24];
 8001720:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001724:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 800172e:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 8001732:	e9c1 2300 	strd	r2, r3, [r1]

    for (round = 0; round < NROUNDS; round += 2) {
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 800173c:	f002 bf10 	b.w	8004560 <KeccakF1600_StatePermute+0x3064>
        //    prepareTheta
        BCa = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
 8001740:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001748:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	ea80 0c02 	eor.w	ip, r0, r2
 8001754:	f8c7 c990 	str.w	ip, [r7, #2448]	@ 0x990
 8001758:	404b      	eors	r3, r1
 800175a:	f8c7 3994 	str.w	r3, [r7, #2452]	@ 0x994
 800175e:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f507 6119 	add.w	r1, r7, #2448	@ 0x990
 800176a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800176e:	4684      	mov	ip, r0
 8001770:	ea8c 0c02 	eor.w	ip, ip, r2
 8001774:	f8c7 c988 	str.w	ip, [r7, #2440]	@ 0x988
 8001778:	404b      	eors	r3, r1
 800177a:	f8c7 398c 	str.w	r3, [r7, #2444]	@ 0x98c
 800177e:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f607 1188 	addw	r1, r7, #2440	@ 0x988
 800178a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800178e:	4684      	mov	ip, r0
 8001790:	ea8c 0c02 	eor.w	ip, ip, r2
 8001794:	f8c7 c980 	str.w	ip, [r7, #2432]	@ 0x980
 8001798:	404b      	eors	r3, r1
 800179a:	f8c7 3984 	str.w	r3, [r7, #2436]	@ 0x984
 800179e:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f507 6118 	add.w	r1, r7, #2432	@ 0x980
 80017aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ae:	4684      	mov	ip, r0
 80017b0:	ea82 0c0c 	eor.w	ip, r2, ip
 80017b4:	f8c7 c548 	str.w	ip, [r7, #1352]	@ 0x548
 80017b8:	404b      	eors	r3, r1
 80017ba:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 80017be:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80017ca:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = Abe ^ Age ^ Ake ^ Ame ^ Ase;
 80017ce:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80017d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d6:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	ea80 0c02 	eor.w	ip, r0, r2
 80017e2:	f8c7 c978 	str.w	ip, [r7, #2424]	@ 0x978
 80017e6:	404b      	eors	r3, r1
 80017e8:	f8c7 397c 	str.w	r3, [r7, #2428]	@ 0x97c
 80017ec:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f607 1178 	addw	r1, r7, #2424	@ 0x978
 80017f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017fc:	4684      	mov	ip, r0
 80017fe:	ea8c 0c02 	eor.w	ip, ip, r2
 8001802:	f8c7 c970 	str.w	ip, [r7, #2416]	@ 0x970
 8001806:	404b      	eors	r3, r1
 8001808:	f8c7 3974 	str.w	r3, [r7, #2420]	@ 0x974
 800180c:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f507 6117 	add.w	r1, r7, #2416	@ 0x970
 8001818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800181c:	4684      	mov	ip, r0
 800181e:	ea8c 0c02 	eor.w	ip, ip, r2
 8001822:	f8c7 c968 	str.w	ip, [r7, #2408]	@ 0x968
 8001826:	404b      	eors	r3, r1
 8001828:	f8c7 396c 	str.w	r3, [r7, #2412]	@ 0x96c
 800182c:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f607 1168 	addw	r1, r7, #2408	@ 0x968
 8001838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800183c:	4684      	mov	ip, r0
 800183e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001842:	f8c7 c540 	str.w	ip, [r7, #1344]	@ 0x540
 8001846:	404b      	eors	r3, r1
 8001848:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 800184c:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8001858:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
 800185c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8001860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001864:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	ea80 0c02 	eor.w	ip, r0, r2
 8001870:	f8c7 c960 	str.w	ip, [r7, #2400]	@ 0x960
 8001874:	404b      	eors	r3, r1
 8001876:	f8c7 3964 	str.w	r3, [r7, #2404]	@ 0x964
 800187a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f507 6116 	add.w	r1, r7, #2400	@ 0x960
 8001886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800188a:	4684      	mov	ip, r0
 800188c:	ea8c 0c02 	eor.w	ip, ip, r2
 8001890:	f8c7 c958 	str.w	ip, [r7, #2392]	@ 0x958
 8001894:	404b      	eors	r3, r1
 8001896:	f8c7 395c 	str.w	r3, [r7, #2396]	@ 0x95c
 800189a:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f607 1158 	addw	r1, r7, #2392	@ 0x958
 80018a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018aa:	4684      	mov	ip, r0
 80018ac:	ea8c 0c02 	eor.w	ip, ip, r2
 80018b0:	f8c7 c950 	str.w	ip, [r7, #2384]	@ 0x950
 80018b4:	404b      	eors	r3, r1
 80018b6:	f8c7 3954 	str.w	r3, [r7, #2388]	@ 0x954
 80018ba:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f507 6115 	add.w	r1, r7, #2384	@ 0x950
 80018c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018ca:	4684      	mov	ip, r0
 80018cc:	ea82 0c0c 	eor.w	ip, r2, ip
 80018d0:	f8c7 c538 	str.w	ip, [r7, #1336]	@ 0x538
 80018d4:	404b      	eors	r3, r1
 80018d6:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 80018da:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
 80018ea:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80018ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f2:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	ea80 0c02 	eor.w	ip, r0, r2
 80018fe:	f8c7 c948 	str.w	ip, [r7, #2376]	@ 0x948
 8001902:	404b      	eors	r3, r1
 8001904:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 8001908:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f607 1148 	addw	r1, r7, #2376	@ 0x948
 8001914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001918:	4684      	mov	ip, r0
 800191a:	ea8c 0c02 	eor.w	ip, ip, r2
 800191e:	f8c7 c940 	str.w	ip, [r7, #2368]	@ 0x940
 8001922:	404b      	eors	r3, r1
 8001924:	f8c7 3944 	str.w	r3, [r7, #2372]	@ 0x944
 8001928:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f507 6114 	add.w	r1, r7, #2368	@ 0x940
 8001934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001938:	4684      	mov	ip, r0
 800193a:	ea8c 0c02 	eor.w	ip, ip, r2
 800193e:	f8c7 c938 	str.w	ip, [r7, #2360]	@ 0x938
 8001942:	404b      	eors	r3, r1
 8001944:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 8001948:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f607 1138 	addw	r1, r7, #2360	@ 0x938
 8001954:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001958:	4684      	mov	ip, r0
 800195a:	ea82 0c0c 	eor.w	ip, r2, ip
 800195e:	f8c7 c530 	str.w	ip, [r7, #1328]	@ 0x530
 8001962:	404b      	eors	r3, r1
 8001964:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 8001968:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8001974:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
 8001978:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 800197c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001980:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	ea80 0c02 	eor.w	ip, r0, r2
 800198c:	f8c7 c930 	str.w	ip, [r7, #2352]	@ 0x930
 8001990:	404b      	eors	r3, r1
 8001992:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 8001996:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f507 6113 	add.w	r1, r7, #2352	@ 0x930
 80019a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019a6:	4684      	mov	ip, r0
 80019a8:	ea8c 0c02 	eor.w	ip, ip, r2
 80019ac:	f8c7 c928 	str.w	ip, [r7, #2344]	@ 0x928
 80019b0:	404b      	eors	r3, r1
 80019b2:	f8c7 392c 	str.w	r3, [r7, #2348]	@ 0x92c
 80019b6:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f607 1128 	addw	r1, r7, #2344	@ 0x928
 80019c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019c6:	4684      	mov	ip, r0
 80019c8:	ea8c 0c02 	eor.w	ip, ip, r2
 80019cc:	f8c7 c920 	str.w	ip, [r7, #2336]	@ 0x920
 80019d0:	404b      	eors	r3, r1
 80019d2:	f8c7 3924 	str.w	r3, [r7, #2340]	@ 0x924
 80019d6:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f507 6112 	add.w	r1, r7, #2336	@ 0x920
 80019e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019e6:	4684      	mov	ip, r0
 80019e8:	ea82 0c0c 	eor.w	ip, r2, ip
 80019ec:	f8c7 c528 	str.w	ip, [r7, #1320]	@ 0x528
 80019f0:	404b      	eors	r3, r1
 80019f2:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 80019f6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]

        // thetaRhoPiChiIotaPrepareTheta(round  , A, E)
        Da = BCu ^ ROL(BCe, 1);
 8001a06:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8001a0a:	0fda      	lsrs	r2, r3, #31
 8001a0c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f8c7 391c 	str.w	r3, [r7, #2332]	@ 0x91c
 8001a18:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8001a1c:	0fda      	lsrs	r2, r3, #31
 8001a1e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4313      	orrs	r3, r2
 8001a26:	f8c7 3918 	str.w	r3, [r7, #2328]	@ 0x918
 8001a2a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f607 1118 	addw	r1, r7, #2328	@ 0x918
 8001a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a3a:	4684      	mov	ip, r0
 8001a3c:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a40:	f8c7 c520 	str.w	ip, [r7, #1312]	@ 0x520
 8001a44:	404b      	eors	r3, r1
 8001a46:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8001a4a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 8001a56:	e9c1 2300 	strd	r2, r3, [r1]
        De = BCa ^ ROL(BCi, 1);
 8001a5a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8001a5e:	0fda      	lsrs	r2, r3, #31
 8001a60:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4313      	orrs	r3, r2
 8001a68:	f8c7 3914 	str.w	r3, [r7, #2324]	@ 0x914
 8001a6c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8001a70:	0fda      	lsrs	r2, r3, #31
 8001a72:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f8c7 3910 	str.w	r3, [r7, #2320]	@ 0x910
 8001a7e:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	f507 6111 	add.w	r1, r7, #2320	@ 0x910
 8001a8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a8e:	4684      	mov	ip, r0
 8001a90:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a94:	f8c7 c518 	str.w	ip, [r7, #1304]	@ 0x518
 8001a98:	404b      	eors	r3, r1
 8001a9a:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8001a9e:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 8001aaa:	e9c1 2300 	strd	r2, r3, [r1]
        Di = BCe ^ ROL(BCo, 1);
 8001aae:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8001ab2:	0fda      	lsrs	r2, r3, #31
 8001ab4:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4313      	orrs	r3, r2
 8001abc:	f8c7 390c 	str.w	r3, [r7, #2316]	@ 0x90c
 8001ac0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8001ac4:	0fda      	lsrs	r2, r3, #31
 8001ac6:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4313      	orrs	r3, r2
 8001ace:	f8c7 3908 	str.w	r3, [r7, #2312]	@ 0x908
 8001ad2:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f607 1108 	addw	r1, r7, #2312	@ 0x908
 8001ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae2:	4684      	mov	ip, r0
 8001ae4:	ea82 0c0c 	eor.w	ip, r2, ip
 8001ae8:	f8c7 c510 	str.w	ip, [r7, #1296]	@ 0x510
 8001aec:	404b      	eors	r3, r1
 8001aee:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 8001af2:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 8001afe:	e9c1 2300 	strd	r2, r3, [r1]
        Do = BCi ^ ROL(BCu, 1);
 8001b02:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8001b06:	0fda      	lsrs	r2, r3, #31
 8001b08:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	f8c7 3904 	str.w	r3, [r7, #2308]	@ 0x904
 8001b14:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8001b18:	0fda      	lsrs	r2, r3, #31
 8001b1a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4313      	orrs	r3, r2
 8001b22:	f8c7 3900 	str.w	r3, [r7, #2304]	@ 0x900
 8001b26:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f507 6110 	add.w	r1, r7, #2304	@ 0x900
 8001b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b36:	4684      	mov	ip, r0
 8001b38:	ea82 0c0c 	eor.w	ip, r2, ip
 8001b3c:	f8c7 c508 	str.w	ip, [r7, #1288]	@ 0x508
 8001b40:	404b      	eors	r3, r1
 8001b42:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 8001b46:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 8001b52:	e9c1 2300 	strd	r2, r3, [r1]
        Du = BCo ^ ROL(BCa, 1);
 8001b56:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8001b5a:	0fda      	lsrs	r2, r3, #31
 8001b5c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4313      	orrs	r3, r2
 8001b64:	f8c7 38fc 	str.w	r3, [r7, #2300]	@ 0x8fc
 8001b68:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8001b6c:	0fda      	lsrs	r2, r3, #31
 8001b6e:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4313      	orrs	r3, r2
 8001b76:	f8c7 38f8 	str.w	r3, [r7, #2296]	@ 0x8f8
 8001b7a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f607 01f8 	addw	r1, r7, #2296	@ 0x8f8
 8001b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b8a:	4684      	mov	ip, r0
 8001b8c:	ea82 0c0c 	eor.w	ip, r2, ip
 8001b90:	f8c7 c500 	str.w	ip, [r7, #1280]	@ 0x500
 8001b94:	404b      	eors	r3, r1
 8001b96:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8001b9a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 8001ba6:	e9c1 2300 	strd	r2, r3, [r1]

        Aba ^= Da;
 8001baa:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb2:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	ea80 0c02 	eor.w	ip, r0, r2
 8001bbe:	f8c7 c4f8 	str.w	ip, [r7, #1272]	@ 0x4f8
 8001bc2:	404b      	eors	r3, r1
 8001bc4:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 8001bc8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8001bd4:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = Aba;
 8001bd8:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8001be4:	e9c1 2300 	strd	r2, r3, [r1]
        Age ^= De;
 8001be8:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8001bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	ea80 0c02 	eor.w	ip, r0, r2
 8001bfc:	f8c7 c4f0 	str.w	ip, [r7, #1264]	@ 0x4f0
 8001c00:	404b      	eors	r3, r1
 8001c02:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8001c06:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8001c12:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Age, 44);
 8001c16:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	@ 0xb4c
 8001c1a:	031a      	lsls	r2, r3, #12
 8001c1c:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	@ 0xb48
 8001c20:	0d1b      	lsrs	r3, r3, #20
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8001c28:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	@ 0xb48
 8001c2c:	031a      	lsls	r2, r3, #12
 8001c2e:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	@ 0xb4c
 8001c32:	0d1b      	lsrs	r3, r3, #20
 8001c34:	4313      	orrs	r3, r2
 8001c36:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8001c3a:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8001c46:	e9c1 2300 	strd	r2, r3, [r1]
        Aki ^= Di;
 8001c4a:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8001c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c52:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	ea80 0c02 	eor.w	ip, r0, r2
 8001c5e:	f8c7 c4e0 	str.w	ip, [r7, #1248]	@ 0x4e0
 8001c62:	404b      	eors	r3, r1
 8001c64:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 8001c68:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 8001c74:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aki, 43);
 8001c78:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	@ 0xb1c
 8001c7c:	02da      	lsls	r2, r3, #11
 8001c7e:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	@ 0xb18
 8001c82:	0d5b      	lsrs	r3, r3, #21
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8001c8a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	@ 0xb18
 8001c8e:	02da      	lsls	r2, r3, #11
 8001c90:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	@ 0xb1c
 8001c94:	0d5b      	lsrs	r3, r3, #21
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8001c9c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8001ca8:	e9c1 2300 	strd	r2, r3, [r1]
        Amo ^= Do;
 8001cac:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 8001cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cb4:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	ea80 0c02 	eor.w	ip, r0, r2
 8001cc0:	f8c7 c4d0 	str.w	ip, [r7, #1232]	@ 0x4d0
 8001cc4:	404b      	eors	r3, r1
 8001cc6:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8001cca:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8001cd6:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Amo, 21);
 8001cda:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	@ 0xae8
 8001cde:	0ada      	lsrs	r2, r3, #11
 8001ce0:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	@ 0xaec
 8001ce4:	055b      	lsls	r3, r3, #21
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001cec:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	@ 0xaec
 8001cf0:	0ada      	lsrs	r2, r3, #11
 8001cf2:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	@ 0xae8
 8001cf6:	055b      	lsls	r3, r3, #21
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8001cfe:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8001d0a:	e9c1 2300 	strd	r2, r3, [r1]
        Asu ^= Du;
 8001d0e:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8001d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d16:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	ea80 0c02 	eor.w	ip, r0, r2
 8001d22:	f8c7 c4c0 	str.w	ip, [r7, #1216]	@ 0x4c0
 8001d26:	404b      	eors	r3, r1
 8001d28:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001d2c:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 8001d38:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asu, 14);
 8001d3c:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 8001d40:	0c9a      	lsrs	r2, r3, #18
 8001d42:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	@ 0xabc
 8001d46:	039b      	lsls	r3, r3, #14
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001d4e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	@ 0xabc
 8001d52:	0c9a      	lsrs	r2, r3, #18
 8001d54:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 8001d58:	039b      	lsls	r3, r3, #14
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
 8001d60:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8001d6c:	e9c1 2300 	strd	r2, r3, [r1]
        Eba = BCa ^ ((~BCe) & BCi);
 8001d70:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	43d1      	mvns	r1, r2
 8001d7a:	f8c7 18f0 	str.w	r1, [r7, #2288]	@ 0x8f0
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	f8c7 38f4 	str.w	r3, [r7, #2292]	@ 0x8f4
 8001d84:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f507 610f 	add.w	r1, r7, #2288	@ 0x8f0
 8001d90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d94:	4684      	mov	ip, r0
 8001d96:	ea0c 0c02 	and.w	ip, ip, r2
 8001d9a:	f8c7 c8e8 	str.w	ip, [r7, #2280]	@ 0x8e8
 8001d9e:	400b      	ands	r3, r1
 8001da0:	f8c7 38ec 	str.w	r3, [r7, #2284]	@ 0x8ec
 8001da4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f607 01e8 	addw	r1, r7, #2280	@ 0x8e8
 8001db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001db4:	4684      	mov	ip, r0
 8001db6:	ea82 0c0c 	eor.w	ip, r2, ip
 8001dba:	f8c7 c4b0 	str.w	ip, [r7, #1200]	@ 0x4b0
 8001dbe:	404b      	eors	r3, r1
 8001dc0:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 8001dc4:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 8001dd0:	e9c1 2300 	strd	r2, r3, [r1]
        Eba ^= KeccakF_RoundConstants[round];
 8001dd4:	4ac7      	ldr	r2, [pc, #796]	@ (80020f4 <KeccakF1600_StatePermute+0xbf8>)
 8001dd6:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de2:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	ea82 0c00 	eor.w	ip, r2, r0
 8001dee:	f8c7 c4a8 	str.w	ip, [r7, #1192]	@ 0x4a8
 8001df2:	404b      	eors	r3, r1
 8001df4:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 8001df8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 8001e04:	e9c1 2300 	strd	r2, r3, [r1]
        Ebe = BCe ^ ((~BCi) & BCo);
 8001e08:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	43d1      	mvns	r1, r2
 8001e12:	f8c7 18e0 	str.w	r1, [r7, #2272]	@ 0x8e0
 8001e16:	43db      	mvns	r3, r3
 8001e18:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
 8001e1c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f507 610e 	add.w	r1, r7, #2272	@ 0x8e0
 8001e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e2c:	4684      	mov	ip, r0
 8001e2e:	ea0c 0c02 	and.w	ip, ip, r2
 8001e32:	f8c7 c8d8 	str.w	ip, [r7, #2264]	@ 0x8d8
 8001e36:	400b      	ands	r3, r1
 8001e38:	f8c7 38dc 	str.w	r3, [r7, #2268]	@ 0x8dc
 8001e3c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f607 01d8 	addw	r1, r7, #2264	@ 0x8d8
 8001e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e4c:	4684      	mov	ip, r0
 8001e4e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001e52:	f8c7 c4a0 	str.w	ip, [r7, #1184]	@ 0x4a0
 8001e56:	404b      	eors	r3, r1
 8001e58:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 8001e5c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f607 2158 	addw	r1, r7, #2648	@ 0xa58
 8001e68:	e9c1 2300 	strd	r2, r3, [r1]
        Ebi = BCi ^ ((~BCo) & BCu);
 8001e6c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	43d1      	mvns	r1, r2
 8001e76:	f8c7 18d0 	str.w	r1, [r7, #2256]	@ 0x8d0
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	f8c7 38d4 	str.w	r3, [r7, #2260]	@ 0x8d4
 8001e80:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f507 610d 	add.w	r1, r7, #2256	@ 0x8d0
 8001e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e90:	4684      	mov	ip, r0
 8001e92:	ea0c 0c02 	and.w	ip, ip, r2
 8001e96:	f8c7 c8c8 	str.w	ip, [r7, #2248]	@ 0x8c8
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	f8c7 38cc 	str.w	r3, [r7, #2252]	@ 0x8cc
 8001ea0:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f607 01c8 	addw	r1, r7, #2248	@ 0x8c8
 8001eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eb0:	4684      	mov	ip, r0
 8001eb2:	ea82 0c0c 	eor.w	ip, r2, ip
 8001eb6:	f8c7 c498 	str.w	ip, [r7, #1176]	@ 0x498
 8001eba:	404b      	eors	r3, r1
 8001ebc:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 8001ec0:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f507 6125 	add.w	r1, r7, #2640	@ 0xa50
 8001ecc:	e9c1 2300 	strd	r2, r3, [r1]
        Ebo = BCo ^ ((~BCu) & BCa);
 8001ed0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	43d1      	mvns	r1, r2
 8001eda:	f8c7 18c0 	str.w	r1, [r7, #2240]	@ 0x8c0
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	f8c7 38c4 	str.w	r3, [r7, #2244]	@ 0x8c4
 8001ee4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f507 610c 	add.w	r1, r7, #2240	@ 0x8c0
 8001ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ef4:	4684      	mov	ip, r0
 8001ef6:	ea0c 0c02 	and.w	ip, ip, r2
 8001efa:	f8c7 c8b8 	str.w	ip, [r7, #2232]	@ 0x8b8
 8001efe:	400b      	ands	r3, r1
 8001f00:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
 8001f04:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f607 01b8 	addw	r1, r7, #2232	@ 0x8b8
 8001f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f14:	4684      	mov	ip, r0
 8001f16:	ea82 0c0c 	eor.w	ip, r2, ip
 8001f1a:	f8c7 c490 	str.w	ip, [r7, #1168]	@ 0x490
 8001f1e:	404b      	eors	r3, r1
 8001f20:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 8001f24:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f607 2148 	addw	r1, r7, #2632	@ 0xa48
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        Ebu = BCu ^ ((~BCa) & BCe);
 8001f34:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	43d1      	mvns	r1, r2
 8001f3e:	f8c7 18b0 	str.w	r1, [r7, #2224]	@ 0x8b0
 8001f42:	43db      	mvns	r3, r3
 8001f44:	f8c7 38b4 	str.w	r3, [r7, #2228]	@ 0x8b4
 8001f48:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f507 610b 	add.w	r1, r7, #2224	@ 0x8b0
 8001f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f58:	4684      	mov	ip, r0
 8001f5a:	ea0c 0c02 	and.w	ip, ip, r2
 8001f5e:	f8c7 c8a8 	str.w	ip, [r7, #2216]	@ 0x8a8
 8001f62:	400b      	ands	r3, r1
 8001f64:	f8c7 38ac 	str.w	r3, [r7, #2220]	@ 0x8ac
 8001f68:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	f607 01a8 	addw	r1, r7, #2216	@ 0x8a8
 8001f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f78:	4684      	mov	ip, r0
 8001f7a:	ea82 0c0c 	eor.w	ip, r2, ip
 8001f7e:	f8c7 c488 	str.w	ip, [r7, #1160]	@ 0x488
 8001f82:	404b      	eors	r3, r1
 8001f84:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 8001f88:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 8001f94:	e9c1 2300 	strd	r2, r3, [r1]

        Abo ^= Do;
 8001f98:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa0:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	ea80 0c02 	eor.w	ip, r0, r2
 8001fac:	f8c7 c480 	str.w	ip, [r7, #1152]	@ 0x480
 8001fb0:	404b      	eors	r3, r1
 8001fb2:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 8001fb6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8001fc2:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abo, 28);
 8001fc6:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8001fca:	091a      	lsrs	r2, r3, #4
 8001fcc:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8001fd0:	071b      	lsls	r3, r3, #28
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
 8001fd8:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8001fdc:	091a      	lsrs	r2, r3, #4
 8001fde:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8001fe2:	071b      	lsls	r3, r3, #28
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
 8001fea:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8001ff6:	e9c1 2300 	strd	r2, r3, [r1]
        Agu ^= Du;
 8001ffa:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8001ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002002:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	ea80 0c02 	eor.w	ip, r0, r2
 800200e:	f8c7 c470 	str.w	ip, [r7, #1136]	@ 0x470
 8002012:	404b      	eors	r3, r1
 8002014:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
 8002018:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8002024:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Agu, 20);
 8002028:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 800202c:	0b1a      	lsrs	r2, r3, #12
 800202e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 8002032:	051b      	lsls	r3, r3, #20
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 800203a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800203e:	0b1a      	lsrs	r2, r3, #12
 8002040:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8002044:	051b      	lsls	r3, r3, #20
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
 800204c:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8002058:	e9c1 2300 	strd	r2, r3, [r1]
        Aka ^= Da;
 800205c:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	ea80 0c02 	eor.w	ip, r0, r2
 8002070:	f8c7 c460 	str.w	ip, [r7, #1120]	@ 0x460
 8002074:	404b      	eors	r3, r1
 8002076:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800207a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 8002086:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aka, 3);
 800208a:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 800208e:	0f5a      	lsrs	r2, r3, #29
 8002090:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 800209c:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 80020a0:	0f5a      	lsrs	r2, r3, #29
 80020a2:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 80020ae:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80020ba:	e9c1 2300 	strd	r2, r3, [r1]
        Ame ^= De;
 80020be:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 80020c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020c6:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	ea80 0c02 	eor.w	ip, r0, r2
 80020d2:	f8c7 c450 	str.w	ip, [r7, #1104]	@ 0x450
 80020d6:	404b      	eors	r3, r1
 80020d8:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 80020dc:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 80020e8:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ame, 45);
 80020ec:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	@ 0xafc
 80020f0:	035a      	lsls	r2, r3, #13
 80020f2:	e001      	b.n	80020f8 <KeccakF1600_StatePermute+0xbfc>
 80020f4:	0800b4d0 	.word	0x0800b4d0
 80020f8:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	@ 0xaf8
 80020fc:	0cdb      	lsrs	r3, r3, #19
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 8002104:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	@ 0xaf8
 8002108:	035a      	lsls	r2, r3, #13
 800210a:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	@ 0xafc
 800210e:	0cdb      	lsrs	r3, r3, #19
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 8002116:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8002122:	e9c1 2300 	strd	r2, r3, [r1]
        Asi ^= Di;
 8002126:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 800212a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800212e:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	ea80 0c02 	eor.w	ip, r0, r2
 800213a:	f8c7 c440 	str.w	ip, [r7, #1088]	@ 0x440
 800213e:	404b      	eors	r3, r1
 8002140:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 8002144:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asi, 61);
 8002154:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	@ 0xacc
 8002158:	075a      	lsls	r2, r3, #29
 800215a:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 800215e:	08db      	lsrs	r3, r3, #3
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8002166:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 800216a:	075a      	lsls	r2, r3, #29
 800216c:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	@ 0xacc
 8002170:	08db      	lsrs	r3, r3, #3
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8002178:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8002184:	e9c1 2300 	strd	r2, r3, [r1]
        Ega = BCa ^ ((~BCe) & BCi);
 8002188:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	43d1      	mvns	r1, r2
 8002192:	f8c7 18a0 	str.w	r1, [r7, #2208]	@ 0x8a0
 8002196:	43db      	mvns	r3, r3
 8002198:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
 800219c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f507 610a 	add.w	r1, r7, #2208	@ 0x8a0
 80021a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021ac:	4684      	mov	ip, r0
 80021ae:	ea0c 0c02 	and.w	ip, ip, r2
 80021b2:	f8c7 c898 	str.w	ip, [r7, #2200]	@ 0x898
 80021b6:	400b      	ands	r3, r1
 80021b8:	f8c7 389c 	str.w	r3, [r7, #2204]	@ 0x89c
 80021bc:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f607 0198 	addw	r1, r7, #2200	@ 0x898
 80021c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021cc:	4684      	mov	ip, r0
 80021ce:	ea82 0c0c 	eor.w	ip, r2, ip
 80021d2:	f8c7 c430 	str.w	ip, [r7, #1072]	@ 0x430
 80021d6:	404b      	eors	r3, r1
 80021d8:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80021dc:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f607 2138 	addw	r1, r7, #2616	@ 0xa38
 80021e8:	e9c1 2300 	strd	r2, r3, [r1]
        Ege = BCe ^ ((~BCi) & BCo);
 80021ec:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	43d1      	mvns	r1, r2
 80021f6:	f8c7 1890 	str.w	r1, [r7, #2192]	@ 0x890
 80021fa:	43db      	mvns	r3, r3
 80021fc:	f8c7 3894 	str.w	r3, [r7, #2196]	@ 0x894
 8002200:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f507 6109 	add.w	r1, r7, #2192	@ 0x890
 800220c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002210:	4684      	mov	ip, r0
 8002212:	ea0c 0c02 	and.w	ip, ip, r2
 8002216:	f8c7 c888 	str.w	ip, [r7, #2184]	@ 0x888
 800221a:	400b      	ands	r3, r1
 800221c:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
 8002220:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f607 0188 	addw	r1, r7, #2184	@ 0x888
 800222c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002230:	4684      	mov	ip, r0
 8002232:	ea82 0c0c 	eor.w	ip, r2, ip
 8002236:	f8c7 c428 	str.w	ip, [r7, #1064]	@ 0x428
 800223a:	404b      	eors	r3, r1
 800223c:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 8002240:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f507 6123 	add.w	r1, r7, #2608	@ 0xa30
 800224c:	e9c1 2300 	strd	r2, r3, [r1]
        Egi = BCi ^ ((~BCo) & BCu);
 8002250:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	43d1      	mvns	r1, r2
 800225a:	f8c7 1880 	str.w	r1, [r7, #2176]	@ 0x880
 800225e:	43db      	mvns	r3, r3
 8002260:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
 8002264:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f507 6108 	add.w	r1, r7, #2176	@ 0x880
 8002270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002274:	4684      	mov	ip, r0
 8002276:	ea0c 0c02 	and.w	ip, ip, r2
 800227a:	f8c7 c878 	str.w	ip, [r7, #2168]	@ 0x878
 800227e:	400b      	ands	r3, r1
 8002280:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 8002284:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f607 0178 	addw	r1, r7, #2168	@ 0x878
 8002290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002294:	4684      	mov	ip, r0
 8002296:	ea82 0c0c 	eor.w	ip, r2, ip
 800229a:	f8c7 c420 	str.w	ip, [r7, #1056]	@ 0x420
 800229e:	404b      	eors	r3, r1
 80022a0:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 80022a4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ac:	f607 2128 	addw	r1, r7, #2600	@ 0xa28
 80022b0:	e9c1 2300 	strd	r2, r3, [r1]
        Ego = BCo ^ ((~BCu) & BCa);
 80022b4:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	43d1      	mvns	r1, r2
 80022be:	f8c7 1870 	str.w	r1, [r7, #2160]	@ 0x870
 80022c2:	43db      	mvns	r3, r3
 80022c4:	f8c7 3874 	str.w	r3, [r7, #2164]	@ 0x874
 80022c8:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f507 6107 	add.w	r1, r7, #2160	@ 0x870
 80022d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022d8:	4684      	mov	ip, r0
 80022da:	ea0c 0c02 	and.w	ip, ip, r2
 80022de:	f8c7 c868 	str.w	ip, [r7, #2152]	@ 0x868
 80022e2:	400b      	ands	r3, r1
 80022e4:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c
 80022e8:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f607 0168 	addw	r1, r7, #2152	@ 0x868
 80022f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022f8:	4684      	mov	ip, r0
 80022fa:	ea82 0c0c 	eor.w	ip, r2, ip
 80022fe:	f8c7 c418 	str.w	ip, [r7, #1048]	@ 0x418
 8002302:	404b      	eors	r3, r1
 8002304:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8002308:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f507 6122 	add.w	r1, r7, #2592	@ 0xa20
 8002314:	e9c1 2300 	strd	r2, r3, [r1]
        Egu = BCu ^ ((~BCa) & BCe);
 8002318:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	43d1      	mvns	r1, r2
 8002322:	f8c7 1860 	str.w	r1, [r7, #2144]	@ 0x860
 8002326:	43db      	mvns	r3, r3
 8002328:	f8c7 3864 	str.w	r3, [r7, #2148]	@ 0x864
 800232c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f507 6106 	add.w	r1, r7, #2144	@ 0x860
 8002338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800233c:	4684      	mov	ip, r0
 800233e:	ea0c 0c02 	and.w	ip, ip, r2
 8002342:	f8c7 c858 	str.w	ip, [r7, #2136]	@ 0x858
 8002346:	400b      	ands	r3, r1
 8002348:	f8c7 385c 	str.w	r3, [r7, #2140]	@ 0x85c
 800234c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f607 0158 	addw	r1, r7, #2136	@ 0x858
 8002358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800235c:	4684      	mov	ip, r0
 800235e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002362:	f8c7 c410 	str.w	ip, [r7, #1040]	@ 0x410
 8002366:	404b      	eors	r3, r1
 8002368:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800236c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f607 2118 	addw	r1, r7, #2584	@ 0xa18
 8002378:	e9c1 2300 	strd	r2, r3, [r1]

        Abe ^= De;
 800237c:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8002380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002384:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	ea80 0c02 	eor.w	ip, r0, r2
 8002390:	f8c7 c408 	str.w	ip, [r7, #1032]	@ 0x408
 8002394:	404b      	eors	r3, r1
 8002396:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800239a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 80023a6:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abe, 1);
 80023aa:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 80023ae:	0fda      	lsrs	r2, r3, #31
 80023b0:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 80023bc:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 80023c0:	0fda      	lsrs	r2, r3, #31
 80023c2:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 80023ce:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80023da:	e9c1 2300 	strd	r2, r3, [r1]
        Agi ^= Di;
 80023de:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 80023e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e6:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ee:	ea80 0c02 	eor.w	ip, r0, r2
 80023f2:	f8c7 c3f8 	str.w	ip, [r7, #1016]	@ 0x3f8
 80023f6:	404b      	eors	r3, r1
 80023f8:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 80023fc:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 8002400:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 8002404:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Agi, 6);
 8002408:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 800240c:	0e9a      	lsrs	r2, r3, #26
 800240e:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 8002412:	019b      	lsls	r3, r3, #6
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 800241a:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 800241e:	0e9a      	lsrs	r2, r3, #26
 8002420:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 800242c:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8002430:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8002434:	e9c1 2300 	strd	r2, r3, [r1]
        Ako ^= Do;
 8002438:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 800243c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002440:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	ea80 0c02 	eor.w	ip, r0, r2
 800244c:	f8c7 c3e8 	str.w	ip, [r7, #1000]	@ 0x3e8
 8002450:	404b      	eors	r3, r1
 8002452:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8002456:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 800245a:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 800245e:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Ako, 25);
 8002462:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	@ 0xb10
 8002466:	09da      	lsrs	r2, r3, #7
 8002468:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	@ 0xb14
 800246c:	065b      	lsls	r3, r3, #25
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 8002474:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	@ 0xb14
 8002478:	09da      	lsrs	r2, r3, #7
 800247a:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	@ 0xb10
 800247e:	065b      	lsls	r3, r3, #25
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 8002486:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 800248a:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 800248e:	e9c1 2300 	strd	r2, r3, [r1]
        Amu ^= Du;
 8002492:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 8002496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800249a:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	ea80 0c02 	eor.w	ip, r0, r2
 80024a6:	f8c7 c3d8 	str.w	ip, [r7, #984]	@ 0x3d8
 80024aa:	404b      	eors	r3, r1
 80024ac:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 80024b0:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 80024b4:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 80024b8:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Amu, 8);
 80024bc:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	@ 0xae0
 80024c0:	0e1a      	lsrs	r2, r3, #24
 80024c2:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	@ 0xae4
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 80024ce:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	@ 0xae4
 80024d2:	0e1a      	lsrs	r2, r3, #24
 80024d4:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	@ 0xae0
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 80024e0:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	@ 0x3d0
 80024e4:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80024e8:	e9c1 2300 	strd	r2, r3, [r1]
        Asa ^= Da;
 80024ec:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 80024f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f4:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	ea80 0c02 	eor.w	ip, r0, r2
 8002500:	f8c7 c3c8 	str.w	ip, [r7, #968]	@ 0x3c8
 8002504:	404b      	eors	r3, r1
 8002506:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800250a:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 800250e:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 8002512:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Asa, 18);
 8002516:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	@ 0xad8
 800251a:	0b9a      	lsrs	r2, r3, #14
 800251c:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	@ 0xadc
 8002520:	049b      	lsls	r3, r3, #18
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8002528:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	@ 0xadc
 800252c:	0b9a      	lsrs	r2, r3, #14
 800252e:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	@ 0xad8
 8002532:	049b      	lsls	r3, r3, #18
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 800253a:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 800253e:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8002542:	e9c1 2300 	strd	r2, r3, [r1]
        Eka = BCa ^ ((~BCe) & BCi);
 8002546:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	43d1      	mvns	r1, r2
 8002550:	f8c7 1850 	str.w	r1, [r7, #2128]	@ 0x850
 8002554:	43db      	mvns	r3, r3
 8002556:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
 800255a:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f507 6105 	add.w	r1, r7, #2128	@ 0x850
 8002566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800256a:	4684      	mov	ip, r0
 800256c:	ea0c 0c02 	and.w	ip, ip, r2
 8002570:	f8c7 c848 	str.w	ip, [r7, #2120]	@ 0x848
 8002574:	400b      	ands	r3, r1
 8002576:	f8c7 384c 	str.w	r3, [r7, #2124]	@ 0x84c
 800257a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f607 0148 	addw	r1, r7, #2120	@ 0x848
 8002586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800258a:	4684      	mov	ip, r0
 800258c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002590:	f8c7 c3b8 	str.w	ip, [r7, #952]	@ 0x3b8
 8002594:	404b      	eors	r3, r1
 8002596:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 800259a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 800259e:	f507 6121 	add.w	r1, r7, #2576	@ 0xa10
 80025a2:	e9c1 2300 	strd	r2, r3, [r1]
        Eke = BCe ^ ((~BCi) & BCo);
 80025a6:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	43d1      	mvns	r1, r2
 80025b0:	f8c7 1840 	str.w	r1, [r7, #2112]	@ 0x840
 80025b4:	43db      	mvns	r3, r3
 80025b6:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 80025ba:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	f507 6104 	add.w	r1, r7, #2112	@ 0x840
 80025c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025ca:	4684      	mov	ip, r0
 80025cc:	ea0c 0c02 	and.w	ip, ip, r2
 80025d0:	f8c7 c838 	str.w	ip, [r7, #2104]	@ 0x838
 80025d4:	400b      	ands	r3, r1
 80025d6:	f8c7 383c 	str.w	r3, [r7, #2108]	@ 0x83c
 80025da:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f607 0138 	addw	r1, r7, #2104	@ 0x838
 80025e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025ea:	4684      	mov	ip, r0
 80025ec:	ea82 0c0c 	eor.w	ip, r2, ip
 80025f0:	f8c7 c3b0 	str.w	ip, [r7, #944]	@ 0x3b0
 80025f4:	404b      	eors	r3, r1
 80025f6:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80025fa:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 80025fe:	f607 2108 	addw	r1, r7, #2568	@ 0xa08
 8002602:	e9c1 2300 	strd	r2, r3, [r1]
        Eki = BCi ^ ((~BCo) & BCu);
 8002606:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	43d1      	mvns	r1, r2
 8002610:	f8c7 1830 	str.w	r1, [r7, #2096]	@ 0x830
 8002614:	43db      	mvns	r3, r3
 8002616:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 800261a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f507 6103 	add.w	r1, r7, #2096	@ 0x830
 8002626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800262a:	4684      	mov	ip, r0
 800262c:	ea0c 0c02 	and.w	ip, ip, r2
 8002630:	f8c7 c828 	str.w	ip, [r7, #2088]	@ 0x828
 8002634:	400b      	ands	r3, r1
 8002636:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 800263a:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	f607 0128 	addw	r1, r7, #2088	@ 0x828
 8002646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800264a:	4684      	mov	ip, r0
 800264c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002650:	f8c7 c3a8 	str.w	ip, [r7, #936]	@ 0x3a8
 8002654:	404b      	eors	r3, r1
 8002656:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 800265a:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 800265e:	f507 6120 	add.w	r1, r7, #2560	@ 0xa00
 8002662:	e9c1 2300 	strd	r2, r3, [r1]
        Eko = BCo ^ ((~BCu) & BCa);
 8002666:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	43d1      	mvns	r1, r2
 8002670:	f8c7 1820 	str.w	r1, [r7, #2080]	@ 0x820
 8002674:	43db      	mvns	r3, r3
 8002676:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 800267a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	f507 6102 	add.w	r1, r7, #2080	@ 0x820
 8002686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800268a:	4684      	mov	ip, r0
 800268c:	ea0c 0c02 	and.w	ip, ip, r2
 8002690:	f8c7 c818 	str.w	ip, [r7, #2072]	@ 0x818
 8002694:	400b      	ands	r3, r1
 8002696:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800269a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	f607 0118 	addw	r1, r7, #2072	@ 0x818
 80026a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026aa:	4684      	mov	ip, r0
 80026ac:	ea82 0c0c 	eor.w	ip, r2, ip
 80026b0:	f8c7 c3a0 	str.w	ip, [r7, #928]	@ 0x3a0
 80026b4:	404b      	eors	r3, r1
 80026b6:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 80026ba:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	@ 0x3a0
 80026be:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 80026c2:	e9c1 2300 	strd	r2, r3, [r1]
        Eku = BCu ^ ((~BCa) & BCe);
 80026c6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	43d1      	mvns	r1, r2
 80026d0:	f8c7 1810 	str.w	r1, [r7, #2064]	@ 0x810
 80026d4:	43db      	mvns	r3, r3
 80026d6:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 80026da:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 80026e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026ea:	4684      	mov	ip, r0
 80026ec:	ea0c 0c02 	and.w	ip, ip, r2
 80026f0:	f8c7 c808 	str.w	ip, [r7, #2056]	@ 0x808
 80026f4:	400b      	ands	r3, r1
 80026f6:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80026fa:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f607 0108 	addw	r1, r7, #2056	@ 0x808
 8002706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800270a:	4684      	mov	ip, r0
 800270c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002710:	f8c7 c398 	str.w	ip, [r7, #920]	@ 0x398
 8002714:	404b      	eors	r3, r1
 8002716:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 800271a:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 800271e:	f507 611f 	add.w	r1, r7, #2544	@ 0x9f0
 8002722:	e9c1 2300 	strd	r2, r3, [r1]

        Abu ^= Du;
 8002726:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 800272a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800272e:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	ea80 0c02 	eor.w	ip, r0, r2
 800273a:	f8c7 c390 	str.w	ip, [r7, #912]	@ 0x390
 800273e:	404b      	eors	r3, r1
 8002740:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8002744:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	@ 0x390
 8002748:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 800274c:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abu, 27);
 8002750:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 8002754:	095a      	lsrs	r2, r3, #5
 8002756:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 800275a:	06db      	lsls	r3, r3, #27
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8002762:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8002766:	095a      	lsrs	r2, r3, #5
 8002768:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 800276c:	06db      	lsls	r3, r3, #27
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 8002774:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	@ 0x388
 8002778:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 800277c:	e9c1 2300 	strd	r2, r3, [r1]
        Aga ^= Da;
 8002780:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8002784:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002788:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	ea80 0c02 	eor.w	ip, r0, r2
 8002794:	f8c7 c380 	str.w	ip, [r7, #896]	@ 0x380
 8002798:	404b      	eors	r3, r1
 800279a:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800279e:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	@ 0x380
 80027a2:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 80027a6:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Aga, 36);
 80027aa:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 80027ae:	011a      	lsls	r2, r3, #4
 80027b0:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 80027b4:	0f1b      	lsrs	r3, r3, #28
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 80027bc:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 80027c0:	011a      	lsls	r2, r3, #4
 80027c2:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 80027c6:	0f1b      	lsrs	r3, r3, #28
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 80027ce:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	@ 0x378
 80027d2:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 80027d6:	e9c1 2300 	strd	r2, r3, [r1]
        Ake ^= De;
 80027da:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80027de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	ea80 0c02 	eor.w	ip, r0, r2
 80027ee:	f8c7 c370 	str.w	ip, [r7, #880]	@ 0x370
 80027f2:	404b      	eors	r3, r1
 80027f4:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80027f8:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	@ 0x370
 80027fc:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8002800:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Ake, 10);
 8002804:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	@ 0xb20
 8002808:	0d9a      	lsrs	r2, r3, #22
 800280a:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	@ 0xb24
 800280e:	029b      	lsls	r3, r3, #10
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8002816:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	@ 0xb24
 800281a:	0d9a      	lsrs	r2, r3, #22
 800281c:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	@ 0xb20
 8002820:	029b      	lsls	r3, r3, #10
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 8002828:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	@ 0x368
 800282c:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8002830:	e9c1 2300 	strd	r2, r3, [r1]
        Ami ^= Di;
 8002834:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 8002838:	e9d3 0100 	ldrd	r0, r1, [r3]
 800283c:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	ea80 0c02 	eor.w	ip, r0, r2
 8002848:	f8c7 c360 	str.w	ip, [r7, #864]	@ 0x360
 800284c:	404b      	eors	r3, r1
 800284e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8002852:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	@ 0x360
 8002856:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 800285a:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ami, 15);
 800285e:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	@ 0xaf0
 8002862:	0c5a      	lsrs	r2, r3, #17
 8002864:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	@ 0xaf4
 8002868:	03db      	lsls	r3, r3, #15
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8002870:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	@ 0xaf4
 8002874:	0c5a      	lsrs	r2, r3, #17
 8002876:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	@ 0xaf0
 800287a:	03db      	lsls	r3, r3, #15
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8002882:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8002886:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 800288a:	e9c1 2300 	strd	r2, r3, [r1]
        Aso ^= Do;
 800288e:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 8002892:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002896:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	ea80 0c02 	eor.w	ip, r0, r2
 80028a2:	f8c7 c350 	str.w	ip, [r7, #848]	@ 0x350
 80028a6:	404b      	eors	r3, r1
 80028a8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80028ac:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 80028b0:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 80028b4:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Aso, 56);
 80028b8:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 80028bc:	061a      	lsls	r2, r3, #24
 80028be:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	@ 0xac0
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 80028ca:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	@ 0xac0
 80028ce:	061a      	lsls	r2, r3, #24
 80028d0:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 80028dc:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 80028e0:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 80028e4:	e9c1 2300 	strd	r2, r3, [r1]
        Ema = BCa ^ ((~BCe) & BCi);
 80028e8:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	43d1      	mvns	r1, r2
 80028f2:	f8c7 1800 	str.w	r1, [r7, #2048]	@ 0x800
 80028f6:	43db      	mvns	r3, r3
 80028f8:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 80028fc:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f507 6100 	add.w	r1, r7, #2048	@ 0x800
 8002908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800290c:	4684      	mov	ip, r0
 800290e:	ea0c 0c02 	and.w	ip, ip, r2
 8002912:	f8c7 c7f8 	str.w	ip, [r7, #2040]	@ 0x7f8
 8002916:	400b      	ands	r3, r1
 8002918:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
 800291c:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f507 61ff 	add.w	r1, r7, #2040	@ 0x7f8
 8002928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800292c:	4684      	mov	ip, r0
 800292e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002932:	f8c7 c340 	str.w	ip, [r7, #832]	@ 0x340
 8002936:	404b      	eors	r3, r1
 8002938:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800293c:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8002940:	f607 11e8 	addw	r1, r7, #2536	@ 0x9e8
 8002944:	e9c1 2300 	strd	r2, r3, [r1]
        Eme = BCe ^ ((~BCi) & BCo);
 8002948:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	43d1      	mvns	r1, r2
 8002952:	f8c7 17f0 	str.w	r1, [r7, #2032]	@ 0x7f0
 8002956:	43db      	mvns	r3, r3
 8002958:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 800295c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f507 61fe 	add.w	r1, r7, #2032	@ 0x7f0
 8002968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800296c:	4684      	mov	ip, r0
 800296e:	ea0c 0c02 	and.w	ip, ip, r2
 8002972:	f8c7 c7e8 	str.w	ip, [r7, #2024]	@ 0x7e8
 8002976:	400b      	ands	r3, r1
 8002978:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 800297c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f507 61fd 	add.w	r1, r7, #2024	@ 0x7e8
 8002988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800298c:	4684      	mov	ip, r0
 800298e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002992:	f8c7 c338 	str.w	ip, [r7, #824]	@ 0x338
 8002996:	404b      	eors	r3, r1
 8002998:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800299c:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 80029a0:	f507 611e 	add.w	r1, r7, #2528	@ 0x9e0
 80029a4:	e9c1 2300 	strd	r2, r3, [r1]
        Emi = BCi ^ ((~BCo) & BCu);
 80029a8:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	43d1      	mvns	r1, r2
 80029b2:	f8c7 17e0 	str.w	r1, [r7, #2016]	@ 0x7e0
 80029b6:	43db      	mvns	r3, r3
 80029b8:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
 80029bc:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f507 61fc 	add.w	r1, r7, #2016	@ 0x7e0
 80029c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029cc:	4684      	mov	ip, r0
 80029ce:	ea0c 0c02 	and.w	ip, ip, r2
 80029d2:	f8c7 c7d8 	str.w	ip, [r7, #2008]	@ 0x7d8
 80029d6:	400b      	ands	r3, r1
 80029d8:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
 80029dc:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f507 61fb 	add.w	r1, r7, #2008	@ 0x7d8
 80029e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029ec:	4684      	mov	ip, r0
 80029ee:	ea82 0c0c 	eor.w	ip, r2, ip
 80029f2:	f8c7 c330 	str.w	ip, [r7, #816]	@ 0x330
 80029f6:	404b      	eors	r3, r1
 80029f8:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80029fc:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 8002a00:	f607 11d8 	addw	r1, r7, #2520	@ 0x9d8
 8002a04:	e9c1 2300 	strd	r2, r3, [r1]
        Emo = BCo ^ ((~BCu) & BCa);
 8002a08:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	43d1      	mvns	r1, r2
 8002a12:	f8c7 17d0 	str.w	r1, [r7, #2000]	@ 0x7d0
 8002a16:	43db      	mvns	r3, r3
 8002a18:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 8002a1c:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	f507 61fa 	add.w	r1, r7, #2000	@ 0x7d0
 8002a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a2c:	4684      	mov	ip, r0
 8002a2e:	ea0c 0c02 	and.w	ip, ip, r2
 8002a32:	f8c7 c7c8 	str.w	ip, [r7, #1992]	@ 0x7c8
 8002a36:	400b      	ands	r3, r1
 8002a38:	f8c7 37cc 	str.w	r3, [r7, #1996]	@ 0x7cc
 8002a3c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f507 61f9 	add.w	r1, r7, #1992	@ 0x7c8
 8002a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a4c:	4684      	mov	ip, r0
 8002a4e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002a52:	f8c7 c328 	str.w	ip, [r7, #808]	@ 0x328
 8002a56:	404b      	eors	r3, r1
 8002a58:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8002a5c:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 8002a60:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 8002a64:	e9c1 2300 	strd	r2, r3, [r1]
        Emu = BCu ^ ((~BCa) & BCe);
 8002a68:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	43d1      	mvns	r1, r2
 8002a72:	f8c7 17c0 	str.w	r1, [r7, #1984]	@ 0x7c0
 8002a76:	43db      	mvns	r3, r3
 8002a78:	f8c7 37c4 	str.w	r3, [r7, #1988]	@ 0x7c4
 8002a7c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f507 61f8 	add.w	r1, r7, #1984	@ 0x7c0
 8002a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a8c:	4684      	mov	ip, r0
 8002a8e:	ea0c 0c02 	and.w	ip, ip, r2
 8002a92:	f8c7 c7b8 	str.w	ip, [r7, #1976]	@ 0x7b8
 8002a96:	400b      	ands	r3, r1
 8002a98:	f8c7 37bc 	str.w	r3, [r7, #1980]	@ 0x7bc
 8002a9c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f507 61f7 	add.w	r1, r7, #1976	@ 0x7b8
 8002aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002aac:	4684      	mov	ip, r0
 8002aae:	ea82 0c0c 	eor.w	ip, r2, ip
 8002ab2:	f8c7 c320 	str.w	ip, [r7, #800]	@ 0x320
 8002ab6:	404b      	eors	r3, r1
 8002ab8:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8002abc:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 8002ac0:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8002ac4:	e9c1 2300 	strd	r2, r3, [r1]

        Abi ^= Di;
 8002ac8:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8002acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ad0:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	ea80 0c02 	eor.w	ip, r0, r2
 8002adc:	f8c7 c318 	str.w	ip, [r7, #792]	@ 0x318
 8002ae0:	404b      	eors	r3, r1
 8002ae2:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8002ae6:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	@ 0x318
 8002aea:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8002aee:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Abi, 62);
 8002af2:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 8002af6:	079a      	lsls	r2, r3, #30
 8002af8:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8002b04:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002b08:	079a      	lsls	r2, r3, #30
 8002b0a:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8002b16:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 8002b1a:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8002b1e:	e9c1 2300 	strd	r2, r3, [r1]
        Ago ^= Do;
 8002b22:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8002b26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b2a:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	ea80 0c02 	eor.w	ip, r0, r2
 8002b36:	f8c7 c308 	str.w	ip, [r7, #776]	@ 0x308
 8002b3a:	404b      	eors	r3, r1
 8002b3c:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8002b40:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	@ 0x308
 8002b44:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8002b48:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ago, 55);
 8002b4c:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 8002b50:	05da      	lsls	r2, r3, #23
 8002b52:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 8002b56:	0a5b      	lsrs	r3, r3, #9
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8002b5e:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 8002b62:	05da      	lsls	r2, r3, #23
 8002b64:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 8002b68:	0a5b      	lsrs	r3, r3, #9
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8002b70:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 8002b74:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8002b78:	e9c1 2300 	strd	r2, r3, [r1]
        Aku ^= Du;
 8002b7c:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8002b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b84:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	ea80 0c02 	eor.w	ip, r0, r2
 8002b90:	f8c7 c2f8 	str.w	ip, [r7, #760]	@ 0x2f8
 8002b94:	404b      	eors	r3, r1
 8002b96:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8002b9a:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8002b9e:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8002ba2:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Aku, 39);
 8002ba6:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 8002baa:	01da      	lsls	r2, r3, #7
 8002bac:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8002bb0:	0e5b      	lsrs	r3, r3, #25
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8002bb8:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8002bbc:	01da      	lsls	r2, r3, #7
 8002bbe:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 8002bc2:	0e5b      	lsrs	r3, r3, #25
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8002bca:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8002bce:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8002bd2:	e9c1 2300 	strd	r2, r3, [r1]
        Ama ^= Da;
 8002bd6:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 8002bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bde:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	ea80 0c02 	eor.w	ip, r0, r2
 8002bea:	f8c7 c2e8 	str.w	ip, [r7, #744]	@ 0x2e8
 8002bee:	404b      	eors	r3, r1
 8002bf0:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8002bf4:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8002bf8:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 8002bfc:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ama, 41);
 8002c00:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	@ 0xb04
 8002c04:	025a      	lsls	r2, r3, #9
 8002c06:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 8002c0a:	0ddb      	lsrs	r3, r3, #23
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8002c12:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 8002c16:	025a      	lsls	r2, r3, #9
 8002c18:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	@ 0xb04
 8002c1c:	0ddb      	lsrs	r3, r3, #23
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8002c24:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8002c28:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8002c2c:	e9c1 2300 	strd	r2, r3, [r1]
        Ase ^= De;
 8002c30:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8002c34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c38:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	ea80 0c02 	eor.w	ip, r0, r2
 8002c44:	f8c7 c2d8 	str.w	ip, [r7, #728]	@ 0x2d8
 8002c48:	404b      	eors	r3, r1
 8002c4a:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8002c4e:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8002c52:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8002c56:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Ase, 2);
 8002c5a:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	@ 0xad0
 8002c5e:	0f9a      	lsrs	r2, r3, #30
 8002c60:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	@ 0xad4
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8002c6c:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	@ 0xad4
 8002c70:	0f9a      	lsrs	r2, r3, #30
 8002c72:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	@ 0xad0
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8002c7e:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	@ 0x2d0
 8002c82:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8002c86:	e9c1 2300 	strd	r2, r3, [r1]
        Esa = BCa ^ ((~BCe) & BCi);
 8002c8a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	43d1      	mvns	r1, r2
 8002c94:	f8c7 17b0 	str.w	r1, [r7, #1968]	@ 0x7b0
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	f8c7 37b4 	str.w	r3, [r7, #1972]	@ 0x7b4
 8002c9e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f507 61f6 	add.w	r1, r7, #1968	@ 0x7b0
 8002caa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cae:	4684      	mov	ip, r0
 8002cb0:	ea0c 0c02 	and.w	ip, ip, r2
 8002cb4:	f8c7 c7a8 	str.w	ip, [r7, #1960]	@ 0x7a8
 8002cb8:	400b      	ands	r3, r1
 8002cba:	f8c7 37ac 	str.w	r3, [r7, #1964]	@ 0x7ac
 8002cbe:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f507 61f5 	add.w	r1, r7, #1960	@ 0x7a8
 8002cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cce:	4684      	mov	ip, r0
 8002cd0:	ea82 0c0c 	eor.w	ip, r2, ip
 8002cd4:	f8c7 c2c8 	str.w	ip, [r7, #712]	@ 0x2c8
 8002cd8:	404b      	eors	r3, r1
 8002cda:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8002cde:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8002ce2:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 8002ce6:	e9c1 2300 	strd	r2, r3, [r1]
        Ese = BCe ^ ((~BCi) & BCo);
 8002cea:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	43d1      	mvns	r1, r2
 8002cf4:	f8c7 17a0 	str.w	r1, [r7, #1952]	@ 0x7a0
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	f8c7 37a4 	str.w	r3, [r7, #1956]	@ 0x7a4
 8002cfe:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d06:	f507 61f4 	add.w	r1, r7, #1952	@ 0x7a0
 8002d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d0e:	4684      	mov	ip, r0
 8002d10:	ea0c 0c02 	and.w	ip, ip, r2
 8002d14:	f8c7 c798 	str.w	ip, [r7, #1944]	@ 0x798
 8002d18:	400b      	ands	r3, r1
 8002d1a:	f8c7 379c 	str.w	r3, [r7, #1948]	@ 0x79c
 8002d1e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f507 61f3 	add.w	r1, r7, #1944	@ 0x798
 8002d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d2e:	4684      	mov	ip, r0
 8002d30:	ea82 0c0c 	eor.w	ip, r2, ip
 8002d34:	f8c7 c2c0 	str.w	ip, [r7, #704]	@ 0x2c0
 8002d38:	404b      	eors	r3, r1
 8002d3a:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8002d3e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8002d42:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 8002d46:	e9c1 2300 	strd	r2, r3, [r1]
        Esi = BCi ^ ((~BCo) & BCu);
 8002d4a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	43d1      	mvns	r1, r2
 8002d54:	f8c7 1790 	str.w	r1, [r7, #1936]	@ 0x790
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	f8c7 3794 	str.w	r3, [r7, #1940]	@ 0x794
 8002d5e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f507 61f2 	add.w	r1, r7, #1936	@ 0x790
 8002d6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d6e:	4684      	mov	ip, r0
 8002d70:	ea0c 0c02 	and.w	ip, ip, r2
 8002d74:	f8c7 c788 	str.w	ip, [r7, #1928]	@ 0x788
 8002d78:	400b      	ands	r3, r1
 8002d7a:	f8c7 378c 	str.w	r3, [r7, #1932]	@ 0x78c
 8002d7e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f507 61f1 	add.w	r1, r7, #1928	@ 0x788
 8002d8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d8e:	4684      	mov	ip, r0
 8002d90:	ea82 0c0c 	eor.w	ip, r2, ip
 8002d94:	f8c7 c2b8 	str.w	ip, [r7, #696]	@ 0x2b8
 8002d98:	404b      	eors	r3, r1
 8002d9a:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8002d9e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8002da2:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 8002da6:	e9c1 2300 	strd	r2, r3, [r1]
        Eso = BCo ^ ((~BCu) & BCa);
 8002daa:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	43d1      	mvns	r1, r2
 8002db4:	f8c7 1780 	str.w	r1, [r7, #1920]	@ 0x780
 8002db8:	43db      	mvns	r3, r3
 8002dba:	f8c7 3784 	str.w	r3, [r7, #1924]	@ 0x784
 8002dbe:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f507 61f0 	add.w	r1, r7, #1920	@ 0x780
 8002dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dce:	4684      	mov	ip, r0
 8002dd0:	ea0c 0c02 	and.w	ip, ip, r2
 8002dd4:	f8c7 c778 	str.w	ip, [r7, #1912]	@ 0x778
 8002dd8:	400b      	ands	r3, r1
 8002dda:	f8c7 377c 	str.w	r3, [r7, #1916]	@ 0x77c
 8002dde:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f507 61ef 	add.w	r1, r7, #1912	@ 0x778
 8002dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dee:	4684      	mov	ip, r0
 8002df0:	ea82 0c0c 	eor.w	ip, r2, ip
 8002df4:	f8c7 c2b0 	str.w	ip, [r7, #688]	@ 0x2b0
 8002df8:	404b      	eors	r3, r1
 8002dfa:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002dfe:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8002e02:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 8002e06:	e9c1 2300 	strd	r2, r3, [r1]
        Esu = BCu ^ ((~BCa) & BCe);
 8002e0a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	43d1      	mvns	r1, r2
 8002e14:	f8c7 1770 	str.w	r1, [r7, #1904]	@ 0x770
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	f8c7 3774 	str.w	r3, [r7, #1908]	@ 0x774
 8002e1e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e26:	f507 61ee 	add.w	r1, r7, #1904	@ 0x770
 8002e2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e2e:	4684      	mov	ip, r0
 8002e30:	ea0c 0c02 	and.w	ip, ip, r2
 8002e34:	f8c7 c768 	str.w	ip, [r7, #1896]	@ 0x768
 8002e38:	400b      	ands	r3, r1
 8002e3a:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c
 8002e3e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e46:	f507 61ed 	add.w	r1, r7, #1896	@ 0x768
 8002e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e4e:	4684      	mov	ip, r0
 8002e50:	ea82 0c0c 	eor.w	ip, r2, ip
 8002e54:	f8c7 c2a8 	str.w	ip, [r7, #680]	@ 0x2a8
 8002e58:	404b      	eors	r3, r1
 8002e5a:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002e5e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8002e62:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 8002e66:	e9c1 2300 	strd	r2, r3, [r1]

        //    prepareTheta
        BCa = Eba ^ Ega ^ Eka ^ Ema ^ Esa;
 8002e6a:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 8002e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e72:	f607 2338 	addw	r3, r7, #2616	@ 0xa38
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	ea80 0c02 	eor.w	ip, r0, r2
 8002e7e:	f8c7 c760 	str.w	ip, [r7, #1888]	@ 0x760
 8002e82:	404b      	eors	r3, r1
 8002e84:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 8002e88:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 8002e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e90:	f507 61ec 	add.w	r1, r7, #1888	@ 0x760
 8002e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e98:	4684      	mov	ip, r0
 8002e9a:	ea8c 0c02 	eor.w	ip, ip, r2
 8002e9e:	f8c7 c758 	str.w	ip, [r7, #1880]	@ 0x758
 8002ea2:	404b      	eors	r3, r1
 8002ea4:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
 8002ea8:	f607 13e8 	addw	r3, r7, #2536	@ 0x9e8
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f507 61eb 	add.w	r1, r7, #1880	@ 0x758
 8002eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002eb8:	4684      	mov	ip, r0
 8002eba:	ea8c 0c02 	eor.w	ip, ip, r2
 8002ebe:	f8c7 c750 	str.w	ip, [r7, #1872]	@ 0x750
 8002ec2:	404b      	eors	r3, r1
 8002ec4:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
 8002ec8:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f507 61ea 	add.w	r1, r7, #1872	@ 0x750
 8002ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ed8:	4684      	mov	ip, r0
 8002eda:	ea82 0c0c 	eor.w	ip, r2, ip
 8002ede:	f8c7 c2a0 	str.w	ip, [r7, #672]	@ 0x2a0
 8002ee2:	404b      	eors	r3, r1
 8002ee4:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8002ee8:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 8002eec:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8002ef0:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = Ebe ^ Ege ^ Eke ^ Eme ^ Ese;
 8002ef4:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8002ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002efc:	f507 6323 	add.w	r3, r7, #2608	@ 0xa30
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	ea80 0c02 	eor.w	ip, r0, r2
 8002f08:	f8c7 c748 	str.w	ip, [r7, #1864]	@ 0x748
 8002f0c:	404b      	eors	r3, r1
 8002f0e:	f8c7 374c 	str.w	r3, [r7, #1868]	@ 0x74c
 8002f12:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f507 61e9 	add.w	r1, r7, #1864	@ 0x748
 8002f1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f22:	4684      	mov	ip, r0
 8002f24:	ea8c 0c02 	eor.w	ip, ip, r2
 8002f28:	f8c7 c740 	str.w	ip, [r7, #1856]	@ 0x740
 8002f2c:	404b      	eors	r3, r1
 8002f2e:	f8c7 3744 	str.w	r3, [r7, #1860]	@ 0x744
 8002f32:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f507 61e8 	add.w	r1, r7, #1856	@ 0x740
 8002f3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f42:	4684      	mov	ip, r0
 8002f44:	ea8c 0c02 	eor.w	ip, ip, r2
 8002f48:	f8c7 c738 	str.w	ip, [r7, #1848]	@ 0x738
 8002f4c:	404b      	eors	r3, r1
 8002f4e:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
 8002f52:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	f507 61e7 	add.w	r1, r7, #1848	@ 0x738
 8002f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f62:	4684      	mov	ip, r0
 8002f64:	ea82 0c0c 	eor.w	ip, r2, ip
 8002f68:	f8c7 c298 	str.w	ip, [r7, #664]	@ 0x298
 8002f6c:	404b      	eors	r3, r1
 8002f6e:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8002f72:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8002f76:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8002f7a:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = Ebi ^ Egi ^ Eki ^ Emi ^ Esi;
 8002f7e:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8002f82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f86:	f607 2328 	addw	r3, r7, #2600	@ 0xa28
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	ea80 0c02 	eor.w	ip, r0, r2
 8002f92:	f8c7 c730 	str.w	ip, [r7, #1840]	@ 0x730
 8002f96:	404b      	eors	r3, r1
 8002f98:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734
 8002f9c:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	f507 61e6 	add.w	r1, r7, #1840	@ 0x730
 8002fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fac:	4684      	mov	ip, r0
 8002fae:	ea8c 0c02 	eor.w	ip, ip, r2
 8002fb2:	f8c7 c728 	str.w	ip, [r7, #1832]	@ 0x728
 8002fb6:	404b      	eors	r3, r1
 8002fb8:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
 8002fbc:	f607 13d8 	addw	r3, r7, #2520	@ 0x9d8
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f507 61e5 	add.w	r1, r7, #1832	@ 0x728
 8002fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fcc:	4684      	mov	ip, r0
 8002fce:	ea8c 0c02 	eor.w	ip, ip, r2
 8002fd2:	f8c7 c720 	str.w	ip, [r7, #1824]	@ 0x720
 8002fd6:	404b      	eors	r3, r1
 8002fd8:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
 8002fdc:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f507 61e4 	add.w	r1, r7, #1824	@ 0x720
 8002fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fec:	4684      	mov	ip, r0
 8002fee:	ea82 0c0c 	eor.w	ip, r2, ip
 8002ff2:	f8c7 c290 	str.w	ip, [r7, #656]	@ 0x290
 8002ff6:	404b      	eors	r3, r1
 8002ff8:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8002ffc:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8003000:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8003004:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = Ebo ^ Ego ^ Eko ^ Emo ^ Eso;
 8003008:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 800300c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003010:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	ea80 0c02 	eor.w	ip, r0, r2
 800301c:	f8c7 c718 	str.w	ip, [r7, #1816]	@ 0x718
 8003020:	404b      	eors	r3, r1
 8003022:	f8c7 371c 	str.w	r3, [r7, #1820]	@ 0x71c
 8003026:	f607 13f8 	addw	r3, r7, #2552	@ 0x9f8
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f507 61e3 	add.w	r1, r7, #1816	@ 0x718
 8003032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003036:	4684      	mov	ip, r0
 8003038:	ea8c 0c02 	eor.w	ip, ip, r2
 800303c:	f8c7 c710 	str.w	ip, [r7, #1808]	@ 0x710
 8003040:	404b      	eors	r3, r1
 8003042:	f8c7 3714 	str.w	r3, [r7, #1812]	@ 0x714
 8003046:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f507 61e2 	add.w	r1, r7, #1808	@ 0x710
 8003052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003056:	4684      	mov	ip, r0
 8003058:	ea8c 0c02 	eor.w	ip, ip, r2
 800305c:	f8c7 c708 	str.w	ip, [r7, #1800]	@ 0x708
 8003060:	404b      	eors	r3, r1
 8003062:	f8c7 370c 	str.w	r3, [r7, #1804]	@ 0x70c
 8003066:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	f507 61e1 	add.w	r1, r7, #1800	@ 0x708
 8003072:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003076:	4684      	mov	ip, r0
 8003078:	ea82 0c0c 	eor.w	ip, r2, ip
 800307c:	f8c7 c288 	str.w	ip, [r7, #648]	@ 0x288
 8003080:	404b      	eors	r3, r1
 8003082:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8003086:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 800308a:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 800308e:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = Ebu ^ Egu ^ Eku ^ Emu ^ Esu;
 8003092:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8003096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800309a:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	ea80 0c02 	eor.w	ip, r0, r2
 80030a6:	f8c7 c700 	str.w	ip, [r7, #1792]	@ 0x700
 80030aa:	404b      	eors	r3, r1
 80030ac:	f8c7 3704 	str.w	r3, [r7, #1796]	@ 0x704
 80030b0:	f507 631f 	add.w	r3, r7, #2544	@ 0x9f0
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f507 61e0 	add.w	r1, r7, #1792	@ 0x700
 80030bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030c0:	4684      	mov	ip, r0
 80030c2:	ea8c 0c02 	eor.w	ip, ip, r2
 80030c6:	f8c7 c6f8 	str.w	ip, [r7, #1784]	@ 0x6f8
 80030ca:	404b      	eors	r3, r1
 80030cc:	f8c7 36fc 	str.w	r3, [r7, #1788]	@ 0x6fc
 80030d0:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	f507 61df 	add.w	r1, r7, #1784	@ 0x6f8
 80030dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030e0:	4684      	mov	ip, r0
 80030e2:	ea8c 0c02 	eor.w	ip, ip, r2
 80030e6:	f8c7 c6f0 	str.w	ip, [r7, #1776]	@ 0x6f0
 80030ea:	404b      	eors	r3, r1
 80030ec:	f8c7 36f4 	str.w	r3, [r7, #1780]	@ 0x6f4
 80030f0:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	f507 61de 	add.w	r1, r7, #1776	@ 0x6f0
 80030fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003100:	4684      	mov	ip, r0
 8003102:	ea82 0c0c 	eor.w	ip, r2, ip
 8003106:	f8c7 c280 	str.w	ip, [r7, #640]	@ 0x280
 800310a:	404b      	eors	r3, r1
 800310c:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8003110:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8003114:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8003118:	e9c1 2300 	strd	r2, r3, [r1]

        // thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
        Da = BCu ^ ROL(BCe, 1);
 800311c:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8003120:	0fda      	lsrs	r2, r3, #31
 8003122:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 800312e:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8003132:	0fda      	lsrs	r2, r3, #31
 8003134:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4313      	orrs	r3, r2
 800313c:	f8c7 36e8 	str.w	r3, [r7, #1768]	@ 0x6e8
 8003140:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f507 61dd 	add.w	r1, r7, #1768	@ 0x6e8
 800314c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003150:	4684      	mov	ip, r0
 8003152:	ea82 0c0c 	eor.w	ip, r2, ip
 8003156:	f8c7 c278 	str.w	ip, [r7, #632]	@ 0x278
 800315a:	404b      	eors	r3, r1
 800315c:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8003160:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 8003164:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 8003168:	e9c1 2300 	strd	r2, r3, [r1]
        De = BCa ^ ROL(BCi, 1);
 800316c:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8003170:	0fda      	lsrs	r2, r3, #31
 8003172:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 800317e:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8003182:	0fda      	lsrs	r2, r3, #31
 8003184:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c7 36e0 	str.w	r3, [r7, #1760]	@ 0x6e0
 8003190:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f507 61dc 	add.w	r1, r7, #1760	@ 0x6e0
 800319c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031a0:	4684      	mov	ip, r0
 80031a2:	ea82 0c0c 	eor.w	ip, r2, ip
 80031a6:	f8c7 c270 	str.w	ip, [r7, #624]	@ 0x270
 80031aa:	404b      	eors	r3, r1
 80031ac:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 80031b0:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 80031b4:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 80031b8:	e9c1 2300 	strd	r2, r3, [r1]
        Di = BCe ^ ROL(BCo, 1);
 80031bc:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 80031c0:	0fda      	lsrs	r2, r3, #31
 80031c2:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 80031ce:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 80031d2:	0fda      	lsrs	r2, r3, #31
 80031d4:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c7 36d8 	str.w	r3, [r7, #1752]	@ 0x6d8
 80031e0:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f507 61db 	add.w	r1, r7, #1752	@ 0x6d8
 80031ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031f0:	4684      	mov	ip, r0
 80031f2:	ea82 0c0c 	eor.w	ip, r2, ip
 80031f6:	f8c7 c268 	str.w	ip, [r7, #616]	@ 0x268
 80031fa:	404b      	eors	r3, r1
 80031fc:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8003200:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8003204:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 8003208:	e9c1 2300 	strd	r2, r3, [r1]
        Do = BCi ^ ROL(BCu, 1);
 800320c:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8003210:	0fda      	lsrs	r2, r3, #31
 8003212:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c7 36d4 	str.w	r3, [r7, #1748]	@ 0x6d4
 800321e:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8003222:	0fda      	lsrs	r2, r3, #31
 8003224:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 8003230:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f507 61da 	add.w	r1, r7, #1744	@ 0x6d0
 800323c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003240:	4684      	mov	ip, r0
 8003242:	ea82 0c0c 	eor.w	ip, r2, ip
 8003246:	f8c7 c260 	str.w	ip, [r7, #608]	@ 0x260
 800324a:	404b      	eors	r3, r1
 800324c:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8003250:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 8003254:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 8003258:	e9c1 2300 	strd	r2, r3, [r1]
        Du = BCo ^ ROL(BCa, 1);
 800325c:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8003260:	0fda      	lsrs	r2, r3, #31
 8003262:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c7 36cc 	str.w	r3, [r7, #1740]	@ 0x6cc
 800326e:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8003272:	0fda      	lsrs	r2, r3, #31
 8003274:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 8003280:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 800328c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003290:	4684      	mov	ip, r0
 8003292:	ea82 0c0c 	eor.w	ip, r2, ip
 8003296:	f8c7 c258 	str.w	ip, [r7, #600]	@ 0x258
 800329a:	404b      	eors	r3, r1
 800329c:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80032a0:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 80032a4:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 80032a8:	e9c1 2300 	strd	r2, r3, [r1]

        Eba ^= Da;
 80032ac:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80032b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032b4:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	ea80 0c02 	eor.w	ip, r0, r2
 80032c0:	f8c7 c250 	str.w	ip, [r7, #592]	@ 0x250
 80032c4:	404b      	eors	r3, r1
 80032c6:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80032ca:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 80032ce:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 80032d2:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = Eba;
 80032d6:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80032e2:	e9c1 2300 	strd	r2, r3, [r1]
        Ege ^= De;
 80032e6:	f507 6323 	add.w	r3, r7, #2608	@ 0xa30
 80032ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ee:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	ea80 0c02 	eor.w	ip, r0, r2
 80032fa:	f8c7 c248 	str.w	ip, [r7, #584]	@ 0x248
 80032fe:	404b      	eors	r3, r1
 8003300:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8003304:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 8003308:	f507 6123 	add.w	r1, r7, #2608	@ 0xa30
 800330c:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ege, 44);
 8003310:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003314:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 8003318:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800331c:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8003320:	6803      	ldr	r3, [r0, #0]
 8003322:	031a      	lsls	r2, r3, #12
 8003324:	680b      	ldr	r3, [r1, #0]
 8003326:	0d1b      	lsrs	r3, r3, #20
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800332e:	680b      	ldr	r3, [r1, #0]
 8003330:	031a      	lsls	r2, r3, #12
 8003332:	6803      	ldr	r3, [r0, #0]
 8003334:	0d1b      	lsrs	r3, r3, #20
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800333c:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 8003340:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8003344:	e9c1 2300 	strd	r2, r3, [r1]
        Eki ^= Di;
 8003348:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 800334c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003350:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	ea80 0c02 	eor.w	ip, r0, r2
 800335c:	f8c7 c238 	str.w	ip, [r7, #568]	@ 0x238
 8003360:	404b      	eors	r3, r1
 8003362:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8003366:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 800336a:	f507 6120 	add.w	r1, r7, #2560	@ 0xa00
 800336e:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eki, 43);
 8003372:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003376:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 800337a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800337e:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8003382:	6803      	ldr	r3, [r0, #0]
 8003384:	02da      	lsls	r2, r3, #11
 8003386:	680b      	ldr	r3, [r1, #0]
 8003388:	0d5b      	lsrs	r3, r3, #21
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8003390:	680b      	ldr	r3, [r1, #0]
 8003392:	02da      	lsls	r2, r3, #11
 8003394:	6803      	ldr	r3, [r0, #0]
 8003396:	0d5b      	lsrs	r3, r3, #21
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800339e:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 80033a2:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80033a6:	e9c1 2300 	strd	r2, r3, [r1]
        Emo ^= Do;
 80033aa:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80033ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033b2:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	ea80 0c02 	eor.w	ip, r0, r2
 80033be:	f8c7 c228 	str.w	ip, [r7, #552]	@ 0x228
 80033c2:	404b      	eors	r3, r1
 80033c4:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 80033c8:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 80033cc:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 80033d0:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emo, 21);
 80033d4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80033d8:	f5a3 70dc 	sub.w	r0, r3, #440	@ 0x1b8
 80033dc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80033e0:	f5a3 71da 	sub.w	r1, r3, #436	@ 0x1b4
 80033e4:	6803      	ldr	r3, [r0, #0]
 80033e6:	0ada      	lsrs	r2, r3, #11
 80033e8:	680b      	ldr	r3, [r1, #0]
 80033ea:	055b      	lsls	r3, r3, #21
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80033f2:	680b      	ldr	r3, [r1, #0]
 80033f4:	0ada      	lsrs	r2, r3, #11
 80033f6:	6803      	ldr	r3, [r0, #0]
 80033f8:	055b      	lsls	r3, r3, #21
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8003400:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8003404:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8003408:	e9c1 2300 	strd	r2, r3, [r1]
        Esu ^= Du;
 800340c:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8003410:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003414:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	ea80 0c02 	eor.w	ip, r0, r2
 8003420:	f8c7 c218 	str.w	ip, [r7, #536]	@ 0x218
 8003424:	404b      	eors	r3, r1
 8003426:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800342a:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 800342e:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 8003432:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esu, 14);
 8003436:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800343a:	f5a3 70f4 	sub.w	r0, r3, #488	@ 0x1e8
 800343e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003442:	f5a3 71f2 	sub.w	r1, r3, #484	@ 0x1e4
 8003446:	6803      	ldr	r3, [r0, #0]
 8003448:	0c9a      	lsrs	r2, r3, #18
 800344a:	680b      	ldr	r3, [r1, #0]
 800344c:	039b      	lsls	r3, r3, #14
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8003454:	680b      	ldr	r3, [r1, #0]
 8003456:	0c9a      	lsrs	r2, r3, #18
 8003458:	6803      	ldr	r3, [r0, #0]
 800345a:	039b      	lsls	r3, r3, #14
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8003462:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8003466:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 800346a:	e9c1 2300 	strd	r2, r3, [r1]
        Aba = BCa ^ ((~BCe) & BCi);
 800346e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	43d1      	mvns	r1, r2
 8003478:	f8c7 16c0 	str.w	r1, [r7, #1728]	@ 0x6c0
 800347c:	43db      	mvns	r3, r3
 800347e:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
 8003482:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f507 61d8 	add.w	r1, r7, #1728	@ 0x6c0
 800348e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003492:	4684      	mov	ip, r0
 8003494:	ea0c 0c02 	and.w	ip, ip, r2
 8003498:	f8c7 c6b8 	str.w	ip, [r7, #1720]	@ 0x6b8
 800349c:	400b      	ands	r3, r1
 800349e:	f8c7 36bc 	str.w	r3, [r7, #1724]	@ 0x6bc
 80034a2:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	f507 61d7 	add.w	r1, r7, #1720	@ 0x6b8
 80034ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034b2:	4684      	mov	ip, r0
 80034b4:	ea82 0c0c 	eor.w	ip, r2, ip
 80034b8:	f8c7 c208 	str.w	ip, [r7, #520]	@ 0x208
 80034bc:	404b      	eors	r3, r1
 80034be:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80034c2:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80034c6:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 80034ca:	e9c1 2300 	strd	r2, r3, [r1]
        Aba ^= KeccakF_RoundConstants[round + 1];
 80034ce:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 80034d2:	3301      	adds	r3, #1
 80034d4:	4ac1      	ldr	r2, [pc, #772]	@ (80037dc <KeccakF1600_StatePermute+0x22e0>)
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034de:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	ea82 0c00 	eor.w	ip, r2, r0
 80034ea:	f8c7 c200 	str.w	ip, [r7, #512]	@ 0x200
 80034ee:	404b      	eors	r3, r1
 80034f0:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80034f4:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80034f8:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 80034fc:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = BCe ^ ((~BCi) & BCo);
 8003500:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	43d1      	mvns	r1, r2
 800350a:	f8c7 16b0 	str.w	r1, [r7, #1712]	@ 0x6b0
 800350e:	43db      	mvns	r3, r3
 8003510:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
 8003514:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f507 61d6 	add.w	r1, r7, #1712	@ 0x6b0
 8003520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003524:	4684      	mov	ip, r0
 8003526:	ea0c 0c02 	and.w	ip, ip, r2
 800352a:	f8c7 c6a8 	str.w	ip, [r7, #1704]	@ 0x6a8
 800352e:	400b      	ands	r3, r1
 8003530:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 8003534:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f507 61d5 	add.w	r1, r7, #1704	@ 0x6a8
 8003540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003544:	4684      	mov	ip, r0
 8003546:	ea82 0c0c 	eor.w	ip, r2, ip
 800354a:	f8c7 c1f8 	str.w	ip, [r7, #504]	@ 0x1f8
 800354e:	404b      	eors	r3, r1
 8003550:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8003554:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8003558:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 800355c:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = BCi ^ ((~BCo) & BCu);
 8003560:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	43d1      	mvns	r1, r2
 800356a:	f8c7 16a0 	str.w	r1, [r7, #1696]	@ 0x6a0
 800356e:	43db      	mvns	r3, r3
 8003570:	f8c7 36a4 	str.w	r3, [r7, #1700]	@ 0x6a4
 8003574:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f507 61d4 	add.w	r1, r7, #1696	@ 0x6a0
 8003580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003584:	4684      	mov	ip, r0
 8003586:	ea0c 0c02 	and.w	ip, ip, r2
 800358a:	f8c7 c698 	str.w	ip, [r7, #1688]	@ 0x698
 800358e:	400b      	ands	r3, r1
 8003590:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 8003594:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f507 61d3 	add.w	r1, r7, #1688	@ 0x698
 80035a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035a4:	4684      	mov	ip, r0
 80035a6:	ea82 0c0c 	eor.w	ip, r2, ip
 80035aa:	f8c7 c1f0 	str.w	ip, [r7, #496]	@ 0x1f0
 80035ae:	404b      	eors	r3, r1
 80035b0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80035b4:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80035b8:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 80035bc:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = BCo ^ ((~BCu) & BCa);
 80035c0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	43d1      	mvns	r1, r2
 80035ca:	f8c7 1690 	str.w	r1, [r7, #1680]	@ 0x690
 80035ce:	43db      	mvns	r3, r3
 80035d0:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 80035d4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f507 61d2 	add.w	r1, r7, #1680	@ 0x690
 80035e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035e4:	4684      	mov	ip, r0
 80035e6:	ea0c 0c02 	and.w	ip, ip, r2
 80035ea:	f8c7 c688 	str.w	ip, [r7, #1672]	@ 0x688
 80035ee:	400b      	ands	r3, r1
 80035f0:	f8c7 368c 	str.w	r3, [r7, #1676]	@ 0x68c
 80035f4:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	f507 61d1 	add.w	r1, r7, #1672	@ 0x688
 8003600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003604:	4684      	mov	ip, r0
 8003606:	ea82 0c0c 	eor.w	ip, r2, ip
 800360a:	f8c7 c1e8 	str.w	ip, [r7, #488]	@ 0x1e8
 800360e:	404b      	eors	r3, r1
 8003610:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8003614:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8003618:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 800361c:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = BCu ^ ((~BCa) & BCe);
 8003620:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	43d1      	mvns	r1, r2
 800362a:	f8c7 1680 	str.w	r1, [r7, #1664]	@ 0x680
 800362e:	43db      	mvns	r3, r3
 8003630:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 8003634:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f507 61d0 	add.w	r1, r7, #1664	@ 0x680
 8003640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003644:	4684      	mov	ip, r0
 8003646:	ea0c 0c02 	and.w	ip, ip, r2
 800364a:	f8c7 c678 	str.w	ip, [r7, #1656]	@ 0x678
 800364e:	400b      	ands	r3, r1
 8003650:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 8003654:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f507 61cf 	add.w	r1, r7, #1656	@ 0x678
 8003660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003664:	4684      	mov	ip, r0
 8003666:	ea82 0c0c 	eor.w	ip, r2, ip
 800366a:	f8c7 c1e0 	str.w	ip, [r7, #480]	@ 0x1e0
 800366e:	404b      	eors	r3, r1
 8003670:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003674:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8003678:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 800367c:	e9c1 2300 	strd	r2, r3, [r1]

        Ebo ^= Do;
 8003680:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8003684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003688:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	ea80 0c02 	eor.w	ip, r0, r2
 8003694:	f8c7 c1d8 	str.w	ip, [r7, #472]	@ 0x1d8
 8003698:	404b      	eors	r3, r1
 800369a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800369e:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 80036a2:	f607 2148 	addw	r1, r7, #2632	@ 0xa48
 80036a6:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebo, 28);
 80036aa:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80036ae:	f5a3 70a0 	sub.w	r0, r3, #320	@ 0x140
 80036b2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80036b6:	f5a3 719e 	sub.w	r1, r3, #316	@ 0x13c
 80036ba:	6803      	ldr	r3, [r0, #0]
 80036bc:	091a      	lsrs	r2, r3, #4
 80036be:	680b      	ldr	r3, [r1, #0]
 80036c0:	071b      	lsls	r3, r3, #28
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80036c8:	680b      	ldr	r3, [r1, #0]
 80036ca:	091a      	lsrs	r2, r3, #4
 80036cc:	6803      	ldr	r3, [r0, #0]
 80036ce:	071b      	lsls	r3, r3, #28
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80036d6:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80036da:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80036de:	e9c1 2300 	strd	r2, r3, [r1]
        Egu ^= Du;
 80036e2:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80036e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ea:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	ea80 0c02 	eor.w	ip, r0, r2
 80036f6:	f8c7 c1c8 	str.w	ip, [r7, #456]	@ 0x1c8
 80036fa:	404b      	eors	r3, r1
 80036fc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003700:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8003704:	f607 2118 	addw	r1, r7, #2584	@ 0xa18
 8003708:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Egu, 20);
 800370c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003710:	f5a3 70b8 	sub.w	r0, r3, #368	@ 0x170
 8003714:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003718:	f5a3 71b6 	sub.w	r1, r3, #364	@ 0x16c
 800371c:	6803      	ldr	r3, [r0, #0]
 800371e:	0b1a      	lsrs	r2, r3, #12
 8003720:	680b      	ldr	r3, [r1, #0]
 8003722:	051b      	lsls	r3, r3, #20
 8003724:	4313      	orrs	r3, r2
 8003726:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800372a:	680b      	ldr	r3, [r1, #0]
 800372c:	0b1a      	lsrs	r2, r3, #12
 800372e:	6803      	ldr	r3, [r0, #0]
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003738:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 800373c:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8003740:	e9c1 2300 	strd	r2, r3, [r1]
        Eka ^= Da;
 8003744:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 8003748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800374c:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	ea80 0c02 	eor.w	ip, r0, r2
 8003758:	f8c7 c1b8 	str.w	ip, [r7, #440]	@ 0x1b8
 800375c:	404b      	eors	r3, r1
 800375e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003762:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8003766:	f507 6121 	add.w	r1, r7, #2576	@ 0xa10
 800376a:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eka, 3);
 800376e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003772:	f5a3 70bc 	sub.w	r0, r3, #376	@ 0x178
 8003776:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800377a:	f5a3 71ba 	sub.w	r1, r3, #372	@ 0x174
 800377e:	6803      	ldr	r3, [r0, #0]
 8003780:	0f5a      	lsrs	r2, r3, #29
 8003782:	680b      	ldr	r3, [r1, #0]
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800378c:	680b      	ldr	r3, [r1, #0]
 800378e:	0f5a      	lsrs	r2, r3, #29
 8003790:	6803      	ldr	r3, [r0, #0]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800379a:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 800379e:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80037a2:	e9c1 2300 	strd	r2, r3, [r1]
        Eme ^= De;
 80037a6:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80037aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ae:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	ea80 0c02 	eor.w	ip, r0, r2
 80037ba:	f8c7 c1a8 	str.w	ip, [r7, #424]	@ 0x1a8
 80037be:	404b      	eors	r3, r1
 80037c0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80037c4:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80037c8:	f507 611e 	add.w	r1, r7, #2528	@ 0x9e0
 80037cc:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Eme, 45);
 80037d0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80037d4:	f5a3 70d2 	sub.w	r0, r3, #420	@ 0x1a4
 80037d8:	e002      	b.n	80037e0 <KeccakF1600_StatePermute+0x22e4>
 80037da:	bf00      	nop
 80037dc:	0800b4d0 	.word	0x0800b4d0
 80037e0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80037e4:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 80037e8:	6803      	ldr	r3, [r0, #0]
 80037ea:	035a      	lsls	r2, r3, #13
 80037ec:	680b      	ldr	r3, [r1, #0]
 80037ee:	0cdb      	lsrs	r3, r3, #19
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80037f6:	680b      	ldr	r3, [r1, #0]
 80037f8:	035a      	lsls	r2, r3, #13
 80037fa:	6803      	ldr	r3, [r0, #0]
 80037fc:	0cdb      	lsrs	r3, r3, #19
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003804:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8003808:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 800380c:	e9c1 2300 	strd	r2, r3, [r1]
        Esi ^= Di;
 8003810:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8003814:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003818:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	ea80 0c02 	eor.w	ip, r0, r2
 8003824:	f8c7 c198 	str.w	ip, [r7, #408]	@ 0x198
 8003828:	404b      	eors	r3, r1
 800382a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800382e:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8003832:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 8003836:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esi, 61);
 800383a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800383e:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8003842:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003846:	f5a3 71ec 	sub.w	r1, r3, #472	@ 0x1d8
 800384a:	6803      	ldr	r3, [r0, #0]
 800384c:	075a      	lsls	r2, r3, #29
 800384e:	680b      	ldr	r3, [r1, #0]
 8003850:	08db      	lsrs	r3, r3, #3
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8003858:	680b      	ldr	r3, [r1, #0]
 800385a:	075a      	lsls	r2, r3, #29
 800385c:	6803      	ldr	r3, [r0, #0]
 800385e:	08db      	lsrs	r3, r3, #3
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8003866:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800386a:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 800386e:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = BCa ^ ((~BCe) & BCi);
 8003872:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	43d1      	mvns	r1, r2
 800387c:	f8c7 1670 	str.w	r1, [r7, #1648]	@ 0x670
 8003880:	43db      	mvns	r3, r3
 8003882:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
 8003886:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f507 61ce 	add.w	r1, r7, #1648	@ 0x670
 8003892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003896:	4684      	mov	ip, r0
 8003898:	ea0c 0c02 	and.w	ip, ip, r2
 800389c:	f8c7 c668 	str.w	ip, [r7, #1640]	@ 0x668
 80038a0:	400b      	ands	r3, r1
 80038a2:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 80038a6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f507 61cd 	add.w	r1, r7, #1640	@ 0x668
 80038b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038b6:	4684      	mov	ip, r0
 80038b8:	ea82 0c0c 	eor.w	ip, r2, ip
 80038bc:	f8c7 c188 	str.w	ip, [r7, #392]	@ 0x188
 80038c0:	404b      	eors	r3, r1
 80038c2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80038c6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80038ca:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 80038ce:	e9c1 2300 	strd	r2, r3, [r1]
        Age = BCe ^ ((~BCi) & BCo);
 80038d2:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	43d1      	mvns	r1, r2
 80038dc:	f8c7 1660 	str.w	r1, [r7, #1632]	@ 0x660
 80038e0:	43db      	mvns	r3, r3
 80038e2:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 80038e6:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80038ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ee:	f507 61cc 	add.w	r1, r7, #1632	@ 0x660
 80038f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80038f6:	4684      	mov	ip, r0
 80038f8:	ea0c 0c02 	and.w	ip, ip, r2
 80038fc:	f8c7 c658 	str.w	ip, [r7, #1624]	@ 0x658
 8003900:	400b      	ands	r3, r1
 8003902:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 8003906:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f507 61cb 	add.w	r1, r7, #1624	@ 0x658
 8003912:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003916:	4684      	mov	ip, r0
 8003918:	ea82 0c0c 	eor.w	ip, r2, ip
 800391c:	f8c7 c180 	str.w	ip, [r7, #384]	@ 0x180
 8003920:	404b      	eors	r3, r1
 8003922:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003926:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 800392a:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 800392e:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = BCi ^ ((~BCo) & BCu);
 8003932:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	43d1      	mvns	r1, r2
 800393c:	f8c7 1650 	str.w	r1, [r7, #1616]	@ 0x650
 8003940:	43db      	mvns	r3, r3
 8003942:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 8003946:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f507 61ca 	add.w	r1, r7, #1616	@ 0x650
 8003952:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003956:	4684      	mov	ip, r0
 8003958:	ea0c 0c02 	and.w	ip, ip, r2
 800395c:	f8c7 c648 	str.w	ip, [r7, #1608]	@ 0x648
 8003960:	400b      	ands	r3, r1
 8003962:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8003966:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f507 61c9 	add.w	r1, r7, #1608	@ 0x648
 8003972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003976:	4684      	mov	ip, r0
 8003978:	ea82 0c0c 	eor.w	ip, r2, ip
 800397c:	f8c7 c178 	str.w	ip, [r7, #376]	@ 0x178
 8003980:	404b      	eors	r3, r1
 8003982:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003986:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 800398a:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 800398e:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = BCo ^ ((~BCu) & BCa);
 8003992:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	43d1      	mvns	r1, r2
 800399c:	f8c7 1640 	str.w	r1, [r7, #1600]	@ 0x640
 80039a0:	43db      	mvns	r3, r3
 80039a2:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 80039a6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	f507 61c8 	add.w	r1, r7, #1600	@ 0x640
 80039b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039b6:	4684      	mov	ip, r0
 80039b8:	ea0c 0c02 	and.w	ip, ip, r2
 80039bc:	f8c7 c638 	str.w	ip, [r7, #1592]	@ 0x638
 80039c0:	400b      	ands	r3, r1
 80039c2:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 80039c6:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f507 61c7 	add.w	r1, r7, #1592	@ 0x638
 80039d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039d6:	4684      	mov	ip, r0
 80039d8:	ea82 0c0c 	eor.w	ip, r2, ip
 80039dc:	f8c7 c170 	str.w	ip, [r7, #368]	@ 0x170
 80039e0:	404b      	eors	r3, r1
 80039e2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80039e6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80039ea:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 80039ee:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = BCu ^ ((~BCa) & BCe);
 80039f2:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	43d1      	mvns	r1, r2
 80039fc:	f8c7 1630 	str.w	r1, [r7, #1584]	@ 0x630
 8003a00:	43db      	mvns	r3, r3
 8003a02:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 8003a06:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f507 61c6 	add.w	r1, r7, #1584	@ 0x630
 8003a12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a16:	4684      	mov	ip, r0
 8003a18:	ea0c 0c02 	and.w	ip, ip, r2
 8003a1c:	f8c7 c628 	str.w	ip, [r7, #1576]	@ 0x628
 8003a20:	400b      	ands	r3, r1
 8003a22:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 8003a26:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f507 61c5 	add.w	r1, r7, #1576	@ 0x628
 8003a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a36:	4684      	mov	ip, r0
 8003a38:	ea82 0c0c 	eor.w	ip, r2, ip
 8003a3c:	f8c7 c168 	str.w	ip, [r7, #360]	@ 0x168
 8003a40:	404b      	eors	r3, r1
 8003a42:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8003a46:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8003a4a:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8003a4e:	e9c1 2300 	strd	r2, r3, [r1]

        Ebe ^= De;
 8003a52:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8003a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a5a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	ea80 0c02 	eor.w	ip, r0, r2
 8003a66:	f8c7 c160 	str.w	ip, [r7, #352]	@ 0x160
 8003a6a:	404b      	eors	r3, r1
 8003a6c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8003a70:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8003a74:	f607 2158 	addw	r1, r7, #2648	@ 0xa58
 8003a78:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebe, 1);
 8003a7c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003a80:	f5a3 7098 	sub.w	r0, r3, #304	@ 0x130
 8003a84:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003a88:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8003a8c:	6803      	ldr	r3, [r0, #0]
 8003a8e:	0fda      	lsrs	r2, r3, #31
 8003a90:	680b      	ldr	r3, [r1, #0]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8003a9a:	680b      	ldr	r3, [r1, #0]
 8003a9c:	0fda      	lsrs	r2, r3, #31
 8003a9e:	6803      	ldr	r3, [r0, #0]
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003aa8:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8003aac:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8003ab0:	e9c1 2300 	strd	r2, r3, [r1]
        Egi ^= Di;
 8003ab4:	f607 2328 	addw	r3, r7, #2600	@ 0xa28
 8003ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003abc:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	ea80 0c02 	eor.w	ip, r0, r2
 8003ac8:	f8c7 c150 	str.w	ip, [r7, #336]	@ 0x150
 8003acc:	404b      	eors	r3, r1
 8003ace:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003ad2:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8003ad6:	f607 2128 	addw	r1, r7, #2600	@ 0xa28
 8003ada:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Egi, 6);
 8003ade:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003ae2:	f5a3 70b0 	sub.w	r0, r3, #352	@ 0x160
 8003ae6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003aea:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 8003aee:	6803      	ldr	r3, [r0, #0]
 8003af0:	0e9a      	lsrs	r2, r3, #26
 8003af2:	680b      	ldr	r3, [r1, #0]
 8003af4:	019b      	lsls	r3, r3, #6
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003afc:	680b      	ldr	r3, [r1, #0]
 8003afe:	0e9a      	lsrs	r2, r3, #26
 8003b00:	6803      	ldr	r3, [r0, #0]
 8003b02:	019b      	lsls	r3, r3, #6
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8003b0a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8003b0e:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8003b12:	e9c1 2300 	strd	r2, r3, [r1]
        Eko ^= Do;
 8003b16:	f607 13f8 	addw	r3, r7, #2552	@ 0x9f8
 8003b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b1e:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	ea80 0c02 	eor.w	ip, r0, r2
 8003b2a:	f8c7 c140 	str.w	ip, [r7, #320]	@ 0x140
 8003b2e:	404b      	eors	r3, r1
 8003b30:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003b34:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8003b38:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 8003b3c:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eko, 25);
 8003b40:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003b44:	f5a3 70c8 	sub.w	r0, r3, #400	@ 0x190
 8003b48:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003b4c:	f5a3 71c6 	sub.w	r1, r3, #396	@ 0x18c
 8003b50:	6803      	ldr	r3, [r0, #0]
 8003b52:	09da      	lsrs	r2, r3, #7
 8003b54:	680b      	ldr	r3, [r1, #0]
 8003b56:	065b      	lsls	r3, r3, #25
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003b5e:	680b      	ldr	r3, [r1, #0]
 8003b60:	09da      	lsrs	r2, r3, #7
 8003b62:	6803      	ldr	r3, [r0, #0]
 8003b64:	065b      	lsls	r3, r3, #25
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003b6c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003b70:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8003b74:	e9c1 2300 	strd	r2, r3, [r1]
        Emu ^= Du;
 8003b78:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8003b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b80:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	ea80 0c02 	eor.w	ip, r0, r2
 8003b8c:	f8c7 c130 	str.w	ip, [r7, #304]	@ 0x130
 8003b90:	404b      	eors	r3, r1
 8003b92:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003b96:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8003b9a:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8003b9e:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emu, 8);
 8003ba2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003ba6:	f5a3 70e0 	sub.w	r0, r3, #448	@ 0x1c0
 8003baa:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003bae:	f5a3 71de 	sub.w	r1, r3, #444	@ 0x1bc
 8003bb2:	6803      	ldr	r3, [r0, #0]
 8003bb4:	0e1a      	lsrs	r2, r3, #24
 8003bb6:	680b      	ldr	r3, [r1, #0]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003bc0:	680b      	ldr	r3, [r1, #0]
 8003bc2:	0e1a      	lsrs	r2, r3, #24
 8003bc4:	6803      	ldr	r3, [r0, #0]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003bce:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8003bd2:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8003bd6:	e9c1 2300 	strd	r2, r3, [r1]
        Esa ^= Da;
 8003bda:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8003bde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003be2:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	ea80 0c02 	eor.w	ip, r0, r2
 8003bee:	f8c7 c120 	str.w	ip, [r7, #288]	@ 0x120
 8003bf2:	404b      	eors	r3, r1
 8003bf4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003bf8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003bfc:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 8003c00:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Esa, 18);
 8003c04:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003c08:	f5a3 70e4 	sub.w	r0, r3, #456	@ 0x1c8
 8003c0c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003c10:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003c14:	6803      	ldr	r3, [r0, #0]
 8003c16:	0b9a      	lsrs	r2, r3, #14
 8003c18:	680b      	ldr	r3, [r1, #0]
 8003c1a:	049b      	lsls	r3, r3, #18
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003c22:	680b      	ldr	r3, [r1, #0]
 8003c24:	0b9a      	lsrs	r2, r3, #14
 8003c26:	6803      	ldr	r3, [r0, #0]
 8003c28:	049b      	lsls	r3, r3, #18
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003c30:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003c34:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8003c38:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = BCa ^ ((~BCe) & BCi);
 8003c3c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	43d1      	mvns	r1, r2
 8003c46:	f8c7 1620 	str.w	r1, [r7, #1568]	@ 0x620
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8003c50:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f507 61c4 	add.w	r1, r7, #1568	@ 0x620
 8003c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c60:	4684      	mov	ip, r0
 8003c62:	ea0c 0c02 	and.w	ip, ip, r2
 8003c66:	f8c7 c618 	str.w	ip, [r7, #1560]	@ 0x618
 8003c6a:	400b      	ands	r3, r1
 8003c6c:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8003c70:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 8003c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c80:	4684      	mov	ip, r0
 8003c82:	ea82 0c0c 	eor.w	ip, r2, ip
 8003c86:	f8c7 c110 	str.w	ip, [r7, #272]	@ 0x110
 8003c8a:	404b      	eors	r3, r1
 8003c8c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003c90:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003c94:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 8003c98:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = BCe ^ ((~BCi) & BCo);
 8003c9c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	43d1      	mvns	r1, r2
 8003ca6:	f8c7 1610 	str.w	r1, [r7, #1552]	@ 0x610
 8003caa:	43db      	mvns	r3, r3
 8003cac:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8003cb0:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f507 61c2 	add.w	r1, r7, #1552	@ 0x610
 8003cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cc0:	4684      	mov	ip, r0
 8003cc2:	ea0c 0c02 	and.w	ip, ip, r2
 8003cc6:	f8c7 c608 	str.w	ip, [r7, #1544]	@ 0x608
 8003cca:	400b      	ands	r3, r1
 8003ccc:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 8003cd0:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f507 61c1 	add.w	r1, r7, #1544	@ 0x608
 8003cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ce0:	4684      	mov	ip, r0
 8003ce2:	ea82 0c0c 	eor.w	ip, r2, ip
 8003ce6:	f8c7 c108 	str.w	ip, [r7, #264]	@ 0x108
 8003cea:	404b      	eors	r3, r1
 8003cec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003cf0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8003cf4:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8003cf8:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = BCi ^ ((~BCo) & BCu);
 8003cfc:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	43d1      	mvns	r1, r2
 8003d06:	f8c7 1600 	str.w	r1, [r7, #1536]	@ 0x600
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8003d10:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f507 61c0 	add.w	r1, r7, #1536	@ 0x600
 8003d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d20:	4684      	mov	ip, r0
 8003d22:	ea0c 0c02 	and.w	ip, ip, r2
 8003d26:	f8c7 c5f8 	str.w	ip, [r7, #1528]	@ 0x5f8
 8003d2a:	400b      	ands	r3, r1
 8003d2c:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 8003d30:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f507 61bf 	add.w	r1, r7, #1528	@ 0x5f8
 8003d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d40:	4684      	mov	ip, r0
 8003d42:	ea82 0c0c 	eor.w	ip, r2, ip
 8003d46:	f8c7 c100 	str.w	ip, [r7, #256]	@ 0x100
 8003d4a:	404b      	eors	r3, r1
 8003d4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d50:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8003d54:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 8003d58:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = BCo ^ ((~BCu) & BCa);
 8003d5c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	43d1      	mvns	r1, r2
 8003d66:	f8c7 15f0 	str.w	r1, [r7, #1520]	@ 0x5f0
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 8003d70:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f507 61be 	add.w	r1, r7, #1520	@ 0x5f0
 8003d7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d80:	4684      	mov	ip, r0
 8003d82:	ea0c 0c02 	and.w	ip, ip, r2
 8003d86:	f8c7 c5e8 	str.w	ip, [r7, #1512]	@ 0x5e8
 8003d8a:	400b      	ands	r3, r1
 8003d8c:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 8003d90:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f507 61bd 	add.w	r1, r7, #1512	@ 0x5e8
 8003d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003da0:	4684      	mov	ip, r0
 8003da2:	ea82 0c0c 	eor.w	ip, r2, ip
 8003da6:	f8c7 c0f8 	str.w	ip, [r7, #248]	@ 0xf8
 8003daa:	404b      	eors	r3, r1
 8003dac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003db0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 8003db4:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 8003db8:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = BCu ^ ((~BCa) & BCe);
 8003dbc:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	43d1      	mvns	r1, r2
 8003dc6:	f8c7 15e0 	str.w	r1, [r7, #1504]	@ 0x5e0
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 8003dd0:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f507 61bc 	add.w	r1, r7, #1504	@ 0x5e0
 8003ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003de0:	4684      	mov	ip, r0
 8003de2:	ea0c 0c02 	and.w	ip, ip, r2
 8003de6:	f8c7 c5d8 	str.w	ip, [r7, #1496]	@ 0x5d8
 8003dea:	400b      	ands	r3, r1
 8003dec:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 8003df0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f507 61bb 	add.w	r1, r7, #1496	@ 0x5d8
 8003dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e00:	4684      	mov	ip, r0
 8003e02:	ea82 0c0c 	eor.w	ip, r2, ip
 8003e06:	f8c7 c0f0 	str.w	ip, [r7, #240]	@ 0xf0
 8003e0a:	404b      	eors	r3, r1
 8003e0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003e10:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8003e14:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8003e18:	e9c1 2300 	strd	r2, r3, [r1]

        Ebu ^= Du;
 8003e1c:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8003e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e24:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	ea80 0c02 	eor.w	ip, r0, r2
 8003e30:	f8c7 c0e8 	str.w	ip, [r7, #232]	@ 0xe8
 8003e34:	404b      	eors	r3, r1
 8003e36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e3a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8003e3e:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 8003e42:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebu, 27);
 8003e46:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003e4a:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 8003e4e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003e52:	f5a3 71a2 	sub.w	r1, r3, #324	@ 0x144
 8003e56:	6803      	ldr	r3, [r0, #0]
 8003e58:	095a      	lsrs	r2, r3, #5
 8003e5a:	680b      	ldr	r3, [r1, #0]
 8003e5c:	06db      	lsls	r3, r3, #27
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e64:	680b      	ldr	r3, [r1, #0]
 8003e66:	095a      	lsrs	r2, r3, #5
 8003e68:	6803      	ldr	r3, [r0, #0]
 8003e6a:	06db      	lsls	r3, r3, #27
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e72:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8003e76:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8003e7a:	e9c1 2300 	strd	r2, r3, [r1]
        Ega ^= Da;
 8003e7e:	f607 2338 	addw	r3, r7, #2616	@ 0xa38
 8003e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e86:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	ea80 0c02 	eor.w	ip, r0, r2
 8003e92:	f8c7 c0d8 	str.w	ip, [r7, #216]	@ 0xd8
 8003e96:	404b      	eors	r3, r1
 8003e98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e9c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8003ea0:	f607 2138 	addw	r1, r7, #2616	@ 0xa38
 8003ea4:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ega, 36);
 8003ea8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003eac:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8003eb0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003eb4:	f5a3 71a8 	sub.w	r1, r3, #336	@ 0x150
 8003eb8:	6803      	ldr	r3, [r0, #0]
 8003eba:	011a      	lsls	r2, r3, #4
 8003ebc:	680b      	ldr	r3, [r1, #0]
 8003ebe:	0f1b      	lsrs	r3, r3, #28
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ec6:	680b      	ldr	r3, [r1, #0]
 8003ec8:	011a      	lsls	r2, r3, #4
 8003eca:	6803      	ldr	r3, [r0, #0]
 8003ecc:	0f1b      	lsrs	r3, r3, #28
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ed4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8003ed8:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8003edc:	e9c1 2300 	strd	r2, r3, [r1]
        Eke ^= De;
 8003ee0:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8003ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ee8:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	ea80 0c02 	eor.w	ip, r0, r2
 8003ef4:	f8c7 c0c8 	str.w	ip, [r7, #200]	@ 0xc8
 8003ef8:	404b      	eors	r3, r1
 8003efa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003efe:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8003f02:	f607 2108 	addw	r1, r7, #2568	@ 0xa08
 8003f06:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eke, 10);
 8003f0a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003f0e:	f5a3 70c0 	sub.w	r0, r3, #384	@ 0x180
 8003f12:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003f16:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003f1a:	6803      	ldr	r3, [r0, #0]
 8003f1c:	0d9a      	lsrs	r2, r3, #22
 8003f1e:	680b      	ldr	r3, [r1, #0]
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	4313      	orrs	r3, r2
 8003f24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f28:	680b      	ldr	r3, [r1, #0]
 8003f2a:	0d9a      	lsrs	r2, r3, #22
 8003f2c:	6803      	ldr	r3, [r0, #0]
 8003f2e:	029b      	lsls	r3, r3, #10
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f36:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8003f3a:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8003f3e:	e9c1 2300 	strd	r2, r3, [r1]
        Emi ^= Di;
 8003f42:	f607 13d8 	addw	r3, r7, #2520	@ 0x9d8
 8003f46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f4a:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	ea80 0c02 	eor.w	ip, r0, r2
 8003f56:	f8c7 c0b8 	str.w	ip, [r7, #184]	@ 0xb8
 8003f5a:	404b      	eors	r3, r1
 8003f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f60:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8003f64:	f607 11d8 	addw	r1, r7, #2520	@ 0x9d8
 8003f68:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Emi, 15);
 8003f6c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003f70:	f5a3 70d8 	sub.w	r0, r3, #432	@ 0x1b0
 8003f74:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003f78:	f5a3 71d6 	sub.w	r1, r3, #428	@ 0x1ac
 8003f7c:	6803      	ldr	r3, [r0, #0]
 8003f7e:	0c5a      	lsrs	r2, r3, #17
 8003f80:	680b      	ldr	r3, [r1, #0]
 8003f82:	03db      	lsls	r3, r3, #15
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f8a:	680b      	ldr	r3, [r1, #0]
 8003f8c:	0c5a      	lsrs	r2, r3, #17
 8003f8e:	6803      	ldr	r3, [r0, #0]
 8003f90:	03db      	lsls	r3, r3, #15
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f98:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003f9c:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8003fa0:	e9c1 2300 	strd	r2, r3, [r1]
        Eso ^= Do;
 8003fa4:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8003fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fac:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	ea80 0c02 	eor.w	ip, r0, r2
 8003fb8:	f8c7 c0a8 	str.w	ip, [r7, #168]	@ 0xa8
 8003fbc:	404b      	eors	r3, r1
 8003fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fc2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8003fc6:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 8003fca:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Eso, 56);
 8003fce:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003fd2:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 8003fd6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003fda:	f5a3 71f0 	sub.w	r1, r3, #480	@ 0x1e0
 8003fde:	6803      	ldr	r3, [r0, #0]
 8003fe0:	061a      	lsls	r2, r3, #24
 8003fe2:	680b      	ldr	r3, [r1, #0]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fec:	680b      	ldr	r3, [r1, #0]
 8003fee:	061a      	lsls	r2, r3, #24
 8003ff0:	6803      	ldr	r3, [r0, #0]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ffa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003ffe:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8004002:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = BCa ^ ((~BCe) & BCi);
 8004006:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	43d1      	mvns	r1, r2
 8004010:	f8c7 15d0 	str.w	r1, [r7, #1488]	@ 0x5d0
 8004014:	43db      	mvns	r3, r3
 8004016:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 800401a:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f507 61ba 	add.w	r1, r7, #1488	@ 0x5d0
 8004026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800402a:	4684      	mov	ip, r0
 800402c:	ea0c 0c02 	and.w	ip, ip, r2
 8004030:	f8c7 c5c8 	str.w	ip, [r7, #1480]	@ 0x5c8
 8004034:	400b      	ands	r3, r1
 8004036:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 800403a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f507 61b9 	add.w	r1, r7, #1480	@ 0x5c8
 8004046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800404a:	4684      	mov	ip, r0
 800404c:	ea82 0c0c 	eor.w	ip, r2, ip
 8004050:	f8c7 c098 	str.w	ip, [r7, #152]	@ 0x98
 8004054:	404b      	eors	r3, r1
 8004056:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800405a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800405e:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 8004062:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = BCe ^ ((~BCi) & BCo);
 8004066:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	43d1      	mvns	r1, r2
 8004070:	f8c7 15c0 	str.w	r1, [r7, #1472]	@ 0x5c0
 8004074:	43db      	mvns	r3, r3
 8004076:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 800407a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f507 61b8 	add.w	r1, r7, #1472	@ 0x5c0
 8004086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800408a:	4684      	mov	ip, r0
 800408c:	ea0c 0c02 	and.w	ip, ip, r2
 8004090:	f8c7 c5b8 	str.w	ip, [r7, #1464]	@ 0x5b8
 8004094:	400b      	ands	r3, r1
 8004096:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 800409a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 80040a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040aa:	4684      	mov	ip, r0
 80040ac:	ea82 0c0c 	eor.w	ip, r2, ip
 80040b0:	f8c7 c090 	str.w	ip, [r7, #144]	@ 0x90
 80040b4:	404b      	eors	r3, r1
 80040b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040ba:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80040be:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 80040c2:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = BCi ^ ((~BCo) & BCu);
 80040c6:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	43d1      	mvns	r1, r2
 80040d0:	f8c7 15b0 	str.w	r1, [r7, #1456]	@ 0x5b0
 80040d4:	43db      	mvns	r3, r3
 80040d6:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 80040da:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	f507 61b6 	add.w	r1, r7, #1456	@ 0x5b0
 80040e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040ea:	4684      	mov	ip, r0
 80040ec:	ea0c 0c02 	and.w	ip, ip, r2
 80040f0:	f8c7 c5a8 	str.w	ip, [r7, #1448]	@ 0x5a8
 80040f4:	400b      	ands	r3, r1
 80040f6:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 80040fa:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f507 61b5 	add.w	r1, r7, #1448	@ 0x5a8
 8004106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800410a:	4684      	mov	ip, r0
 800410c:	ea82 0c0c 	eor.w	ip, r2, ip
 8004110:	f8c7 c088 	str.w	ip, [r7, #136]	@ 0x88
 8004114:	404b      	eors	r3, r1
 8004116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800411a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800411e:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8004122:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = BCo ^ ((~BCu) & BCa);
 8004126:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	43d1      	mvns	r1, r2
 8004130:	f8c7 15a0 	str.w	r1, [r7, #1440]	@ 0x5a0
 8004134:	43db      	mvns	r3, r3
 8004136:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 800413a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f507 61b4 	add.w	r1, r7, #1440	@ 0x5a0
 8004146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800414a:	4684      	mov	ip, r0
 800414c:	ea0c 0c02 	and.w	ip, ip, r2
 8004150:	f8c7 c598 	str.w	ip, [r7, #1432]	@ 0x598
 8004154:	400b      	ands	r3, r1
 8004156:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 800415a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	f507 61b3 	add.w	r1, r7, #1432	@ 0x598
 8004166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800416a:	4684      	mov	ip, r0
 800416c:	ea82 0c0c 	eor.w	ip, r2, ip
 8004170:	f8c7 c080 	str.w	ip, [r7, #128]	@ 0x80
 8004174:	404b      	eors	r3, r1
 8004176:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800417a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800417e:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8004182:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = BCu ^ ((~BCa) & BCe);
 8004186:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418e:	43d1      	mvns	r1, r2
 8004190:	f8c7 1590 	str.w	r1, [r7, #1424]	@ 0x590
 8004194:	43db      	mvns	r3, r3
 8004196:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 800419a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f507 61b2 	add.w	r1, r7, #1424	@ 0x590
 80041a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041aa:	4684      	mov	ip, r0
 80041ac:	ea0c 0c02 	and.w	ip, ip, r2
 80041b0:	f8c7 c588 	str.w	ip, [r7, #1416]	@ 0x588
 80041b4:	400b      	ands	r3, r1
 80041b6:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 80041ba:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f507 61b1 	add.w	r1, r7, #1416	@ 0x588
 80041c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041ca:	4684      	mov	ip, r0
 80041cc:	ea82 0c0c 	eor.w	ip, r2, ip
 80041d0:	f8c7 c078 	str.w	ip, [r7, #120]	@ 0x78
 80041d4:	404b      	eors	r3, r1
 80041d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041d8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80041dc:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 80041e0:	e9c1 2300 	strd	r2, r3, [r1]

        Ebi ^= Di;
 80041e4:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 80041e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041ec:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	ea80 0c02 	eor.w	ip, r0, r2
 80041f8:	f8c7 c070 	str.w	ip, [r7, #112]	@ 0x70
 80041fc:	404b      	eors	r3, r1
 80041fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004200:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004204:	f507 6125 	add.w	r1, r7, #2640	@ 0xa50
 8004208:	e9c1 2300 	strd	r2, r3, [r1]
        BCa = ROL(Ebi, 62);
 800420c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004210:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 8004214:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004218:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 800421c:	6803      	ldr	r3, [r0, #0]
 800421e:	079a      	lsls	r2, r3, #30
 8004220:	680b      	ldr	r3, [r1, #0]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	4313      	orrs	r3, r2
 8004226:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004228:	680b      	ldr	r3, [r1, #0]
 800422a:	079a      	lsls	r2, r3, #30
 800422c:	6803      	ldr	r3, [r0, #0]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	4313      	orrs	r3, r2
 8004232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004234:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004238:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 800423c:	e9c1 2300 	strd	r2, r3, [r1]
        Ego ^= Do;
 8004240:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 8004244:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004248:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	ea80 0c02 	eor.w	ip, r0, r2
 8004254:	f8c7 c060 	str.w	ip, [r7, #96]	@ 0x60
 8004258:	404b      	eors	r3, r1
 800425a:	667b      	str	r3, [r7, #100]	@ 0x64
 800425c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004260:	f507 6122 	add.w	r1, r7, #2592	@ 0xa20
 8004264:	e9c1 2300 	strd	r2, r3, [r1]
        BCe = ROL(Ego, 55);
 8004268:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800426c:	f5a3 70b2 	sub.w	r0, r3, #356	@ 0x164
 8004270:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004274:	f5a3 71b4 	sub.w	r1, r3, #360	@ 0x168
 8004278:	6803      	ldr	r3, [r0, #0]
 800427a:	05da      	lsls	r2, r3, #23
 800427c:	680b      	ldr	r3, [r1, #0]
 800427e:	0a5b      	lsrs	r3, r3, #9
 8004280:	4313      	orrs	r3, r2
 8004282:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004284:	680b      	ldr	r3, [r1, #0]
 8004286:	05da      	lsls	r2, r3, #23
 8004288:	6803      	ldr	r3, [r0, #0]
 800428a:	0a5b      	lsrs	r3, r3, #9
 800428c:	4313      	orrs	r3, r2
 800428e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004290:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004294:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8004298:	e9c1 2300 	strd	r2, r3, [r1]
        Eku ^= Du;
 800429c:	f507 631f 	add.w	r3, r7, #2544	@ 0x9f0
 80042a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042a4:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	ea80 0c02 	eor.w	ip, r0, r2
 80042b0:	f8c7 c050 	str.w	ip, [r7, #80]	@ 0x50
 80042b4:	404b      	eors	r3, r1
 80042b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80042b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042bc:	f507 611f 	add.w	r1, r7, #2544	@ 0x9f0
 80042c0:	e9c1 2300 	strd	r2, r3, [r1]
        BCi = ROL(Eku, 39);
 80042c4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80042c8:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 80042cc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80042d0:	f5a3 71cc 	sub.w	r1, r3, #408	@ 0x198
 80042d4:	6803      	ldr	r3, [r0, #0]
 80042d6:	01da      	lsls	r2, r3, #7
 80042d8:	680b      	ldr	r3, [r1, #0]
 80042da:	0e5b      	lsrs	r3, r3, #25
 80042dc:	4313      	orrs	r3, r2
 80042de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042e0:	680b      	ldr	r3, [r1, #0]
 80042e2:	01da      	lsls	r2, r3, #7
 80042e4:	6803      	ldr	r3, [r0, #0]
 80042e6:	0e5b      	lsrs	r3, r3, #25
 80042e8:	4313      	orrs	r3, r2
 80042ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042f0:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80042f4:	e9c1 2300 	strd	r2, r3, [r1]
        Ema ^= Da;
 80042f8:	f607 13e8 	addw	r3, r7, #2536	@ 0x9e8
 80042fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004300:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	ea80 0c02 	eor.w	ip, r0, r2
 800430c:	f8c7 c040 	str.w	ip, [r7, #64]	@ 0x40
 8004310:	404b      	eors	r3, r1
 8004312:	647b      	str	r3, [r7, #68]	@ 0x44
 8004314:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004318:	f607 11e8 	addw	r1, r7, #2536	@ 0x9e8
 800431c:	e9c1 2300 	strd	r2, r3, [r1]
        BCo = ROL(Ema, 41);
 8004320:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004324:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8004328:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800432c:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004330:	6803      	ldr	r3, [r0, #0]
 8004332:	025a      	lsls	r2, r3, #9
 8004334:	680b      	ldr	r3, [r1, #0]
 8004336:	0ddb      	lsrs	r3, r3, #23
 8004338:	4313      	orrs	r3, r2
 800433a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800433c:	680b      	ldr	r3, [r1, #0]
 800433e:	025a      	lsls	r2, r3, #9
 8004340:	6803      	ldr	r3, [r0, #0]
 8004342:	0ddb      	lsrs	r3, r3, #23
 8004344:	4313      	orrs	r3, r2
 8004346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800434c:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8004350:	e9c1 2300 	strd	r2, r3, [r1]
        Ese ^= De;
 8004354:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8004358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800435c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	ea80 0c02 	eor.w	ip, r0, r2
 8004368:	f8c7 c030 	str.w	ip, [r7, #48]	@ 0x30
 800436c:	404b      	eors	r3, r1
 800436e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004370:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004374:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 8004378:	e9c1 2300 	strd	r2, r3, [r1]
        BCu = ROL(Ese, 2);
 800437c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004380:	f5a3 70e8 	sub.w	r0, r3, #464	@ 0x1d0
 8004384:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004388:	f5a3 71e6 	sub.w	r1, r3, #460	@ 0x1cc
 800438c:	6803      	ldr	r3, [r0, #0]
 800438e:	0f9a      	lsrs	r2, r3, #30
 8004390:	680b      	ldr	r3, [r1, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4313      	orrs	r3, r2
 8004396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004398:	680b      	ldr	r3, [r1, #0]
 800439a:	0f9a      	lsrs	r2, r3, #30
 800439c:	6803      	ldr	r3, [r0, #0]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4313      	orrs	r3, r2
 80043a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043a8:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 80043ac:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = BCa ^ ((~BCe) & BCi);
 80043b0:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	43d1      	mvns	r1, r2
 80043ba:	f8c7 1580 	str.w	r1, [r7, #1408]	@ 0x580
 80043be:	43db      	mvns	r3, r3
 80043c0:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 80043c4:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	f507 61b0 	add.w	r1, r7, #1408	@ 0x580
 80043d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043d4:	4684      	mov	ip, r0
 80043d6:	ea0c 0c02 	and.w	ip, ip, r2
 80043da:	f8c7 c578 	str.w	ip, [r7, #1400]	@ 0x578
 80043de:	400b      	ands	r3, r1
 80043e0:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 80043e4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 80043f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043f4:	4684      	mov	ip, r0
 80043f6:	ea82 0c0c 	eor.w	ip, r2, ip
 80043fa:	f8c7 c020 	str.w	ip, [r7, #32]
 80043fe:	404b      	eors	r3, r1
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
 8004402:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004406:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 800440a:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = BCe ^ ((~BCi) & BCo);
 800440e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8004412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004416:	43d1      	mvns	r1, r2
 8004418:	f8c7 1570 	str.w	r1, [r7, #1392]	@ 0x570
 800441c:	43db      	mvns	r3, r3
 800441e:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 8004422:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f507 61ae 	add.w	r1, r7, #1392	@ 0x570
 800442e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004432:	4684      	mov	ip, r0
 8004434:	ea0c 0c02 	and.w	ip, ip, r2
 8004438:	f8c7 c568 	str.w	ip, [r7, #1384]	@ 0x568
 800443c:	400b      	ands	r3, r1
 800443e:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 8004442:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 800444e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004452:	4684      	mov	ip, r0
 8004454:	ea82 0c0c 	eor.w	ip, r2, ip
 8004458:	f8c7 c018 	str.w	ip, [r7, #24]
 800445c:	404b      	eors	r3, r1
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004464:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8004468:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = BCi ^ ((~BCo) & BCu);
 800446c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	43d1      	mvns	r1, r2
 8004476:	f8c7 1560 	str.w	r1, [r7, #1376]	@ 0x560
 800447a:	43db      	mvns	r3, r3
 800447c:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
 8004480:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800448c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004490:	4684      	mov	ip, r0
 8004492:	ea0c 0c02 	and.w	ip, ip, r2
 8004496:	f8c7 c558 	str.w	ip, [r7, #1368]	@ 0x558
 800449a:	400b      	ands	r3, r1
 800449c:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 80044a0:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f507 61ab 	add.w	r1, r7, #1368	@ 0x558
 80044ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044b0:	4684      	mov	ip, r0
 80044b2:	ea82 0c0c 	eor.w	ip, r2, ip
 80044b6:	f8c7 c010 	str.w	ip, [r7, #16]
 80044ba:	404b      	eors	r3, r1
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044c2:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 80044c6:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = BCo ^ ((~BCu) & BCa);
 80044ca:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	43d1      	mvns	r1, r2
 80044d4:	f8c7 1550 	str.w	r1, [r7, #1360]	@ 0x550
 80044d8:	43db      	mvns	r3, r3
 80044da:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 80044de:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f507 61aa 	add.w	r1, r7, #1360	@ 0x550
 80044ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ee:	4684      	mov	ip, r0
 80044f0:	ea0c 0a02 	and.w	sl, ip, r2
 80044f4:	ea01 0b03 	and.w	fp, r1, r3
 80044f8:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	ea82 010a 	eor.w	r1, r2, sl
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	ea83 030b 	eor.w	r3, r3, fp
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004510:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 8004514:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = BCu ^ ((~BCa) & BCe);
 8004518:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	ea6f 0802 	mvn.w	r8, r2
 8004524:	ea6f 0903 	mvn.w	r9, r3
 8004528:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	ea08 0402 	and.w	r4, r8, r2
 8004534:	ea09 0503 	and.w	r5, r9, r3
 8004538:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	ea82 0104 	eor.w	r1, r2, r4
 8004544:	6039      	str	r1, [r7, #0]
 8004546:	406b      	eors	r3, r5
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800454e:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 8004552:	e9c1 2300 	strd	r2, r3, [r1]
    for (round = 0; round < NROUNDS; round += 2) {
 8004556:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 800455a:	3302      	adds	r3, #2
 800455c:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 8004560:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8004564:	2b17      	cmp	r3, #23
 8004566:	f77d a8eb 	ble.w	8001740 <KeccakF1600_StatePermute+0x244>
    }

    // copyToState(state, A)
    state[0] = Aba;
 800456a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800456e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	e9c1 2300 	strd	r2, r3, [r1]
    state[1] = Abe;
 8004580:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004584:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f103 0108 	add.w	r1, r3, #8
 800458e:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	e9c1 2300 	strd	r2, r3, [r1]
    state[2] = Abi;
 800459a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800459e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f103 0110 	add.w	r1, r3, #16
 80045a8:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	e9c1 2300 	strd	r2, r3, [r1]
    state[3] = Abo;
 80045b4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80045b8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f103 0118 	add.w	r1, r3, #24
 80045c2:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	e9c1 2300 	strd	r2, r3, [r1]
    state[4] = Abu;
 80045ce:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80045d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f103 0120 	add.w	r1, r3, #32
 80045dc:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	e9c1 2300 	strd	r2, r3, [r1]
    state[5] = Aga;
 80045e8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80045ec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80045f6:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	e9c1 2300 	strd	r2, r3, [r1]
    state[6] = Age;
 8004602:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004606:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004610:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	e9c1 2300 	strd	r2, r3, [r1]
    state[7] = Agi;
 800461c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004620:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800462a:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	e9c1 2300 	strd	r2, r3, [r1]
    state[8] = Ago;
 8004636:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800463a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8004644:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	e9c1 2300 	strd	r2, r3, [r1]
    state[9] = Agu;
 8004650:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004654:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800465e:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	e9c1 2300 	strd	r2, r3, [r1]
    state[10] = Aka;
 800466a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800466e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8004678:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	e9c1 2300 	strd	r2, r3, [r1]
    state[11] = Ake;
 8004684:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004688:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8004692:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	e9c1 2300 	strd	r2, r3, [r1]
    state[12] = Aki;
 800469e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80046a2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80046ac:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	e9c1 2300 	strd	r2, r3, [r1]
    state[13] = Ako;
 80046b8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80046bc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80046c6:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	e9c1 2300 	strd	r2, r3, [r1]
    state[14] = Aku;
 80046d2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80046d6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80046e0:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	e9c1 2300 	strd	r2, r3, [r1]
    state[15] = Ama;
 80046ec:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80046f0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 80046fa:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	e9c1 2300 	strd	r2, r3, [r1]
    state[16] = Ame;
 8004706:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800470a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8004714:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	e9c1 2300 	strd	r2, r3, [r1]
    state[17] = Ami;
 8004720:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004724:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 800472e:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	e9c1 2300 	strd	r2, r3, [r1]
    state[18] = Amo;
 800473a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800473e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8004748:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	e9c1 2300 	strd	r2, r3, [r1]
    state[19] = Amu;
 8004754:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004758:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8004762:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 8004766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476a:	e9c1 2300 	strd	r2, r3, [r1]
    state[20] = Asa;
 800476e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8004772:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 800477c:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	e9c1 2300 	strd	r2, r3, [r1]
    state[21] = Ase;
 8004788:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800478c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 8004796:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	e9c1 2300 	strd	r2, r3, [r1]
    state[22] = Asi;
 80047a2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80047a6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 80047b0:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	e9c1 2300 	strd	r2, r3, [r1]
    state[23] = Aso;
 80047bc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80047c0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 80047ca:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	e9c1 2300 	strd	r2, r3, [r1]
    state[24] = Asu;
 80047d6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80047da:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 80047e4:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	e9c1 2300 	strd	r2, r3, [r1]
}
 80047f0:	bf00      	nop
 80047f2:	f607 378c 	addw	r7, r7, #2956	@ 0xb8c
 80047f6:	46bd      	mov	sp, r7
 80047f8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop

08004800 <keccak_inc_init>:
 * Arguments:   - uint64_t *s_inc: pointer to input/output incremental state
 *                First 25 values represent Keccak state.
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 **************************************************/
static void keccak_inc_init(uint64_t *s_inc) {
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
    size_t i;

    for (i = 0; i < 25; ++i) {
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e00c      	b.n	8004828 <keccak_inc_init+0x28>
        s_inc[i] = 0;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	18d1      	adds	r1, r2, r3
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; ++i) {
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b18      	cmp	r3, #24
 800482c:	d9ef      	bls.n	800480e <keccak_inc_init+0xe>
    }
    s_inc[25] = 0;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr

0800484a <keccak_inc_absorb>:
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - const uint8_t *m: pointer to input to be absorbed into s
 *              - size_t mlen: length of input in bytes
 **************************************************/
static void keccak_inc_absorb(uint64_t *s_inc, uint32_t r, const uint8_t *m,
                              size_t mlen) {
 800484a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800484e:	b0b0      	sub	sp, #192	@ 0xc0
 8004850:	af00      	add	r7, sp, #0
 8004852:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 8004856:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800485a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800485e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    size_t i;

    /* Recall that s_inc[25] is the non-absorbed bytes xored into the state */
    while (mlen + s_inc[25] >= r) {
 8004862:	e0d1      	b.n	8004a08 <keccak_inc_absorb+0x1be>
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 8004864:	2300      	movs	r3, #0
 8004866:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800486a:	e098      	b.n	800499e <keccak_inc_absorb+0x154>
            /* Take the i'th byte from message
               xor with the s_inc[25] + i'th byte of the state; little-endian */
            s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 800486c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004870:	33c8      	adds	r3, #200	@ 0xc8
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800487a:	2000      	movs	r0, #0
 800487c:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004880:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 8004884:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8004888:	4641      	mov	r1, r8
 800488a:	1851      	adds	r1, r2, r1
 800488c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800488e:	4649      	mov	r1, r9
 8004890:	414b      	adcs	r3, r1
 8004892:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048a0:	4641      	mov	r1, r8
 80048a2:	08ca      	lsrs	r2, r1, #3
 80048a4:	46cc      	mov	ip, r9
 80048a6:	ea42 724c 	orr.w	r2, r2, ip, lsl #29
 80048aa:	4649      	mov	r1, r9
 80048ac:	08cb      	lsrs	r3, r1, #3
 80048ae:	4613      	mov	r3, r2
 80048b0:	00da      	lsls	r2, r3, #3
 80048b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048b6:	4413      	add	r3, r2
 80048b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048c4:	4413      	add	r3, r2
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2200      	movs	r2, #0
 80048cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048d0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048d8:	33c8      	adds	r3, #200	@ 0xc8
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80048e2:	2000      	movs	r0, #0
 80048e4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80048e8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 80048ec:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80048f0:	1851      	adds	r1, r2, r1
 80048f2:	6739      	str	r1, [r7, #112]	@ 0x70
 80048f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80048f8:	414b      	adcs	r3, r1
 80048fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80048fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	00d9      	lsls	r1, r3, #3
 8004904:	f1a1 0320 	sub.w	r3, r1, #32
 8004908:	f1c1 0220 	rsb	r2, r1, #32
 800490c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8004910:	fa00 f501 	lsl.w	r5, r0, r1
 8004914:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8004918:	fa00 f303 	lsl.w	r3, r0, r3
 800491c:	431d      	orrs	r5, r3
 800491e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004922:	fa23 f202 	lsr.w	r2, r3, r2
 8004926:	4315      	orrs	r5, r2
 8004928:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800492c:	fa03 f401 	lsl.w	r4, r3, r1
 8004930:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004934:	33c8      	adds	r3, #200	@ 0xc8
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800493e:	2000      	movs	r0, #0
 8004940:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8004944:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8004948:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800494c:	1851      	adds	r1, r2, r1
 800494e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8004952:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8004956:	414b      	adcs	r3, r1
 8004958:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8004968:	08ca      	lsrs	r2, r1, #3
 800496a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800496e:	468c      	mov	ip, r1
 8004970:	ea42 724c 	orr.w	r2, r2, ip, lsl #29
 8004974:	08cb      	lsrs	r3, r1, #3
 8004976:	4613      	mov	r3, r2
 8004978:	00da      	lsls	r2, r3, #3
 800497a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800497e:	4413      	add	r3, r2
 8004980:	ea88 0204 	eor.w	r2, r8, r4
 8004984:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004986:	ea89 0205 	eor.w	r2, r9, r5
 800498a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800498c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004990:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 0; i < r - (uint32_t)s_inc[25]; i++) {
 8004994:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004998:	3301      	adds	r3, #1
 800499a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800499e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049a2:	33c8      	adds	r3, #200	@ 0xc8
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049ac:	1a9a      	subs	r2, r3, r2
 80049ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f4ff af5a 	bcc.w	800486c <keccak_inc_absorb+0x22>
        }
        mlen -= (size_t)(r - s_inc[25]);
 80049b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049bc:	33c8      	adds	r3, #200	@ 0xc8
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049c6:	1ad2      	subs	r2, r2, r3
 80049c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049cc:	4413      	add	r3, r2
 80049ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        m += r - s_inc[25];
 80049d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049d6:	33c8      	adds	r3, #200	@ 0xc8
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049e0:	1a9a      	subs	r2, r3, r2
 80049e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049e6:	4413      	add	r3, r2
 80049e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        s_inc[25] = 0;
 80049ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049f0:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	e9c1 2300 	strd	r2, r3, [r1]

        KeccakF1600_StatePermute(s_inc);
 8004a00:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8004a04:	f7fc fd7a 	bl	80014fc <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 8004a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a10:	667a      	str	r2, [r7, #100]	@ 0x64
 8004a12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004a16:	33c8      	adds	r3, #200	@ 0xc8
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004a20:	4641      	mov	r1, r8
 8004a22:	1889      	adds	r1, r1, r2
 8004a24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a26:	4649      	mov	r1, r9
 8004a28:	eb41 0303 	adc.w	r3, r1, r3
 8004a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a32:	2200      	movs	r2, #0
 8004a34:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a36:	657a      	str	r2, [r7, #84]	@ 0x54
 8004a38:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8004a3c:	4684      	mov	ip, r0
 8004a3e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a42:	4696      	mov	lr, r2
 8004a44:	45f4      	cmp	ip, lr
 8004a46:	eb71 0303 	sbcs.w	r3, r1, r3
 8004a4a:	f4bf af0b 	bcs.w	8004864 <keccak_inc_absorb+0x1a>
    }

    for (i = 0; i < mlen; i++) {
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a54:	e08f      	b.n	8004b76 <keccak_inc_absorb+0x32c>
        s_inc[(s_inc[25] + i) >> 3] ^= (uint64_t)m[i] << (8 * ((s_inc[25] + i) & 0x07));
 8004a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004a5a:	33c8      	adds	r3, #200	@ 0xc8
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8004a64:	2000      	movs	r0, #0
 8004a66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a68:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8004a6a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004a6e:	4621      	mov	r1, r4
 8004a70:	1851      	adds	r1, r2, r1
 8004a72:	6439      	str	r1, [r7, #64]	@ 0x40
 8004a74:	4629      	mov	r1, r5
 8004a76:	414b      	adcs	r3, r1
 8004a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8004a86:	4621      	mov	r1, r4
 8004a88:	08ca      	lsrs	r2, r1, #3
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	460c      	mov	r4, r1
 8004a90:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
 8004a94:	08cb      	lsrs	r3, r1, #3
 8004a96:	4613      	mov	r3, r2
 8004a98:	00da      	lsls	r2, r3, #3
 8004a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004a9e:	4413      	add	r3, r2
 8004aa0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004aa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004aa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004aac:	4413      	add	r3, r2
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ab6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ab8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004abc:	33c8      	adds	r3, #200	@ 0xc8
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004aca:	6378      	str	r0, [r7, #52]	@ 0x34
 8004acc:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	@ 0x30
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	1851      	adds	r1, r2, r1
 8004ad4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	414b      	adcs	r3, r1
 8004ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	00d9      	lsls	r1, r3, #3
 8004ae4:	f1a1 0320 	sub.w	r3, r1, #32
 8004ae8:	f1c1 0220 	rsb	r2, r1, #32
 8004aec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004af0:	4648      	mov	r0, r9
 8004af2:	fa00 fb01 	lsl.w	fp, r0, r1
 8004af6:	4640      	mov	r0, r8
 8004af8:	fa00 f303 	lsl.w	r3, r0, r3
 8004afc:	ea4b 0b03 	orr.w	fp, fp, r3
 8004b00:	4643      	mov	r3, r8
 8004b02:	fa23 f202 	lsr.w	r2, r3, r2
 8004b06:	ea4b 0b02 	orr.w	fp, fp, r2
 8004b0a:	4643      	mov	r3, r8
 8004b0c:	fa03 fa01 	lsl.w	sl, r3, r1
 8004b10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b14:	33c8      	adds	r3, #200	@ 0xc8
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8004b1e:	2000      	movs	r0, #0
 8004b20:	6239      	str	r1, [r7, #32]
 8004b22:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b28:	4641      	mov	r1, r8
 8004b2a:	1851      	adds	r1, r2, r1
 8004b2c:	61b9      	str	r1, [r7, #24]
 8004b2e:	4649      	mov	r1, r9
 8004b30:	414b      	adcs	r3, r1
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004b40:	4641      	mov	r1, r8
 8004b42:	08ca      	lsrs	r2, r1, #3
 8004b44:	46cc      	mov	ip, r9
 8004b46:	ea42 724c 	orr.w	r2, r2, ip, lsl #29
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	08cb      	lsrs	r3, r1, #3
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00da      	lsls	r2, r3, #3
 8004b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b56:	4413      	add	r3, r2
 8004b58:	ea84 020a 	eor.w	r2, r4, sl
 8004b5c:	613a      	str	r2, [r7, #16]
 8004b5e:	ea85 020b 	eor.w	r2, r5, fp
 8004b62:	617a      	str	r2, [r7, #20]
 8004b64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b68:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 0; i < mlen; i++) {
 8004b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b70:	3301      	adds	r3, #1
 8004b72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8004b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	f4ff af69 	bcc.w	8004a56 <keccak_inc_absorb+0x20c>
    }
    s_inc[25] += mlen;
 8004b84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b88:	33c8      	adds	r3, #200	@ 0xc8
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8004b92:	2000      	movs	r0, #0
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8004b9c:	31c8      	adds	r1, #200	@ 0xc8
 8004b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	1810      	adds	r0, r2, r0
 8004ba6:	6038      	str	r0, [r7, #0]
 8004ba8:	4628      	mov	r0, r5
 8004baa:	eb43 0000 	adc.w	r0, r3, r0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004bb4:	e9c1 3400 	strd	r3, r4, [r1]
}
 8004bb8:	bf00      	nop
 8004bba:	37c0      	adds	r7, #192	@ 0xc0
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004bc2 <keccak_inc_finalize>:
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 *              - uint8_t p: domain-separation byte for different
 *                                 Keccak-derived functions
 **************************************************/
static void keccak_inc_finalize(uint64_t *s_inc, uint32_t r, uint8_t p) {
 8004bc2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bc6:	b08a      	sub	sp, #40	@ 0x28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bcc:	6239      	str	r1, [r7, #32]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	77fb      	strb	r3, [r7, #31]
    /* After keccak_inc_absorb, we are guaranteed that s_inc[25] < r,
       so we can always use one more byte for p in the current state. */
    s_inc[s_inc[25] >> 3] ^= (uint64_t)p << (8 * (s_inc[25] & 0x07));
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	33c8      	adds	r3, #200	@ 0xc8
 8004bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	08c2      	lsrs	r2, r0, #3
 8004be4:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8004be8:	08cb      	lsrs	r3, r1, #3
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf0:	4413      	add	r3, r2
 8004bf2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004bf6:	e9c7 1200 	strd	r1, r2, [r7]
 8004bfa:	7ffb      	ldrb	r3, [r7, #31]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	469a      	mov	sl, r3
 8004c00:	4693      	mov	fp, r2
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	33c8      	adds	r3, #200	@ 0xc8
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	00da      	lsls	r2, r3, #3
 8004c12:	f1a2 0120 	sub.w	r1, r2, #32
 8004c16:	f1c2 0320 	rsb	r3, r2, #32
 8004c1a:	fa0b f502 	lsl.w	r5, fp, r2
 8004c1e:	fa0a f101 	lsl.w	r1, sl, r1
 8004c22:	430d      	orrs	r5, r1
 8004c24:	fa2a f303 	lsr.w	r3, sl, r3
 8004c28:	431d      	orrs	r5, r3
 8004c2a:	fa0a f402 	lsl.w	r4, sl, r2
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	33c8      	adds	r3, #200	@ 0xc8
 8004c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	08c2      	lsrs	r2, r0, #3
 8004c40:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 8004c44:	08cb      	lsrs	r3, r1, #3
 8004c46:	4613      	mov	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c4c:	4413      	add	r3, r2
 8004c4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c52:	4608      	mov	r0, r1
 8004c54:	4060      	eors	r0, r4
 8004c56:	6138      	str	r0, [r7, #16]
 8004c58:	406a      	eors	r2, r5
 8004c5a:	617a      	str	r2, [r7, #20]
 8004c5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c60:	e9c3 1200 	strd	r1, r2, [r3]
    s_inc[(r - 1) >> 3] ^= (uint64_t)128 << (8 * ((r - 1) & 0x07));
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	08db      	lsrs	r3, r3, #3
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c6e:	4413      	add	r3, r2
 8004c70:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	00d9      	lsls	r1, r3, #3
 8004c7e:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	f1a1 0620 	sub.w	r6, r1, #32
 8004c8a:	f1c1 0020 	rsb	r0, r1, #32
 8004c8e:	fa03 f901 	lsl.w	r9, r3, r1
 8004c92:	fa02 f606 	lsl.w	r6, r2, r6
 8004c96:	ea49 0906 	orr.w	r9, r9, r6
 8004c9a:	fa22 f000 	lsr.w	r0, r2, r0
 8004c9e:	ea49 0900 	orr.w	r9, r9, r0
 8004ca2:	fa02 f801 	lsl.w	r8, r2, r1
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	08db      	lsrs	r3, r3, #3
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb0:	4413      	add	r3, r2
 8004cb2:	ea84 0208 	eor.w	r2, r4, r8
 8004cb6:	60ba      	str	r2, [r7, #8]
 8004cb8:	ea85 0209 	eor.w	r2, r5, r9
 8004cbc:	60fa      	str	r2, [r7, #12]
 8004cbe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cc2:	e9c3 1200 	strd	r1, r2, [r3]
    s_inc[25] = 0;
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004cd8:	bf00      	nop
 8004cda:	3728      	adds	r7, #40	@ 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ce2:	4770      	bx	lr

08004ce4 <keccak_inc_squeeze>:
 *                26th value represents either the number of absorbed bytes
 *                that have not been permuted, or not-yet-squeezed bytes.
 *              - uint32_t r: rate in bytes (e.g., 168 for SHAKE128)
 **************************************************/
static void keccak_inc_squeeze(uint8_t *h, size_t outlen,
                               uint64_t *s_inc, uint32_t r) {
 8004ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce8:	b09e      	sub	sp, #120	@ 0x78
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8004cee:	66b9      	str	r1, [r7, #104]	@ 0x68
 8004cf0:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cf2:	663b      	str	r3, [r7, #96]	@ 0x60
    size_t i;

    /* First consume any bytes we still have sitting around */
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004cf8:	e070      	b.n	8004ddc <keccak_inc_squeeze+0xf8>
        /* There are s_inc[25] bytes left, so r - s_inc[25] is the first
           available byte. We consume from there, i.e., up to r. */
        h[i] = (uint8_t)(s_inc[(r - s_inc[25] + i) >> 3] >> (8 * ((r - s_inc[25] + i) & 0x07)));
 8004cfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d00:	657a      	str	r2, [r7, #84]	@ 0x54
 8004d02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d04:	33c8      	adds	r3, #200	@ 0xc8
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8004d0e:	4604      	mov	r4, r0
 8004d10:	1aa4      	subs	r4, r4, r2
 8004d12:	64bc      	str	r4, [r7, #72]	@ 0x48
 8004d14:	eb61 0303 	sbc.w	r3, r1, r3
 8004d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d20:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d22:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004d26:	4623      	mov	r3, r4
 8004d28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d32:	462b      	mov	r3, r5
 8004d34:	460a      	mov	r2, r1
 8004d36:	4153      	adcs	r3, r2
 8004d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8004d46:	4621      	mov	r1, r4
 8004d48:	08ca      	lsrs	r2, r1, #3
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	460c      	mov	r4, r1
 8004d50:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
 8004d54:	08cb      	lsrs	r3, r1, #3
 8004d56:	4613      	mov	r3, r2
 8004d58:	00da      	lsls	r2, r3, #3
 8004d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d5c:	4413      	add	r3, r2
 8004d5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d64:	2200      	movs	r2, #0
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d68:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d6c:	33c8      	adds	r3, #200	@ 0xc8
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8004d76:	4684      	mov	ip, r0
 8004d78:	ebbc 0c02 	subs.w	ip, ip, r2
 8004d7c:	f8c7 c058 	str.w	ip, [r7, #88]	@ 0x58
 8004d80:	eb61 0303 	sbc.w	r3, r1, r3
 8004d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d88:	2200      	movs	r2, #0
 8004d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d94:	4602      	mov	r2, r0
 8004d96:	189b      	adds	r3, r3, r2
 8004d98:	623b      	str	r3, [r7, #32]
 8004d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d9c:	460a      	mov	r2, r1
 8004d9e:	4153      	adcs	r3, r2
 8004da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	00d9      	lsls	r1, r3, #3
 8004daa:	f1c1 0320 	rsb	r3, r1, #32
 8004dae:	f1a1 0220 	sub.w	r2, r1, #32
 8004db2:	fa24 fa01 	lsr.w	sl, r4, r1
 8004db6:	fa05 f303 	lsl.w	r3, r5, r3
 8004dba:	ea4a 0a03 	orr.w	sl, sl, r3
 8004dbe:	fa25 f202 	lsr.w	r2, r5, r2
 8004dc2:	ea4a 0a02 	orr.w	sl, sl, r2
 8004dc6:	fa25 fb01 	lsr.w	fp, r5, r1
 8004dca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dce:	441a      	add	r2, r3
 8004dd0:	fa5f f38a 	uxtb.w	r3, sl
 8004dd4:	7013      	strb	r3, [r2, #0]
    for (i = 0; i < outlen && i < s_inc[25]; i++) {
 8004dd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004dd8:	3301      	adds	r3, #1
 8004dda:	677b      	str	r3, [r7, #116]	@ 0x74
 8004ddc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004dde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d20f      	bcs.n	8004e04 <keccak_inc_squeeze+0x120>
 8004de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004de6:	2200      	movs	r2, #0
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	61fa      	str	r2, [r7, #28]
 8004dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dee:	33c8      	adds	r3, #200	@ 0xc8
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004df8:	4604      	mov	r4, r0
 8004dfa:	4294      	cmp	r4, r2
 8004dfc:	eb71 0303 	sbcs.w	r3, r1, r3
 8004e00:	f4ff af7b 	bcc.w	8004cfa <keccak_inc_squeeze+0x16>
    }
    h += i;
 8004e04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e08:	4413      	add	r3, r2
 8004e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    outlen -= i;
 8004e0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	66bb      	str	r3, [r7, #104]	@ 0x68
    s_inc[25] -= i;
 8004e14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e16:	33c8      	adds	r3, #200	@ 0xc8
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004e1e:	2000      	movs	r0, #0
 8004e20:	6139      	str	r1, [r7, #16]
 8004e22:	6178      	str	r0, [r7, #20]
 8004e24:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004e26:	31c8      	adds	r1, #200	@ 0xc8
 8004e28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	1a10      	subs	r0, r2, r0
 8004e30:	60b8      	str	r0, [r7, #8]
 8004e32:	4628      	mov	r0, r5
 8004e34:	eb63 0300 	sbc.w	r3, r3, r0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004e3e:	e9c1 3400 	strd	r3, r4, [r1]

    /* Then squeeze the remaining necessary blocks */
    while (outlen > 0) {
 8004e42:	e045      	b.n	8004ed0 <keccak_inc_squeeze+0x1ec>
        KeccakF1600_StatePermute(s_inc);
 8004e44:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004e46:	f7fc fb59 	bl	80014fc <KeccakF1600_StatePermute>

        for (i = 0; i < outlen && i < r; i++) {
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e4e:	e023      	b.n	8004e98 <keccak_inc_squeeze+0x1b4>
            h[i] = (uint8_t)(s_inc[i >> 3] >> (8 * (i & 0x07)));
 8004e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e52:	08db      	lsrs	r3, r3, #3
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e58:	4413      	add	r3, r2
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004e60:	f001 0107 	and.w	r1, r1, #7
 8004e64:	00c9      	lsls	r1, r1, #3
 8004e66:	f1c1 0420 	rsb	r4, r1, #32
 8004e6a:	f1a1 0020 	sub.w	r0, r1, #32
 8004e6e:	fa22 f801 	lsr.w	r8, r2, r1
 8004e72:	fa03 f404 	lsl.w	r4, r3, r4
 8004e76:	ea48 0804 	orr.w	r8, r8, r4
 8004e7a:	fa23 f000 	lsr.w	r0, r3, r0
 8004e7e:	ea48 0800 	orr.w	r8, r8, r0
 8004e82:	fa23 f901 	lsr.w	r9, r3, r1
 8004e86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e8a:	4413      	add	r3, r2
 8004e8c:	fa5f f288 	uxtb.w	r2, r8
 8004e90:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < outlen && i < r; i++) {
 8004e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e94:	3301      	adds	r3, #1
 8004e96:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e98:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d203      	bcs.n	8004ea8 <keccak_inc_squeeze+0x1c4>
 8004ea0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d3d3      	bcc.n	8004e50 <keccak_inc_squeeze+0x16c>
        }
        h += i;
 8004ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004eaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eac:	4413      	add	r3, r2
 8004eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
        outlen -= i;
 8004eb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	66bb      	str	r3, [r7, #104]	@ 0x68
        s_inc[25] = r - i;
 8004eb8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ebc:	1ad2      	subs	r2, r2, r3
 8004ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ec0:	33c8      	adds	r3, #200	@ 0xc8
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	603a      	str	r2, [r7, #0]
 8004ec6:	6079      	str	r1, [r7, #4]
 8004ec8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ecc:	e9c3 1200 	strd	r1, r2, [r3]
    while (outlen > 0) {
 8004ed0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1b6      	bne.n	8004e44 <keccak_inc_squeeze+0x160>
    }
}
 8004ed6:	bf00      	nop
 8004ed8:	bf00      	nop
 8004eda:	3778      	adds	r7, #120	@ 0x78
 8004edc:	46bd      	mov	sp, r7
 8004ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ee2 <shake256_inc_init>:

void shake128_inc_ctx_release(shake128incctx *state) {
    free(state->ctx);
}

void shake256_inc_init(shake256incctx *state) {
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
    state->ctx = malloc(PQC_SHAKEINCCTX_BYTES);
 8004eea:	20d0      	movs	r0, #208	@ 0xd0
 8004eec:	f005 f9c6 	bl	800a27c <malloc>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	601a      	str	r2, [r3, #0]
    if (state->ctx == NULL) {
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <shake256_inc_init+0x24>
        exit(111);
 8004f00:	206f      	movs	r0, #111	@ 0x6f
 8004f02:	f005 f9a9 	bl	800a258 <exit>
    }
    keccak_inc_init(state->ctx);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fc78 	bl	8004800 <keccak_inc_init>
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <shake256_inc_absorb>:

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	2188      	movs	r1, #136	@ 0x88
 8004f2e:	f7ff fc8c 	bl	800484a <keccak_inc_absorb>
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	221f      	movs	r2, #31
 8004f48:	2188      	movs	r1, #136	@ 0x88
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fe39 	bl	8004bc2 <keccak_inc_finalize>
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	2388      	movs	r3, #136	@ 0x88
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f7ff feb9 	bl	8004ce4 <keccak_inc_squeeze>
}
 8004f72:	bf00      	nop
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <shake256_inc_ctx_release>:
        exit(111);
    }
    memcpy(dest->ctx, src->ctx, PQC_SHAKEINCCTX_BYTES);
}

void shake256_inc_ctx_release(shake256incctx *state) {
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
    free(state->ctx);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f005 f980 	bl	800a28c <free>
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <trailing_zero_bits_count>:
 * @brief Computes the number of trailing zero bits.
 *
 * @returns The number of trailing zero bits in a.
 * @param[in] a An operand
 */
static uint16_t trailing_zero_bits_count(uint16_t a) {
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	80fb      	strh	r3, [r7, #6]
    uint16_t tmp = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	81fb      	strh	r3, [r7, #14]
    uint16_t mask = 0xFFFF;
 8004fa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004fa6:	81bb      	strh	r3, [r7, #12]
    for (size_t i = 0; i < 14; ++i) {
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	e029      	b.n	8005002 <trailing_zero_bits_count+0x6e>
        tmp += ((1 - ((a >> i) & 0x0001)) & mask);
 8004fae:	88fa      	ldrh	r2, [r7, #6]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	fa42 f303 	asr.w	r3, r2, r3
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	bf0c      	ite	eq
 8004fbe:	2301      	moveq	r3, #1
 8004fc0:	2300      	movne	r3, #0
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	b21a      	sxth	r2, r3
 8004fc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	b21b      	sxth	r3, r3
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	89fb      	ldrh	r3, [r7, #14]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	81fb      	strh	r3, [r7, #14]
        mask &= - (1 - ((a >> i) & 0x0001));
 8004fd6:	88fa      	ldrh	r2, [r7, #6]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	fa42 f303 	asr.w	r3, r2, r3
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bf0c      	ite	eq
 8004fe6:	2301      	moveq	r3, #1
 8004fe8:	2300      	movne	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	425b      	negs	r3, r3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	b21a      	sxth	r2, r3
 8004ff2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	b21b      	sxth	r3, r3
 8004ffa:	81bb      	strh	r3, [r7, #12]
    for (size_t i = 0; i < 14; ++i) {
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b0d      	cmp	r3, #13
 8005006:	d9d2      	bls.n	8004fae <trailing_zero_bits_count+0x1a>
    }
    return tmp;
 8005008:	89fb      	ldrh	r3, [r7, #14]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr

08005014 <gf_reduce>:
 * Reduces polynomial x modulo primitive polynomial GF_POLY.
 * @returns x mod GF_POLY
 * @param[in] x Polynomial of degree less than 64
 * @param[in] deg_x The degree of polynomial x
 */
static uint16_t gf_reduce(uint64_t x, size_t deg_x) {
 8005014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005018:	b08f      	sub	sp, #60	@ 0x3c
 800501a:	af00      	add	r7, sp, #0
 800501c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8005020:	60fa      	str	r2, [r7, #12]
    uint16_t z1, z2, rmdr, dist;
    uint64_t mod;

    // Deduce the number of steps of reduction
    size_t steps = CEIL_DIVIDE(deg_x - (PARAM_M - 1), PARAM_GF_POLY_M2);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	3b04      	subs	r3, #4
 8005026:	089b      	lsrs	r3, r3, #2
 8005028:	61fb      	str	r3, [r7, #28]

    // Reduce
    for (size_t i = 0; i < steps; ++i) {
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
 800502e:	e064      	b.n	80050fa <gf_reduce+0xe6>
        mod = x >> PARAM_M;
 8005030:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	0a02      	lsrs	r2, r0, #8
 800503e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005042:	0a0b      	lsrs	r3, r1, #8
 8005044:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        x &= (1 << PARAM_M) - 1;
 8005048:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800504c:	f002 03ff 	and.w	r3, r2, #255	@ 0xff
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	2300      	movs	r3, #0
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        x ^= mod;
 800505e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005062:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005066:	ea80 0802 	eor.w	r8, r0, r2
 800506a:	ea81 0903 	eor.w	r9, r1, r3
 800506e:	e9c7 8904 	strd	r8, r9, [r7, #16]

        z1 = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	86fb      	strh	r3, [r7, #54]	@ 0x36
        rmdr = PARAM_GF_POLY ^ 1;
 8005076:	f44f 738e 	mov.w	r3, #284	@ 0x11c
 800507a:	86bb      	strh	r3, [r7, #52]	@ 0x34
        for (size_t j = PARAM_GF_POLY_WT - 2; j; --j) {
 800507c:	2303      	movs	r3, #3
 800507e:	623b      	str	r3, [r7, #32]
 8005080:	e035      	b.n	80050ee <gf_reduce+0xda>
            z2 = trailing_zero_bits_count(rmdr);
 8005082:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff ff85 	bl	8004f94 <trailing_zero_bits_count>
 800508a:	4603      	mov	r3, r0
 800508c:	837b      	strh	r3, [r7, #26]
            dist = z2 - z1;
 800508e:	8b7a      	ldrh	r2, [r7, #26]
 8005090:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	833b      	strh	r3, [r7, #24]
            mod <<= dist;
 8005096:	8b39      	ldrh	r1, [r7, #24]
 8005098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800509c:	f1a1 0620 	sub.w	r6, r1, #32
 80050a0:	f1c1 0020 	rsb	r0, r1, #32
 80050a4:	fa03 f501 	lsl.w	r5, r3, r1
 80050a8:	fa02 f606 	lsl.w	r6, r2, r6
 80050ac:	4335      	orrs	r5, r6
 80050ae:	fa22 f000 	lsr.w	r0, r2, r0
 80050b2:	4305      	orrs	r5, r0
 80050b4:	fa02 f401 	lsl.w	r4, r2, r1
 80050b8:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
            x ^= mod;
 80050bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80050c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050c4:	ea80 0a02 	eor.w	sl, r0, r2
 80050c8:	ea81 0b03 	eor.w	fp, r1, r3
 80050cc:	e9c7 ab04 	strd	sl, fp, [r7, #16]
            rmdr ^= 1 << z2;
 80050d0:	8b7b      	ldrh	r3, [r7, #26]
 80050d2:	2201      	movs	r2, #1
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	b21a      	sxth	r2, r3
 80050da:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80050de:	4053      	eors	r3, r2
 80050e0:	b21b      	sxth	r3, r3
 80050e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
            z1 = z2;
 80050e4:	8b7b      	ldrh	r3, [r7, #26]
 80050e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        for (size_t j = PARAM_GF_POLY_WT - 2; j; --j) {
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1c6      	bne.n	8005082 <gf_reduce+0x6e>
    for (size_t i = 0; i < steps; ++i) {
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	3301      	adds	r3, #1
 80050f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d396      	bcc.n	8005030 <gf_reduce+0x1c>
        }
    }

    return (uint16_t)x;
 8005102:	8a3b      	ldrh	r3, [r7, #16]
}
 8005104:	4618      	mov	r0, r3
 8005106:	373c      	adds	r7, #60	@ 0x3c
 8005108:	46bd      	mov	sp, r7
 800510a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800510e <gf_carryless_mul>:
 *
 * @param[out] The polynomial c = a * b
 * @param[in] a The first polynomial
 * @param[in] b The second polynomial
 */
static void gf_carryless_mul(uint8_t c[2], uint8_t a, uint8_t b) {
 800510e:	b480      	push	{r7}
 8005110:	b08d      	sub	sp, #52	@ 0x34
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	70fb      	strb	r3, [r7, #3]
 800511a:	4613      	mov	r3, r2
 800511c:	70bb      	strb	r3, [r7, #2]
    uint16_t h = 0, l = 0, g = 0, u[4];
 800511e:	2300      	movs	r3, #0
 8005120:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005122:	2300      	movs	r3, #0
 8005124:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005126:	2300      	movs	r3, #0
 8005128:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t tmp1, tmp2;
    uint16_t mask;
    u[0] = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	813b      	strh	r3, [r7, #8]
    u[1] = b & 0x7F;
 800512e:	78bb      	ldrb	r3, [r7, #2]
 8005130:	b29b      	uxth	r3, r3
 8005132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005136:	b29b      	uxth	r3, r3
 8005138:	817b      	strh	r3, [r7, #10]
    u[2] = u[1] << 1;
 800513a:	897b      	ldrh	r3, [r7, #10]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	b29b      	uxth	r3, r3
 8005140:	81bb      	strh	r3, [r7, #12]
    u[3] = u[2] ^ u[1];
 8005142:	89ba      	ldrh	r2, [r7, #12]
 8005144:	897b      	ldrh	r3, [r7, #10]
 8005146:	4053      	eors	r3, r2
 8005148:	b29b      	uxth	r3, r3
 800514a:	81fb      	strh	r3, [r7, #14]
    tmp1 = a & 3;
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	61bb      	str	r3, [r7, #24]

    for (size_t i = 0; i < 4; i++) {
 8005154:	2300      	movs	r3, #0
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
 8005158:	e019      	b.n	800518e <gf_carryless_mul+0x80>
        tmp2 = (uint32_t)(tmp1 - i);
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	613b      	str	r3, [r7, #16]
        g ^= (u[i] & (uint32_t)(0 - (1 - ((uint32_t)(tmp2 | (0 - tmp2)) >> 31))));
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	3330      	adds	r3, #48	@ 0x30
 8005168:	443b      	add	r3, r7
 800516a:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4259      	negs	r1, r3
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	430b      	orrs	r3, r1
 8005176:	17db      	asrs	r3, r3, #31
 8005178:	b29b      	uxth	r3, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	b29b      	uxth	r3, r3
 800517e:	4013      	ands	r3, r2
 8005180:	b29a      	uxth	r2, r3
 8005182:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005184:	4053      	eors	r3, r2
 8005186:	857b      	strh	r3, [r7, #42]	@ 0x2a
    for (size_t i = 0; i < 4; i++) {
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	3301      	adds	r3, #1
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	2b03      	cmp	r3, #3
 8005192:	d9e2      	bls.n	800515a <gf_carryless_mul+0x4c>
    }

    l = g;
 8005194:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005196:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    h = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    for (size_t i = 2; i < 8; i += 2) {
 800519c:	2302      	movs	r3, #2
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	e041      	b.n	8005226 <gf_carryless_mul+0x118>
        g = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
        tmp1 = (a >> i) & 3;
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	fa42 f303 	asr.w	r3, r2, r3
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	61bb      	str	r3, [r7, #24]
        for (size_t j = 0; j < 4; ++j) {
 80051b4:	2300      	movs	r3, #0
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	e019      	b.n	80051ee <gf_carryless_mul+0xe0>
            tmp2 = (uint32_t)(tmp1 - j);
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	613b      	str	r3, [r7, #16]
            g ^= (u[j] & (uint32_t)(0 - (1 - ((uint32_t)(tmp2 | (0 - tmp2)) >> 31))));
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	3330      	adds	r3, #48	@ 0x30
 80051c8:	443b      	add	r3, r7
 80051ca:	f833 2c28 	ldrh.w	r2, [r3, #-40]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4259      	negs	r1, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	430b      	orrs	r3, r1
 80051d6:	17db      	asrs	r3, r3, #31
 80051d8:	b29b      	uxth	r3, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4013      	ands	r3, r2
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80051e4:	4053      	eors	r3, r2
 80051e6:	857b      	strh	r3, [r7, #42]	@ 0x2a
        for (size_t j = 0; j < 4; ++j) {
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	3301      	adds	r3, #1
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	2b03      	cmp	r3, #3
 80051f2:	d9e2      	bls.n	80051ba <gf_carryless_mul+0xac>
        }

        l ^= g << i;
 80051f4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	b21a      	sxth	r2, r3
 80051fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005202:	4053      	eors	r3, r2
 8005204:	b21b      	sxth	r3, r3
 8005206:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        h ^= g >> (8 - i);
 8005208:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f1c3 0308 	rsb	r3, r3, #8
 8005210:	fa42 f303 	asr.w	r3, r2, r3
 8005214:	b21a      	sxth	r2, r3
 8005216:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800521a:	4053      	eors	r3, r2
 800521c:	b21b      	sxth	r3, r3
 800521e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    for (size_t i = 2; i < 8; i += 2) {
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	3302      	adds	r3, #2
 8005224:	623b      	str	r3, [r7, #32]
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	2b07      	cmp	r3, #7
 800522a:	d9ba      	bls.n	80051a2 <gf_carryless_mul+0x94>
    }

    mask = (-((b >> 7) & 1));
 800522c:	78bb      	ldrb	r3, [r7, #2]
 800522e:	09db      	lsrs	r3, r3, #7
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	b29b      	uxth	r3, r3
 8005238:	425b      	negs	r3, r3
 800523a:	82fb      	strh	r3, [r7, #22]
    l ^= ((a << 7) & mask);
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	01db      	lsls	r3, r3, #7
 8005240:	b21a      	sxth	r2, r3
 8005242:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005246:	4013      	ands	r3, r2
 8005248:	b21a      	sxth	r2, r3
 800524a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800524e:	4053      	eors	r3, r2
 8005250:	b21b      	sxth	r3, r3
 8005252:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    h ^= ((a >> 1) & mask);
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	b2db      	uxtb	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	8afb      	ldrh	r3, [r7, #22]
 800525e:	4013      	ands	r3, r2
 8005260:	b29b      	uxth	r3, r3
 8005262:	b21a      	sxth	r2, r3
 8005264:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8005268:	4053      	eors	r3, r2
 800526a:	b21b      	sxth	r3, r3
 800526c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    c[0] = (uint8_t)l;
 800526e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005270:	b2da      	uxtb	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	701a      	strb	r2, [r3, #0]
    c[1] = (uint8_t)h;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3301      	adds	r3, #1
 800527a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]
}
 8005280:	bf00      	nop
 8005282:	3734      	adds	r7, #52	@ 0x34
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr

0800528a <PQCLEAN_HQC128_CLEAN_gf_mul>:
 * Multiplies two elements of GF(2^GF_M).
 * @returns the product a*b
 * @param[in] a Element of GF(2^GF_M)
 * @param[in] b Element of GF(2^GF_M)
 */
uint16_t PQCLEAN_HQC128_CLEAN_gf_mul(uint16_t a, uint16_t b) {
 800528a:	b5b0      	push	{r4, r5, r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	4603      	mov	r3, r0
 8005292:	460a      	mov	r2, r1
 8005294:	80fb      	strh	r3, [r7, #6]
 8005296:	4613      	mov	r3, r2
 8005298:	80bb      	strh	r3, [r7, #4]
    uint8_t c[2] = {0};
 800529a:	2300      	movs	r3, #0
 800529c:	81bb      	strh	r3, [r7, #12]
    gf_carryless_mul(c, (uint8_t) a, (uint8_t) b);
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	b2d9      	uxtb	r1, r3
 80052a2:	88bb      	ldrh	r3, [r7, #4]
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	f107 030c 	add.w	r3, r7, #12
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ff2f 	bl	800510e <gf_carryless_mul>
    uint16_t tmp = c[0] ^ (c[1] << 8);
 80052b0:	7b3b      	ldrb	r3, [r7, #12]
 80052b2:	b21a      	sxth	r2, r3
 80052b4:	7b7b      	ldrb	r3, [r7, #13]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	b21b      	sxth	r3, r3
 80052ba:	4053      	eors	r3, r2
 80052bc:	b21b      	sxth	r3, r3
 80052be:	81fb      	strh	r3, [r7, #14]
    return gf_reduce(tmp, 2 * (PARAM_M - 1));
 80052c0:	89fb      	ldrh	r3, [r7, #14]
 80052c2:	2200      	movs	r2, #0
 80052c4:	461c      	mov	r4, r3
 80052c6:	4615      	mov	r5, r2
 80052c8:	220e      	movs	r2, #14
 80052ca:	4620      	mov	r0, r4
 80052cc:	4629      	mov	r1, r5
 80052ce:	f7ff fea1 	bl	8005014 <gf_reduce>
 80052d2:	4603      	mov	r3, r0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bdb0      	pop	{r4, r5, r7, pc}

080052dc <PQCLEAN_HQC128_CLEAN_gf_square>:
/**
 * @brief Squares an element of GF(2^PARAM_M).
 * @returns a^2
 * @param[in] a Element of GF(2^PARAM_M)
 */
uint16_t PQCLEAN_HQC128_CLEAN_gf_square(uint16_t a) {
 80052dc:	b5b0      	push	{r4, r5, r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	80fb      	strh	r3, [r7, #6]
    uint32_t b = a;
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	617b      	str	r3, [r7, #20]
    uint32_t s = b & 1;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
    for (size_t i = 1; i < PARAM_M; ++i) {
 80052f2:	2301      	movs	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	e010      	b.n	800531a <PQCLEAN_HQC128_CLEAN_gf_square+0x3e>
        b <<= 1;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	617b      	str	r3, [r7, #20]
        s ^= b & (1 << 2 * i);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2201      	movs	r2, #1
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	461a      	mov	r2, r3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	4013      	ands	r3, r2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4053      	eors	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
    for (size_t i = 1; i < PARAM_M; ++i) {
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b07      	cmp	r3, #7
 800531e:	d9eb      	bls.n	80052f8 <PQCLEAN_HQC128_CLEAN_gf_square+0x1c>
    }

    return gf_reduce(s, 2 * (PARAM_M - 1));
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2200      	movs	r2, #0
 8005324:	461c      	mov	r4, r3
 8005326:	4615      	mov	r5, r2
 8005328:	220e      	movs	r2, #14
 800532a:	4620      	mov	r0, r4
 800532c:	4629      	mov	r1, r5
 800532e:	f7ff fe71 	bl	8005014 <gf_reduce>
 8005332:	4603      	mov	r3, r0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bdb0      	pop	{r4, r5, r7, pc}

0800533c <PQCLEAN_HQC128_CLEAN_gf_inverse>:
 * @brief Computes the inverse of an element of GF(2^PARAM_M),
 * using the addition chain 1 2 3 4 7 11 15 30 60 120 127 254
 * @returns the inverse of a if a != 0 or 0 if a = 0
 * @param[in] a Element of GF(2^PARAM_M)
 */
uint16_t PQCLEAN_HQC128_CLEAN_gf_inverse(uint16_t a) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	80fb      	strh	r3, [r7, #6]
    uint16_t inv = a;
 8005346:	88fb      	ldrh	r3, [r7, #6]
 8005348:	81fb      	strh	r3, [r7, #14]
    uint16_t tmp1, tmp2;

    inv = PQCLEAN_HQC128_CLEAN_gf_square(a); /* a^2 */
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff ffc5 	bl	80052dc <PQCLEAN_HQC128_CLEAN_gf_square>
 8005352:	4603      	mov	r3, r0
 8005354:	81fb      	strh	r3, [r7, #14]
    tmp1 = PQCLEAN_HQC128_CLEAN_gf_mul(inv, a); /* a^3 */
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	89fb      	ldrh	r3, [r7, #14]
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff ff94 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8005362:	4603      	mov	r3, r0
 8005364:	81bb      	strh	r3, [r7, #12]
    inv = PQCLEAN_HQC128_CLEAN_gf_square(inv); /* a^4 */
 8005366:	89fb      	ldrh	r3, [r7, #14]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ffb7 	bl	80052dc <PQCLEAN_HQC128_CLEAN_gf_square>
 800536e:	4603      	mov	r3, r0
 8005370:	81fb      	strh	r3, [r7, #14]
    tmp2 = PQCLEAN_HQC128_CLEAN_gf_mul(inv, tmp1); /* a^7 */
 8005372:	89ba      	ldrh	r2, [r7, #12]
 8005374:	89fb      	ldrh	r3, [r7, #14]
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff ff86 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 800537e:	4603      	mov	r3, r0
 8005380:	817b      	strh	r3, [r7, #10]
    tmp1 = PQCLEAN_HQC128_CLEAN_gf_mul(inv, tmp2); /* a^11 */
 8005382:	897a      	ldrh	r2, [r7, #10]
 8005384:	89fb      	ldrh	r3, [r7, #14]
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff ff7e 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 800538e:	4603      	mov	r3, r0
 8005390:	81bb      	strh	r3, [r7, #12]
    inv = PQCLEAN_HQC128_CLEAN_gf_mul(tmp1, inv); /* a^15 */
 8005392:	89fa      	ldrh	r2, [r7, #14]
 8005394:	89bb      	ldrh	r3, [r7, #12]
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff ff76 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 800539e:	4603      	mov	r3, r0
 80053a0:	81fb      	strh	r3, [r7, #14]
    inv = PQCLEAN_HQC128_CLEAN_gf_square(inv); /* a^30 */
 80053a2:	89fb      	ldrh	r3, [r7, #14]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff99 	bl	80052dc <PQCLEAN_HQC128_CLEAN_gf_square>
 80053aa:	4603      	mov	r3, r0
 80053ac:	81fb      	strh	r3, [r7, #14]
    inv = PQCLEAN_HQC128_CLEAN_gf_square(inv); /* a^60 */
 80053ae:	89fb      	ldrh	r3, [r7, #14]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff ff93 	bl	80052dc <PQCLEAN_HQC128_CLEAN_gf_square>
 80053b6:	4603      	mov	r3, r0
 80053b8:	81fb      	strh	r3, [r7, #14]
    inv = PQCLEAN_HQC128_CLEAN_gf_square(inv); /* a^120 */
 80053ba:	89fb      	ldrh	r3, [r7, #14]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7ff ff8d 	bl	80052dc <PQCLEAN_HQC128_CLEAN_gf_square>
 80053c2:	4603      	mov	r3, r0
 80053c4:	81fb      	strh	r3, [r7, #14]
    inv = PQCLEAN_HQC128_CLEAN_gf_mul(inv, tmp2); /* a^127 */
 80053c6:	897a      	ldrh	r2, [r7, #10]
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	4611      	mov	r1, r2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ff5c 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 80053d2:	4603      	mov	r3, r0
 80053d4:	81fb      	strh	r3, [r7, #14]
    inv = PQCLEAN_HQC128_CLEAN_gf_square(inv); /* a^254 */
 80053d6:	89fb      	ldrh	r3, [r7, #14]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff ff7f 	bl	80052dc <PQCLEAN_HQC128_CLEAN_gf_square>
 80053de:	4603      	mov	r3, r0
 80053e0:	81fb      	strh	r3, [r7, #14]
    return inv;
 80053e2:	89fb      	ldrh	r3, [r7, #14]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <base_mul>:
 *
 * @param[out] c The result c = a * b
 * @param[in] a The first value a
 * @param[in] b The second value b
 */
static void base_mul(uint64_t *c, uint64_t a, uint64_t b) {
 80053ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053f0:	f5ad 7d28 	sub.w	sp, sp, #672	@ 0x2a0
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80053fa:	e9c7 236e 	strd	r2, r3, [r7, #440]	@ 0x1b8
    uint64_t h = 0;
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	e9c7 23a6 	strd	r2, r3, [r7, #664]	@ 0x298
    uint64_t l = 0;
 800540a:	f04f 0200 	mov.w	r2, #0
 800540e:	f04f 0300 	mov.w	r3, #0
 8005412:	e9c7 23a4 	strd	r2, r3, [r7, #656]	@ 0x290
    uint64_t g;
    uint64_t u[16] = {0};
 8005416:	f507 70f4 	add.w	r0, r7, #488	@ 0x1e8
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	461a      	mov	r2, r3
 800541e:	2100      	movs	r1, #0
 8005420:	f005 f8ea 	bl	800a5f8 <memset>
    uint64_t mask_tab[4] = {0};
 8005424:	f507 70e4 	add.w	r0, r7, #456	@ 0x1c8
 8005428:	2320      	movs	r3, #32
 800542a:	461a      	mov	r2, r3
 800542c:	2100      	movs	r1, #0
 800542e:	f005 f8e3 	bl	800a5f8 <memset>
    uint64_t tmp1, tmp2;

    // Step 1
    u[0] = 0;
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	e9c7 237a 	strd	r2, r3, [r7, #488]	@ 0x1e8
    u[1] = b & (((uint64_t)1 << (64 - 4)) - 1);
 800543e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8005442:	4690      	mov	r8, r2
 8005444:	f023 4970 	bic.w	r9, r3, #4026531840	@ 0xf0000000
 8005448:	e9c7 897c 	strd	r8, r9, [r7, #496]	@ 0x1f0
    u[2] = u[1] << 1;
 800544c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8005450:	eb12 0a02 	adds.w	sl, r2, r2
 8005454:	eb43 0b03 	adc.w	fp, r3, r3
 8005458:	4652      	mov	r2, sl
 800545a:	465b      	mov	r3, fp
 800545c:	e9c7 237e 	strd	r2, r3, [r7, #504]	@ 0x1f8
    u[3] = u[2] ^ u[1];
 8005460:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	@ 0x1f8
 8005464:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8005468:	ea80 0402 	eor.w	r4, r0, r2
 800546c:	ea81 0503 	eor.w	r5, r1, r3
 8005470:	e9c7 4580 	strd	r4, r5, [r7, #512]	@ 0x200
    u[4] = u[2] << 1;
 8005474:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8005478:	1891      	adds	r1, r2, r2
 800547a:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 800547e:	415b      	adcs	r3, r3
 8005480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005484:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8005488:	e9c7 2382 	strd	r2, r3, [r7, #520]	@ 0x208
    u[5] = u[4] ^ u[1];
 800548c:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8005490:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8005494:	ea80 0402 	eor.w	r4, r0, r2
 8005498:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 800549c:	404b      	eors	r3, r1
 800549e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80054a2:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 80054a6:	e9c7 3484 	strd	r3, r4, [r7, #528]	@ 0x210
    u[6] = u[3] << 1;
 80054aa:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80054ae:	1891      	adds	r1, r2, r2
 80054b0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80054b4:	415b      	adcs	r3, r3
 80054b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054ba:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80054be:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
    u[7] = u[6] ^ u[1];
 80054c2:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 80054c6:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80054ca:	ea80 0402 	eor.w	r4, r0, r2
 80054ce:	f8c7 4190 	str.w	r4, [r7, #400]	@ 0x190
 80054d2:	404b      	eors	r3, r1
 80054d4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80054d8:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	@ 0x190
 80054dc:	e9c7 3488 	strd	r3, r4, [r7, #544]	@ 0x220
    u[8] = u[4] << 1;
 80054e0:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80054ea:	415b      	adcs	r3, r3
 80054ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80054f4:	e9c7 238a 	strd	r2, r3, [r7, #552]	@ 0x228
    u[9] = u[8] ^ u[1];
 80054f8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 80054fc:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8005500:	ea80 0402 	eor.w	r4, r0, r2
 8005504:	f8c7 4188 	str.w	r4, [r7, #392]	@ 0x188
 8005508:	404b      	eors	r3, r1
 800550a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800550e:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 8005512:	e9c7 348c 	strd	r3, r4, [r7, #560]	@ 0x230
    u[10] = u[5] << 1;
 8005516:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 800551a:	1891      	adds	r1, r2, r2
 800551c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005520:	415b      	adcs	r3, r3
 8005522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005526:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800552a:	e9c7 238e 	strd	r2, r3, [r7, #568]	@ 0x238
    u[11] = u[10] ^ u[1];
 800552e:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 8005532:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8005536:	ea80 0402 	eor.w	r4, r0, r2
 800553a:	f8c7 4180 	str.w	r4, [r7, #384]	@ 0x180
 800553e:	404b      	eors	r3, r1
 8005540:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8005544:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	@ 0x180
 8005548:	e9c7 3490 	strd	r3, r4, [r7, #576]	@ 0x240
    u[12] = u[6] << 1;
 800554c:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 8005550:	1891      	adds	r1, r2, r2
 8005552:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8005556:	415b      	adcs	r3, r3
 8005558:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800555c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005560:	e9c7 2392 	strd	r2, r3, [r7, #584]	@ 0x248
    u[13] = u[12] ^ u[1];
 8005564:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	@ 0x248
 8005568:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 800556c:	ea80 0402 	eor.w	r4, r0, r2
 8005570:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8005574:	404b      	eors	r3, r1
 8005576:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800557a:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 800557e:	e9c7 3494 	strd	r3, r4, [r7, #592]	@ 0x250
    u[14] = u[7] << 1;
 8005582:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8005586:	1891      	adds	r1, r2, r2
 8005588:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800558c:	415b      	adcs	r3, r3
 800558e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005592:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8005596:	e9c7 2396 	strd	r2, r3, [r7, #600]	@ 0x258
    u[15] = u[14] ^ u[1];
 800559a:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 800559e:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80055a2:	ea80 0402 	eor.w	r4, r0, r2
 80055a6:	f8c7 4170 	str.w	r4, [r7, #368]	@ 0x170
 80055aa:	404b      	eors	r3, r1
 80055ac:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80055b0:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	@ 0x170
 80055b4:	e9c7 3498 	strd	r3, r4, [r7, #608]	@ 0x260

    g = 0;
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9c7 23a2 	strd	r2, r3, [r7, #648]	@ 0x288
    tmp1 = a & 0x0f;
 80055c4:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 80055c8:	f002 030f 	and.w	r3, r2, #15
 80055cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055ce:	2300      	movs	r3, #0
 80055d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055d2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80055d6:	e9c7 349c 	strd	r3, r4, [r7, #624]	@ 0x270

    for (size_t i = 0; i < 16; ++i) {
 80055da:	2300      	movs	r3, #0
 80055dc:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 80055e0:	e05f      	b.n	80056a2 <base_mul+0x2b6>
        tmp2 = tmp1 - i;
 80055e2:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80055ec:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80055f0:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 80055f4:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 80055f8:	4604      	mov	r4, r0
 80055fa:	1b14      	subs	r4, r2, r4
 80055fc:	673c      	str	r4, [r7, #112]	@ 0x70
 80055fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005602:	677b      	str	r3, [r7, #116]	@ 0x74
 8005604:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8005608:	e9c7 349a 	strd	r3, r4, [r7, #616]	@ 0x268
        g ^= (u[i] & (uint64_t)(0 - (1 - ((uint64_t)(tmp2 | (0 - tmp2)) >> 63))));
 800560c:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	33e8      	adds	r3, #232	@ 0xe8
 8005614:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8005618:	4413      	add	r3, r2
 800561a:	3bb8      	subs	r3, #184	@ 0xb8
 800561c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005620:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8005624:	2100      	movs	r1, #0
 8005626:	4250      	negs	r0, r2
 8005628:	f8c7 0160 	str.w	r0, [r7, #352]	@ 0x160
 800562c:	eb61 0303 	sbc.w	r3, r1, r3
 8005630:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8005634:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8005638:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 800563c:	4684      	mov	ip, r0
 800563e:	ea4c 0c02 	orr.w	ip, ip, r2
 8005642:	f8c7 c158 	str.w	ip, [r7, #344]	@ 0x158
 8005646:	430b      	orrs	r3, r1
 8005648:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800564c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8005650:	f04f 0000 	mov.w	r0, #0
 8005654:	f04f 0100 	mov.w	r1, #0
 8005658:	17d8      	asrs	r0, r3, #31
 800565a:	17d9      	asrs	r1, r3, #31
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	43d1      	mvns	r1, r2
 8005662:	f8c7 1150 	str.w	r1, [r7, #336]	@ 0x150
 8005666:	43db      	mvns	r3, r3
 8005668:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800566c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8005670:	4611      	mov	r1, r2
 8005672:	4021      	ands	r1, r4
 8005674:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8005678:	402b      	ands	r3, r5
 800567a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800567e:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 8005682:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8005686:	4604      	mov	r4, r0
 8005688:	4054      	eors	r4, r2
 800568a:	66bc      	str	r4, [r7, #104]	@ 0x68
 800568c:	404b      	eors	r3, r1
 800568e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005690:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8005694:	e9c7 34a2 	strd	r3, r4, [r7, #648]	@ 0x288
    for (size_t i = 0; i < 16; ++i) {
 8005698:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800569c:	3301      	adds	r3, #1
 800569e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 80056a2:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 80056a6:	2b0f      	cmp	r3, #15
 80056a8:	d99b      	bls.n	80055e2 <base_mul+0x1f6>
    }

    l = g;
 80056aa:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 80056ae:	e9c7 23a4 	strd	r2, r3, [r7, #656]	@ 0x290
    h = 0;
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	e9c7 23a6 	strd	r2, r3, [r7, #664]	@ 0x298

    // Step 2
    for (size_t i = 4; i < 64; i += 4) {
 80056be:	2304      	movs	r3, #4
 80056c0:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 80056c4:	e0f1      	b.n	80058aa <base_mul+0x4be>
        g = 0;
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	e9c7 23a2 	strd	r2, r3, [r7, #648]	@ 0x288
        tmp1 = (a >> i) & 0x0f;
 80056d2:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 80056d6:	f8d7 4280 	ldr.w	r4, [r7, #640]	@ 0x280
 80056da:	f1c4 0120 	rsb	r1, r4, #32
 80056de:	f1a4 0020 	sub.w	r0, r4, #32
 80056e2:	fa22 f504 	lsr.w	r5, r2, r4
 80056e6:	f8c7 51b0 	str.w	r5, [r7, #432]	@ 0x1b0
 80056ea:	fa03 f101 	lsl.w	r1, r3, r1
 80056ee:	f8d7 51b0 	ldr.w	r5, [r7, #432]	@ 0x1b0
 80056f2:	430d      	orrs	r5, r1
 80056f4:	f8c7 51b0 	str.w	r5, [r7, #432]	@ 0x1b0
 80056f8:	fa23 f000 	lsr.w	r0, r3, r0
 80056fc:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8005700:	4301      	orrs	r1, r0
 8005702:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 8005706:	40e3      	lsrs	r3, r4
 8005708:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800570c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	663b      	str	r3, [r7, #96]	@ 0x60
 8005716:	2300      	movs	r3, #0
 8005718:	667b      	str	r3, [r7, #100]	@ 0x64
 800571a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800571e:	e9c7 349c 	strd	r3, r4, [r7, #624]	@ 0x270
        for (size_t j = 0; j < 16; ++j) {
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8005728:	e05f      	b.n	80057ea <base_mul+0x3fe>
            tmp2 = tmp1 - j;
 800572a:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005734:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 8005738:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 800573c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8005740:	4604      	mov	r4, r0
 8005742:	1b14      	subs	r4, r2, r4
 8005744:	65bc      	str	r4, [r7, #88]	@ 0x58
 8005746:	eb63 0301 	sbc.w	r3, r3, r1
 800574a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800574c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8005750:	e9c7 349a 	strd	r3, r4, [r7, #616]	@ 0x268
            g ^= (u[j] & (uint64_t)(0 - (1 - ((uint64_t)(tmp2 | (0 - tmp2)) >> 63))));
 8005754:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	33e8      	adds	r3, #232	@ 0xe8
 800575c:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8005760:	4413      	add	r3, r2
 8005762:	3bb8      	subs	r3, #184	@ 0xb8
 8005764:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005768:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 800576c:	2100      	movs	r1, #0
 800576e:	4250      	negs	r0, r2
 8005770:	f8c7 0138 	str.w	r0, [r7, #312]	@ 0x138
 8005774:	eb61 0303 	sbc.w	r3, r1, r3
 8005778:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800577c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8005780:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8005784:	4684      	mov	ip, r0
 8005786:	ea4c 0c02 	orr.w	ip, ip, r2
 800578a:	f8c7 c130 	str.w	ip, [r7, #304]	@ 0x130
 800578e:	430b      	orrs	r3, r1
 8005790:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005794:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8005798:	f04f 0000 	mov.w	r0, #0
 800579c:	f04f 0100 	mov.w	r1, #0
 80057a0:	17d8      	asrs	r0, r3, #31
 80057a2:	17d9      	asrs	r1, r3, #31
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	43d1      	mvns	r1, r2
 80057aa:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 80057ae:	43db      	mvns	r3, r3
 80057b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80057b4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80057b8:	4611      	mov	r1, r2
 80057ba:	4021      	ands	r1, r4
 80057bc:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 80057c0:	402b      	ands	r3, r5
 80057c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80057c6:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 80057ca:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80057ce:	4604      	mov	r4, r0
 80057d0:	4054      	eors	r4, r2
 80057d2:	653c      	str	r4, [r7, #80]	@ 0x50
 80057d4:	404b      	eors	r3, r1
 80057d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80057d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80057dc:	e9c7 34a2 	strd	r3, r4, [r7, #648]	@ 0x288
        for (size_t j = 0; j < 16; ++j) {
 80057e0:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80057e4:	3301      	adds	r3, #1
 80057e6:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80057ea:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 80057ee:	2b0f      	cmp	r3, #15
 80057f0:	d99b      	bls.n	800572a <base_mul+0x33e>
        }

        l ^= g << i;
 80057f2:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 80057f6:	f8d7 4280 	ldr.w	r4, [r7, #640]	@ 0x280
 80057fa:	f1a4 0120 	sub.w	r1, r4, #32
 80057fe:	f1c4 0020 	rsb	r0, r4, #32
 8005802:	fa03 f504 	lsl.w	r5, r3, r4
 8005806:	f8c7 51ac 	str.w	r5, [r7, #428]	@ 0x1ac
 800580a:	fa02 f101 	lsl.w	r1, r2, r1
 800580e:	f8d7 51ac 	ldr.w	r5, [r7, #428]	@ 0x1ac
 8005812:	430d      	orrs	r5, r1
 8005814:	f8c7 51ac 	str.w	r5, [r7, #428]	@ 0x1ac
 8005818:	fa22 f000 	lsr.w	r0, r2, r0
 800581c:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8005820:	4301      	orrs	r1, r0
 8005822:	f8c7 11ac 	str.w	r1, [r7, #428]	@ 0x1ac
 8005826:	fa02 f304 	lsl.w	r3, r2, r4
 800582a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800582e:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8005832:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8005836:	4604      	mov	r4, r0
 8005838:	4054      	eors	r4, r2
 800583a:	64bc      	str	r4, [r7, #72]	@ 0x48
 800583c:	404b      	eors	r3, r1
 800583e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005840:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8005844:	e9c7 34a4 	strd	r3, r4, [r7, #656]	@ 0x290
        h ^= g >> (64 - i);
 8005848:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 800584c:	f1c3 0440 	rsb	r4, r3, #64	@ 0x40
 8005850:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 8005854:	f1c4 0120 	rsb	r1, r4, #32
 8005858:	f1a4 0020 	sub.w	r0, r4, #32
 800585c:	fa22 f504 	lsr.w	r5, r2, r4
 8005860:	f8c7 51a0 	str.w	r5, [r7, #416]	@ 0x1a0
 8005864:	fa03 f101 	lsl.w	r1, r3, r1
 8005868:	f8d7 51a0 	ldr.w	r5, [r7, #416]	@ 0x1a0
 800586c:	430d      	orrs	r5, r1
 800586e:	f8c7 51a0 	str.w	r5, [r7, #416]	@ 0x1a0
 8005872:	fa23 f000 	lsr.w	r0, r3, r0
 8005876:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 800587a:	4301      	orrs	r1, r0
 800587c:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 8005880:	40e3      	lsrs	r3, r4
 8005882:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8005886:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 800588a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 800588e:	4604      	mov	r4, r0
 8005890:	4054      	eors	r4, r2
 8005892:	643c      	str	r4, [r7, #64]	@ 0x40
 8005894:	404b      	eors	r3, r1
 8005896:	647b      	str	r3, [r7, #68]	@ 0x44
 8005898:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800589c:	e9c7 34a6 	strd	r3, r4, [r7, #664]	@ 0x298
    for (size_t i = 4; i < 64; i += 4) {
 80058a0:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80058a4:	3304      	adds	r3, #4
 80058a6:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 80058aa:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
 80058ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80058b0:	f67f af09 	bls.w	80056c6 <base_mul+0x2da>
    }

    // Step 3
    mask_tab [0] = 0 - ((b >> 60) & 1);
 80058b4:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 80058b8:	f04f 0000 	mov.w	r0, #0
 80058bc:	f04f 0100 	mov.w	r1, #0
 80058c0:	0f18      	lsrs	r0, r3, #28
 80058c2:	2100      	movs	r1, #0
 80058c4:	f000 0301 	and.w	r3, r0, #1
 80058c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80058cc:	2500      	movs	r5, #0
 80058ce:	f8c7 511c 	str.w	r5, [r7, #284]	@ 0x11c
 80058d2:	2300      	movs	r3, #0
 80058d4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80058d8:	4602      	mov	r2, r0
 80058da:	4252      	negs	r2, r2
 80058dc:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 80058e0:	460a      	mov	r2, r1
 80058e2:	eb63 0302 	sbc.w	r3, r3, r2
 80058e6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80058ea:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80058ee:	e9c7 3472 	strd	r3, r4, [r7, #456]	@ 0x1c8
    mask_tab [1] = 0 - ((b >> 61) & 1);
 80058f2:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 80058f6:	f04f 0000 	mov.w	r0, #0
 80058fa:	f04f 0100 	mov.w	r1, #0
 80058fe:	0f58      	lsrs	r0, r3, #29
 8005900:	2100      	movs	r1, #0
 8005902:	f000 0301 	and.w	r3, r0, #1
 8005906:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800590a:	f8c7 510c 	str.w	r5, [r7, #268]	@ 0x10c
 800590e:	2300      	movs	r3, #0
 8005910:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8005914:	4602      	mov	r2, r0
 8005916:	4252      	negs	r2, r2
 8005918:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 800591c:	460a      	mov	r2, r1
 800591e:	eb63 0302 	sbc.w	r3, r3, r2
 8005922:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005926:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 800592a:	e9c7 3474 	strd	r3, r4, [r7, #464]	@ 0x1d0
    mask_tab [2] = 0 - ((b >> 62) & 1);
 800592e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f04f 0100 	mov.w	r1, #0
 800593a:	0f98      	lsrs	r0, r3, #30
 800593c:	2100      	movs	r1, #0
 800593e:	f000 0301 	and.w	r3, r0, #1
 8005942:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005946:	f8c7 50fc 	str.w	r5, [r7, #252]	@ 0xfc
 800594a:	2300      	movs	r3, #0
 800594c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8005950:	4602      	mov	r2, r0
 8005952:	4252      	negs	r2, r2
 8005954:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8005958:	460a      	mov	r2, r1
 800595a:	eb63 0302 	sbc.w	r3, r3, r2
 800595e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005962:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8005966:	e9c7 3476 	strd	r3, r4, [r7, #472]	@ 0x1d8
    mask_tab [3] = 0 - ((b >> 63) & 1);
 800596a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 800596e:	f04f 0000 	mov.w	r0, #0
 8005972:	f04f 0100 	mov.w	r1, #0
 8005976:	17d8      	asrs	r0, r3, #31
 8005978:	17d9      	asrs	r1, r3, #31
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	e9c7 2378 	strd	r2, r3, [r7, #480]	@ 0x1e0

    l ^= ((a << 60) & mask_tab[0]);
 8005982:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8005986:	f04f 0000 	mov.w	r0, #0
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	0711      	lsls	r1, r2, #28
 8005990:	2000      	movs	r0, #0
 8005992:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8005996:	ea00 0402 	and.w	r4, r0, r2
 800599a:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 800599e:	400b      	ands	r3, r1
 80059a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059a4:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 80059a8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80059ac:	4604      	mov	r4, r0
 80059ae:	4054      	eors	r4, r2
 80059b0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80059b2:	4059      	eors	r1, r3
 80059b4:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80059b6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80059ba:	e9c7 34a4 	strd	r3, r4, [r7, #656]	@ 0x290
    h ^= ((a >> 4) & mask_tab[0]);
 80059be:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 80059c2:	f04f 0000 	mov.w	r0, #0
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	0910      	lsrs	r0, r2, #4
 80059cc:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 80059d0:	0919      	lsrs	r1, r3, #4
 80059d2:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80059d6:	ea00 0402 	and.w	r4, r0, r2
 80059da:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80059de:	400b      	ands	r3, r1
 80059e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059e4:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 80059e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059ec:	4604      	mov	r4, r0
 80059ee:	4054      	eors	r4, r2
 80059f0:	633c      	str	r4, [r7, #48]	@ 0x30
 80059f2:	4059      	eors	r1, r3
 80059f4:	6379      	str	r1, [r7, #52]	@ 0x34
 80059f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80059fa:	e9c7 34a6 	strd	r3, r4, [r7, #664]	@ 0x298

    l ^= ((a << 61) & mask_tab[1]);
 80059fe:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f04f 0100 	mov.w	r1, #0
 8005a0a:	0751      	lsls	r1, r2, #29
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8005a12:	ea00 0402 	and.w	r4, r0, r2
 8005a16:	f8c7 40d8 	str.w	r4, [r7, #216]	@ 0xd8
 8005a1a:	400b      	ands	r3, r1
 8005a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005a20:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8005a24:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8005a28:	4604      	mov	r4, r0
 8005a2a:	4054      	eors	r4, r2
 8005a2c:	62bc      	str	r4, [r7, #40]	@ 0x28
 8005a2e:	4059      	eors	r1, r3
 8005a30:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a32:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8005a36:	e9c7 34a4 	strd	r3, r4, [r7, #656]	@ 0x290
    h ^= ((a >> 3) & mask_tab[1]);
 8005a3a:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8005a3e:	f04f 0000 	mov.w	r0, #0
 8005a42:	f04f 0100 	mov.w	r1, #0
 8005a46:	08d0      	lsrs	r0, r2, #3
 8005a48:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 8005a4c:	08d9      	lsrs	r1, r3, #3
 8005a4e:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8005a52:	ea00 0402 	and.w	r4, r0, r2
 8005a56:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8005a5a:	400b      	ands	r3, r1
 8005a5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a60:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8005a64:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8005a68:	4604      	mov	r4, r0
 8005a6a:	4054      	eors	r4, r2
 8005a6c:	623c      	str	r4, [r7, #32]
 8005a6e:	4059      	eors	r1, r3
 8005a70:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a72:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005a76:	e9c7 34a6 	strd	r3, r4, [r7, #664]	@ 0x298

    l ^= ((a << 62) & mask_tab[2]);
 8005a7a:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8005a7e:	f04f 0000 	mov.w	r0, #0
 8005a82:	f04f 0100 	mov.w	r1, #0
 8005a86:	0791      	lsls	r1, r2, #30
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8005a8e:	ea00 0402 	and.w	r4, r0, r2
 8005a92:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8005a96:	400b      	ands	r3, r1
 8005a98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a9c:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8005aa0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4054      	eors	r4, r2
 8005aa8:	61bc      	str	r4, [r7, #24]
 8005aaa:	4059      	eors	r1, r3
 8005aac:	61f9      	str	r1, [r7, #28]
 8005aae:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005ab2:	e9c7 34a4 	strd	r3, r4, [r7, #656]	@ 0x290
    h ^= ((a >> 2) & mask_tab[2]);
 8005ab6:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8005aba:	f04f 0000 	mov.w	r0, #0
 8005abe:	f04f 0100 	mov.w	r1, #0
 8005ac2:	0890      	lsrs	r0, r2, #2
 8005ac4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8005ac8:	0899      	lsrs	r1, r3, #2
 8005aca:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8005ace:	ea00 0402 	and.w	r4, r0, r2
 8005ad2:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 8005ad6:	400b      	ands	r3, r1
 8005ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005adc:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8005ae0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	4054      	eors	r4, r2
 8005ae8:	613c      	str	r4, [r7, #16]
 8005aea:	4059      	eors	r1, r3
 8005aec:	6179      	str	r1, [r7, #20]
 8005aee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005af2:	e9c7 34a6 	strd	r3, r4, [r7, #664]	@ 0x298

    l ^= ((a << 63) & mask_tab[3]);
 8005af6:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	07c3      	lsls	r3, r0, #31
 8005b04:	2200      	movs	r2, #0
 8005b06:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8005b0a:	ea02 0400 	and.w	r4, r2, r0
 8005b0e:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8005b12:	400b      	ands	r3, r1
 8005b14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b18:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8005b1c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8005b20:	4604      	mov	r4, r0
 8005b22:	4054      	eors	r4, r2
 8005b24:	60bc      	str	r4, [r7, #8]
 8005b26:	4059      	eors	r1, r3
 8005b28:	60f9      	str	r1, [r7, #12]
 8005b2a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005b2e:	e9c7 34a4 	strd	r3, r4, [r7, #656]	@ 0x290
    h ^= ((a >> 1) & mask_tab[3]);
 8005b32:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	0842      	lsrs	r2, r0, #1
 8005b40:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8005b44:	084b      	lsrs	r3, r1, #1
 8005b46:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8005b4a:	ea02 0400 	and.w	r4, r2, r0
 8005b4e:	f8c7 40b0 	str.w	r4, [r7, #176]	@ 0xb0
 8005b52:	400b      	ands	r3, r1
 8005b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b58:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8005b5c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b60:	4604      	mov	r4, r0
 8005b62:	4054      	eors	r4, r2
 8005b64:	603c      	str	r4, [r7, #0]
 8005b66:	4059      	eors	r1, r3
 8005b68:	6079      	str	r1, [r7, #4]
 8005b6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b6e:	e9c7 34a6 	strd	r3, r4, [r7, #664]	@ 0x298

    c[0] = l;
 8005b72:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 8005b76:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8005b7a:	e9c1 2300 	strd	r2, r3, [r1]
    c[1] = h;
 8005b7e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8005b82:	f103 0108 	add.w	r1, r3, #8
 8005b86:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8005b8a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8005b8e:	bf00      	nop
 8005b90:	f507 7728 	add.w	r7, r7, #672	@ 0x2a0
 8005b94:	46bd      	mov	sp, r7
 8005b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b9a <karatsuba_add1>:

static void karatsuba_add1(uint64_t *alh, uint64_t *blh, const uint64_t *a, const uint64_t *b, size_t size_l, size_t size_h) {
 8005b9a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size_h; ++i) {
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	e034      	b.n	8005c1a <karatsuba_add1+0x80>
        alh[i] = a[i] ^ a[i + size_l];
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	4413      	add	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	697e      	ldr	r6, [r7, #20]
 8005bce:	00f6      	lsls	r6, r6, #3
 8005bd0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8005bd4:	4466      	add	r6, ip
 8005bd6:	ea80 0402 	eor.w	r4, r0, r2
 8005bda:	ea81 0503 	eor.w	r5, r1, r3
 8005bde:	e9c6 4500 	strd	r4, r5, [r6]
        blh[i] = b[i] ^ b[i + size_l];
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	4413      	add	r3, r2
 8005bea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	697e      	ldr	r6, [r7, #20]
 8005c00:	00f6      	lsls	r6, r6, #3
 8005c02:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8005c06:	4466      	add	r6, ip
 8005c08:	ea80 0802 	eor.w	r8, r0, r2
 8005c0c:	ea81 0903 	eor.w	r9, r1, r3
 8005c10:	e9c6 8900 	strd	r8, r9, [r6]
    for (size_t i = 0; i < size_h; ++i) {
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3301      	adds	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d3c6      	bcc.n	8005bb0 <karatsuba_add1+0x16>
    }

    if (size_h < size_l) {
 8005c22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d217      	bcs.n	8005c5a <karatsuba_add1+0xc0>
        alh[size_h] = a[size_h];
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c34:	00d2      	lsls	r2, r2, #3
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	4411      	add	r1, r2
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	e9c1 2300 	strd	r2, r3, [r1]
        blh[size_h] = b[size_h];
 8005c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	4413      	add	r3, r2
 8005c4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c4c:	00d2      	lsls	r2, r2, #3
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4411      	add	r1, r2
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	e9c1 2300 	strd	r2, r3, [r1]
    }
}
 8005c5a:	bf00      	nop
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8005c64:	4770      	bx	lr

08005c66 <karatsuba_add2>:

static void karatsuba_add2(uint64_t *o, uint64_t *tmp1, const uint64_t *tmp2, size_t size_l, size_t size_h) {
 8005c66:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c6a:	b08a      	sub	sp, #40	@ 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6178      	str	r0, [r7, #20]
 8005c70:	6139      	str	r1, [r7, #16]
 8005c72:	60fa      	str	r2, [r7, #12]
 8005c74:	60bb      	str	r3, [r7, #8]
    for (size_t i = 0; i < (2 * size_l); ++i) {
 8005c76:	2300      	movs	r3, #0
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c7a:	e019      	b.n	8005cb0 <karatsuba_add2+0x4a>
        tmp1[i] = tmp1[i] ^ o[i];
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4413      	add	r3, r2
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8005c96:	00f6      	lsls	r6, r6, #3
 8005c98:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8005c9c:	4466      	add	r6, ip
 8005c9e:	ea80 0a02 	eor.w	sl, r0, r2
 8005ca2:	ea81 0b03 	eor.w	fp, r1, r3
 8005ca6:	e9c6 ab00 	strd	sl, fp, [r6]
    for (size_t i = 0; i < (2 * size_l); ++i) {
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	3301      	adds	r3, #1
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d3e0      	bcc.n	8005c7c <karatsuba_add2+0x16>
    }

    for (size_t i = 0; i < ( 2 * size_h); ++i) {
 8005cba:	2300      	movs	r3, #0
 8005cbc:	623b      	str	r3, [r7, #32]
 8005cbe:	e019      	b.n	8005cf4 <karatsuba_add2+0x8e>
        tmp1[i] = tmp1[i] ^ tmp2[i];
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	6a3e      	ldr	r6, [r7, #32]
 8005cda:	00f6      	lsls	r6, r6, #3
 8005cdc:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8005ce0:	4466      	add	r6, ip
 8005ce2:	ea80 0802 	eor.w	r8, r0, r2
 8005ce6:	ea81 0903 	eor.w	r9, r1, r3
 8005cea:	e9c6 8900 	strd	r8, r9, [r6]
    for (size_t i = 0; i < ( 2 * size_h); ++i) {
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	623b      	str	r3, [r7, #32]
 8005cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	6a3a      	ldr	r2, [r7, #32]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d3e0      	bcc.n	8005cc0 <karatsuba_add2+0x5a>
    }

    for (size_t i = 0; i <  (2 * size_l); ++i) {
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61fb      	str	r3, [r7, #28]
 8005d02:	e020      	b.n	8005d46 <karatsuba_add2+0xe0>
        o[i + size_l] = o[i + size_l] ^ tmp1[i];
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4413      	add	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4413      	add	r3, r2
 8005d10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d20:	69fe      	ldr	r6, [r7, #28]
 8005d22:	607e      	str	r6, [r7, #4]
 8005d24:	68be      	ldr	r6, [r7, #8]
 8005d26:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8005d2a:	4466      	add	r6, ip
 8005d2c:	00f6      	lsls	r6, r6, #3
 8005d2e:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8005d32:	4466      	add	r6, ip
 8005d34:	ea80 0402 	eor.w	r4, r0, r2
 8005d38:	ea81 0503 	eor.w	r5, r1, r3
 8005d3c:	e9c6 4500 	strd	r4, r5, [r6]
    for (size_t i = 0; i <  (2 * size_l); ++i) {
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d3d9      	bcc.n	8005d04 <karatsuba_add2+0x9e>
    }
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	3728      	adds	r7, #40	@ 0x28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d5c:	4770      	bx	lr

08005d5e <karatsuba>:
 * @param[in] a Polynomial
 * @param[in] b Polynomial
 * @param[in] size Length of polynomial
 * @param[in] stack Length of polynomial
 */
static void karatsuba(uint64_t *o, const uint64_t *a, const uint64_t *b, size_t size, uint64_t *stack) {
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b08e      	sub	sp, #56	@ 0x38
 8005d62:	af02      	add	r7, sp, #8
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	603b      	str	r3, [r7, #0]
    size_t size_l, size_h;
    const uint64_t *ah, *bh;

    if (size == 1) {
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d10d      	bne.n	8005d8e <karatsuba+0x30>
        base_mul(o, a[0], b[0]);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	e9cd 2300 	strd	r2, r3, [sp]
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff fb30 	bl	80053ec <base_mul>
        return;
 8005d8c:	e050      	b.n	8005e30 <karatsuba+0xd2>
    }

    size_h = size / 2;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_l = (size + 1) / 2;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	3301      	adds	r3, #1
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

    uint64_t *alh = stack;
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint64_t *blh = alh + size_l;
 8005da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da6:	4413      	add	r3, r2
 8005da8:	623b      	str	r3, [r7, #32]
    uint64_t *tmp1 = blh + size_l;
 8005daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	4413      	add	r3, r2
 8005db2:	61fb      	str	r3, [r7, #28]
    uint64_t *tmp2 = o + 2 * size_l;
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]

    stack += 4 * size_l;
 8005dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc0:	015b      	lsls	r3, r3, #5
 8005dc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dc4:	4413      	add	r3, r2
 8005dc6:	63bb      	str	r3, [r7, #56]	@ 0x38

    ah = a + size_l;
 8005dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	4413      	add	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
    bh = b + size_l;
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	4413      	add	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]

    karatsuba(o, a, b, size_l, stack);
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff ffb9 	bl	8005d5e <karatsuba>

    karatsuba(tmp2, ah, bh, size_h, stack);
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	6979      	ldr	r1, [r7, #20]
 8005df6:	69b8      	ldr	r0, [r7, #24]
 8005df8:	f7ff ffb1 	bl	8005d5e <karatsuba>

    karatsuba_add1(alh, blh, a, b, size_l, size_h);
 8005dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	6a39      	ldr	r1, [r7, #32]
 8005e0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e0c:	f7ff fec5 	bl	8005b9a <karatsuba_add1>

    karatsuba(tmp1, alh, blh, size_l, stack);
 8005e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	6a3a      	ldr	r2, [r7, #32]
 8005e18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e1a:	69f8      	ldr	r0, [r7, #28]
 8005e1c:	f7ff ff9f 	bl	8005d5e <karatsuba>

    karatsuba_add2(o, tmp1, tmp2, size_l, size_h);
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	69f9      	ldr	r1, [r7, #28]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7ff ff1b 	bl	8005c66 <karatsuba_add2>
}
 8005e30:	3730      	adds	r7, #48	@ 0x30
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <reduce>:
 * This function computes the modular reduction of the polynomial a(x)
 *
 * @param[in] a Pointer to the polynomial a(x)
 * @param[out] o Pointer to the result
 */
static void reduce(uint64_t *o, const uint64_t *a) {
 8005e36:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005e3a:	b089      	sub	sp, #36	@ 0x24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
    uint64_t r;
    uint64_t carry;

    for (size_t i = 0; i < VEC_N_SIZE_64; ++i) {
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	e03e      	b.n	8005ec6 <reduce+0x90>
        r = a[i + VEC_N_SIZE_64 - 1] >> (PARAM_N & 0x3F);
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8005e4e:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	4413      	add	r3, r2
 8005e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e5c:	f04f 0200 	mov.w	r2, #0
 8005e60:	f04f 0300 	mov.w	r3, #0
 8005e64:	0942      	lsrs	r2, r0, #5
 8005e66:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8005e6a:	094b      	lsrs	r3, r1, #5
 8005e6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        carry = a[i + VEC_N_SIZE_64] << (64 - (PARAM_N & 0x3F));
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f203 1315 	addw	r3, r3, #277	@ 0x115
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	06c3      	lsls	r3, r0, #27
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        o[i] = a[i] ^ r ^ carry;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	4413      	add	r3, r2
 8005e98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ea0:	ea80 0402 	eor.w	r4, r0, r2
 8005ea4:	ea81 0503 	eor.w	r5, r1, r3
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	18d1      	adds	r1, r2, r3
 8005eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eb4:	ea84 0802 	eor.w	r8, r4, r2
 8005eb8:	ea85 0903 	eor.w	r9, r5, r3
 8005ebc:	e9c1 8900 	strd	r8, r9, [r1]
    for (size_t i = 0; i < VEC_N_SIZE_64; ++i) {
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8005ecc:	d9bc      	bls.n	8005e48 <reduce+0x12>
    }

    o[VEC_N_SIZE_64 - 1] &= RED_MASK;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	f501 610a 	add.w	r1, r1, #2208	@ 0x8a0
 8005ede:	f002 0a1f 	and.w	sl, r2, #31
 8005ee2:	f04f 0b00 	mov.w	fp, #0
 8005ee6:	e9c1 ab00 	strd	sl, fp, [r1]
}
 8005eea:	bf00      	nop
 8005eec:	3724      	adds	r7, #36	@ 0x24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005ef4:	4770      	bx	lr

08005ef6 <PQCLEAN_HQC128_CLEAN_vect_mul>:
 *
 * @param[out] o Product of <b>v1</b> and <b>v2</b>
 * @param[in] v1 Pointer to the first polynomial
 * @param[in] v2 Pointer to the second polynomial
 */
void PQCLEAN_HQC128_CLEAN_vect_mul(uint64_t *o, const uint64_t *v1, const uint64_t *v2) {
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	f5ad 4dad 	sub.w	sp, sp, #22144	@ 0x5680
 8005efc:	b08a      	sub	sp, #40	@ 0x28
 8005efe:	af02      	add	r7, sp, #8
 8005f00:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8005f04:	f2a3 6394 	subw	r3, r3, #1684	@ 0x694
 8005f08:	6018      	str	r0, [r3, #0]
 8005f0a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8005f0e:	f5a3 63d3 	sub.w	r3, r3, #1688	@ 0x698
 8005f12:	6019      	str	r1, [r3, #0]
 8005f14:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8005f18:	f2a3 639c 	subw	r3, r3, #1692	@ 0x69c
 8005f1c:	601a      	str	r2, [r3, #0]
    uint64_t stack[VEC_N_SIZE_64 << 3] = {0};
 8005f1e:	f507 53b5 	add.w	r3, r7, #5792	@ 0x16a0
 8005f22:	f5a3 63a8 	sub.w	r3, r3, #1344	@ 0x540
 8005f26:	4618      	mov	r0, r3
 8005f28:	f244 5340 	movw	r3, #17728	@ 0x4540
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2100      	movs	r1, #0
 8005f30:	f004 fb62 	bl	800a5f8 <memset>
    uint64_t o_karat[VEC_N_SIZE_64 << 1] = {0};
 8005f34:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8005f38:	f5a3 63d2 	sub.w	r3, r3, #1680	@ 0x690
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f241 1350 	movw	r3, #4432	@ 0x1150
 8005f42:	461a      	mov	r2, r3
 8005f44:	2100      	movs	r1, #0
 8005f46:	f004 fb57 	bl	800a5f8 <memset>

    karatsuba(o_karat, v1, v2, VEC_N_SIZE_64, stack);
 8005f4a:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8005f4e:	f2a3 629c 	subw	r2, r3, #1692	@ 0x69c
 8005f52:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8005f56:	f5a3 61d3 	sub.w	r1, r3, #1688	@ 0x698
 8005f5a:	f107 0020 	add.w	r0, r7, #32
 8005f5e:	3810      	subs	r0, #16
 8005f60:	f507 538d 	add.w	r3, r7, #4512	@ 0x11a0
 8005f64:	3b40      	subs	r3, #64	@ 0x40
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	f240 1315 	movw	r3, #277	@ 0x115
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	6809      	ldr	r1, [r1, #0]
 8005f70:	f7ff fef5 	bl	8005d5e <karatsuba>
    reduce(o, o_karat);
 8005f74:	f107 0320 	add.w	r3, r7, #32
 8005f78:	3b10      	subs	r3, #16
 8005f7a:	f507 62d4 	add.w	r2, r7, #1696	@ 0x6a0
 8005f7e:	f2a2 6294 	subw	r2, r2, #1684	@ 0x694
 8005f82:	4619      	mov	r1, r3
 8005f84:	6810      	ldr	r0, [r2, #0]
 8005f86:	f7ff ff56 	bl	8005e36 <reduce>
}
 8005f8a:	bf00      	nop
 8005f8c:	f507 47ad 	add.w	r7, r7, #22144	@ 0x5680
 8005f90:	3720      	adds	r7, #32
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <PQCLEAN_HQC128_CLEAN_hqc_pke_keygen>:
 * As a technicality, the public key is appended to the secret key in order to respect NIST API.
 *
 * @param[out] pk String containing the public key
 * @param[out] sk String containing the secret key
 */
void PQCLEAN_HQC128_CLEAN_hqc_pke_keygen(uint8_t *pk, uint8_t *sk) {
 8005f96:	b580      	push	{r7, lr}
 8005f98:	f5ad 5d0c 	sub.w	sp, sp, #8960	@ 0x2300
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8005fa4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8005fa8:	6018      	str	r0, [r3, #0]
 8005faa:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8005fae:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8005fb2:	6019      	str	r1, [r3, #0]
    seedexpander_state sk_seedexpander;
    seedexpander_state pk_seedexpander;
    uint8_t sk_seed[SEED_BYTES] = {0};
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f507 520b 	add.w	r2, r7, #8896	@ 0x22c0
 8005fba:	f102 0220 	add.w	r2, r2, #32
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	f507 530b 	add.w	r3, r7, #8896	@ 0x22c0
 8005fc4:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8005fc8:	2224      	movs	r2, #36	@ 0x24
 8005fca:	2100      	movs	r1, #0
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f004 fb13 	bl	800a5f8 <memset>
    uint8_t sigma[VEC_K_SIZE_BYTES] = {0};
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f507 520b 	add.w	r2, r7, #8896	@ 0x22c0
 8005fd8:	f102 0210 	add.w	r2, r2, #16
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	f507 530b 	add.w	r3, r7, #8896	@ 0x22c0
 8005fe2:	f103 0314 	add.w	r3, r3, #20
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	605a      	str	r2, [r3, #4]
 8005fec:	609a      	str	r2, [r3, #8]
    uint8_t pk_seed[SEED_BYTES] = {0};
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f507 520a 	add.w	r2, r7, #8832	@ 0x2280
 8005ff4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	f507 530a 	add.w	r3, r7, #8832	@ 0x2280
 8005ffe:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8006002:	2224      	movs	r2, #36	@ 0x24
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f004 faf6 	bl	800a5f8 <memset>
    uint64_t x[VEC_N_SIZE_64] = {0};
 800600c:	f507 530c 	add.w	r3, r7, #8960	@ 0x2300
 8006010:	f103 0310 	add.w	r3, r3, #16
 8006014:	f5a3 6311 	sub.w	r3, r3, #2320	@ 0x910
 8006018:	4618      	mov	r0, r3
 800601a:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 800601e:	461a      	mov	r2, r3
 8006020:	2100      	movs	r1, #0
 8006022:	f004 fae9 	bl	800a5f8 <memset>
    uint64_t y[VEC_N_SIZE_64] = {0};
 8006026:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800602a:	f103 0310 	add.w	r3, r3, #16
 800602e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8006032:	4618      	mov	r0, r3
 8006034:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 8006038:	461a      	mov	r2, r3
 800603a:	2100      	movs	r1, #0
 800603c:	f004 fadc 	bl	800a5f8 <memset>
    uint64_t h[VEC_N_SIZE_64] = {0};
 8006040:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8006044:	f103 0310 	add.w	r3, r3, #16
 8006048:	f5a3 6326 	sub.w	r3, r3, #2656	@ 0xa60
 800604c:	4618      	mov	r0, r3
 800604e:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 8006052:	461a      	mov	r2, r3
 8006054:	2100      	movs	r1, #0
 8006056:	f004 facf 	bl	800a5f8 <memset>
    uint64_t s[VEC_N_SIZE_64] = {0};
 800605a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 800605e:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8006062:	4618      	mov	r0, r3
 8006064:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 8006068:	461a      	mov	r2, r3
 800606a:	2100      	movs	r1, #0
 800606c:	f004 fac4 	bl	800a5f8 <memset>

    // Create seed_expanders for public key and secret key
    randombytes(sk_seed, SEED_BYTES);
 8006070:	f507 530b 	add.w	r3, r7, #8896	@ 0x22c0
 8006074:	f103 0320 	add.w	r3, r3, #32
 8006078:	2128      	movs	r1, #40	@ 0x28
 800607a:	4618      	mov	r0, r3
 800607c:	f001 f8fa 	bl	8007274 <PQCLEAN_randombytes>
    randombytes(sigma, VEC_K_SIZE_BYTES);
 8006080:	f507 530b 	add.w	r3, r7, #8896	@ 0x22c0
 8006084:	f103 0310 	add.w	r3, r3, #16
 8006088:	2110      	movs	r1, #16
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f8f2 	bl	8007274 <PQCLEAN_randombytes>
    PQCLEAN_HQC128_CLEAN_seedexpander_init(&sk_seedexpander, sk_seed, SEED_BYTES);
 8006090:	f507 510b 	add.w	r1, r7, #8896	@ 0x22c0
 8006094:	f101 0120 	add.w	r1, r1, #32
 8006098:	f507 530c 	add.w	r3, r7, #8960	@ 0x2300
 800609c:	f103 030c 	add.w	r3, r3, #12
 80060a0:	2228      	movs	r2, #40	@ 0x28
 80060a2:	4618      	mov	r0, r3
 80060a4:	f002 f8d0 	bl	8008248 <PQCLEAN_HQC128_CLEAN_seedexpander_init>

    randombytes(pk_seed, SEED_BYTES);
 80060a8:	f507 530a 	add.w	r3, r7, #8832	@ 0x2280
 80060ac:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80060b0:	2128      	movs	r1, #40	@ 0x28
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 f8de 	bl	8007274 <PQCLEAN_randombytes>
    PQCLEAN_HQC128_CLEAN_seedexpander_init(&pk_seedexpander, pk_seed, SEED_BYTES);
 80060b8:	f507 510a 	add.w	r1, r7, #8832	@ 0x2280
 80060bc:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 80060c0:	f507 530c 	add.w	r3, r7, #8960	@ 0x2300
 80060c4:	f103 0308 	add.w	r3, r3, #8
 80060c8:	2228      	movs	r2, #40	@ 0x28
 80060ca:	4618      	mov	r0, r3
 80060cc:	f002 f8bc 	bl	8008248 <PQCLEAN_HQC128_CLEAN_seedexpander_init>

    // Compute secret key
    PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight(&sk_seedexpander, x, PARAM_OMEGA);
 80060d0:	f507 51d0 	add.w	r1, r7, #6656	@ 0x1a00
 80060d4:	f507 530c 	add.w	r3, r7, #8960	@ 0x2300
 80060d8:	f103 030c 	add.w	r3, r3, #12
 80060dc:	2242      	movs	r2, #66	@ 0x42
 80060de:	4618      	mov	r0, r3
 80060e0:	f002 fb50 	bl	8008784 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight>
    PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight(&sk_seedexpander, y, PARAM_OMEGA);
 80060e4:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 80060e8:	f103 0310 	add.w	r3, r3, #16
 80060ec:	3b18      	subs	r3, #24
 80060ee:	f507 500c 	add.w	r0, r7, #8960	@ 0x2300
 80060f2:	f100 000c 	add.w	r0, r0, #12
 80060f6:	2242      	movs	r2, #66	@ 0x42
 80060f8:	4619      	mov	r1, r3
 80060fa:	f002 fb43 	bl	8008784 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight>

    // Compute public key
    PQCLEAN_HQC128_CLEAN_vect_set_random(&pk_seedexpander, h);
 80060fe:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8006102:	f507 530c 	add.w	r3, r7, #8960	@ 0x2300
 8006106:	f103 0308 	add.w	r3, r3, #8
 800610a:	4611      	mov	r1, r2
 800610c:	4618      	mov	r0, r3
 800610e:	f002 fd56 	bl	8008bbe <PQCLEAN_HQC128_CLEAN_vect_set_random>
    PQCLEAN_HQC128_CLEAN_vect_mul(s, y, h);
 8006112:	f507 620b 	add.w	r2, r7, #2224	@ 0x8b0
 8006116:	f507 518b 	add.w	r1, r7, #4448	@ 0x1160
 800611a:	f101 0110 	add.w	r1, r1, #16
 800611e:	3918      	subs	r1, #24
 8006120:	f107 0310 	add.w	r3, r7, #16
 8006124:	3b08      	subs	r3, #8
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fee5 	bl	8005ef6 <PQCLEAN_HQC128_CLEAN_vect_mul>
    PQCLEAN_HQC128_CLEAN_vect_add(s, x, s, VEC_N_SIZE_64);
 800612c:	f107 0210 	add.w	r2, r7, #16
 8006130:	3a08      	subs	r2, #8
 8006132:	f507 51d0 	add.w	r1, r7, #6656	@ 0x1a00
 8006136:	f107 0010 	add.w	r0, r7, #16
 800613a:	3808      	subs	r0, #8
 800613c:	f240 1315 	movw	r3, #277	@ 0x115
 8006140:	f002 fd8a 	bl	8008c58 <PQCLEAN_HQC128_CLEAN_vect_add>

    // Parse keys to string
    PQCLEAN_HQC128_CLEAN_hqc_public_key_to_string(pk, pk_seed, s);
 8006144:	f107 0310 	add.w	r3, r7, #16
 8006148:	3b08      	subs	r3, #8
 800614a:	f507 510a 	add.w	r1, r7, #8832	@ 0x2280
 800614e:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 8006152:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 8006156:	f5a2 7043 	sub.w	r0, r2, #780	@ 0x30c
 800615a:	461a      	mov	r2, r3
 800615c:	6800      	ldr	r0, [r0, #0]
 800615e:	f000 fffe 	bl	800715e <PQCLEAN_HQC128_CLEAN_hqc_public_key_to_string>
    PQCLEAN_HQC128_CLEAN_hqc_secret_key_to_string(sk, sk_seed, sigma, pk);
 8006162:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8006166:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 800616a:	f507 520b 	add.w	r2, r7, #8896	@ 0x22c0
 800616e:	f102 0210 	add.w	r2, r2, #16
 8006172:	f507 510b 	add.w	r1, r7, #8896	@ 0x22c0
 8006176:	f101 0120 	add.w	r1, r1, #32
 800617a:	f507 7044 	add.w	r0, r7, #784	@ 0x310
 800617e:	f5a0 7044 	sub.w	r0, r0, #784	@ 0x310
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6800      	ldr	r0, [r0, #0]
 8006186:	f000 ff97 	bl	80070b8 <PQCLEAN_HQC128_CLEAN_hqc_secret_key_to_string>

    PQCLEAN_HQC128_CLEAN_seedexpander_release(&pk_seedexpander);
 800618a:	f507 530c 	add.w	r3, r7, #8960	@ 0x2300
 800618e:	f103 0308 	add.w	r3, r3, #8
 8006192:	4618      	mov	r0, r3
 8006194:	f002 f8b6 	bl	8008304 <PQCLEAN_HQC128_CLEAN_seedexpander_release>
    PQCLEAN_HQC128_CLEAN_seedexpander_release(&sk_seedexpander);
 8006198:	f507 530c 	add.w	r3, r7, #8960	@ 0x2300
 800619c:	f103 030c 	add.w	r3, r3, #12
 80061a0:	4618      	mov	r0, r3
 80061a2:	f002 f8af 	bl	8008304 <PQCLEAN_HQC128_CLEAN_seedexpander_release>
}
 80061a6:	bf00      	nop
 80061a8:	f507 570c 	add.w	r7, r7, #8960	@ 0x2300
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <PQCLEAN_HQC128_CLEAN_hqc_pke_encrypt>:
 * @param[out] v Vector v (second part of the ciphertext)
 * @param[in] m Vector representing the message to encrypt
 * @param[in] theta Seed used to derive randomness required for encryption
 * @param[in] pk String containing the public key
 */
void PQCLEAN_HQC128_CLEAN_hqc_pke_encrypt(uint64_t *u, uint64_t *v, uint8_t *m, uint8_t *theta, const uint8_t *pk) {
 80061b2:	b590      	push	{r4, r7, lr}
 80061b4:	f5ad 5d72 	sub.w	sp, sp, #15488	@ 0x3c80
 80061b8:	b08d      	sub	sp, #52	@ 0x34
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	f507 644b 	add.w	r4, r7, #3248	@ 0xcb0
 80061c0:	f6a4 44a4 	subw	r4, r4, #3236	@ 0xca4
 80061c4:	6020      	str	r0, [r4, #0]
 80061c6:	f507 604b 	add.w	r0, r7, #3248	@ 0xcb0
 80061ca:	f6a0 40a8 	subw	r0, r0, #3240	@ 0xca8
 80061ce:	6001      	str	r1, [r0, #0]
 80061d0:	f507 614b 	add.w	r1, r7, #3248	@ 0xcb0
 80061d4:	f6a1 41ac 	subw	r1, r1, #3244	@ 0xcac
 80061d8:	600a      	str	r2, [r1, #0]
 80061da:	f507 624b 	add.w	r2, r7, #3248	@ 0xcb0
 80061de:	f5a2 624b 	sub.w	r2, r2, #3248	@ 0xcb0
 80061e2:	6013      	str	r3, [r2, #0]
    seedexpander_state vec_seedexpander;
    uint64_t h[VEC_N_SIZE_64] = {0};
 80061e4:	f507 5372 	add.w	r3, r7, #15488	@ 0x3c80
 80061e8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80061ec:	f5a3 630b 	sub.w	r3, r3, #2224	@ 0x8b0
 80061f0:	4618      	mov	r0, r3
 80061f2:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 80061f6:	461a      	mov	r2, r3
 80061f8:	2100      	movs	r1, #0
 80061fa:	f004 f9fd 	bl	800a5f8 <memset>
    uint64_t s[VEC_N_SIZE_64] = {0};
 80061fe:	f507 5332 	add.w	r3, r7, #11392	@ 0x2c80
 8006202:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8006206:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800620a:	4618      	mov	r0, r3
 800620c:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 8006210:	461a      	mov	r2, r3
 8006212:	2100      	movs	r1, #0
 8006214:	f004 f9f0 	bl	800a5f8 <memset>
    uint64_t r1[VEC_N_SIZE_64] = {0};
 8006218:	f507 5332 	add.w	r3, r7, #11392	@ 0x2c80
 800621c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8006220:	f5a3 6320 	sub.w	r3, r3, #2560	@ 0xa00
 8006224:	4618      	mov	r0, r3
 8006226:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 800622a:	461a      	mov	r2, r3
 800622c:	2100      	movs	r1, #0
 800622e:	f004 f9e3 	bl	800a5f8 <memset>
    uint64_t r2[VEC_N_SIZE_64] = {0};
 8006232:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8006236:	f103 0310 	add.w	r3, r3, #16
 800623a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800623e:	4618      	mov	r0, r3
 8006240:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 8006244:	461a      	mov	r2, r3
 8006246:	2100      	movs	r1, #0
 8006248:	f004 f9d6 	bl	800a5f8 <memset>
    uint64_t e[VEC_N_SIZE_64] = {0};
 800624c:	f507 53e5 	add.w	r3, r7, #7328	@ 0x1ca0
 8006250:	f103 0310 	add.w	r3, r3, #16
 8006254:	f5a3 6335 	sub.w	r3, r3, #2896	@ 0xb50
 8006258:	4618      	mov	r0, r3
 800625a:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 800625e:	461a      	mov	r2, r3
 8006260:	2100      	movs	r1, #0
 8006262:	f004 f9c9 	bl	800a5f8 <memset>
    uint64_t tmp1[VEC_N_SIZE_64] = {0};
 8006266:	f507 634b 	add.w	r3, r7, #3248	@ 0xcb0
 800626a:	f5a3 737e 	sub.w	r3, r3, #1016	@ 0x3f8
 800626e:	4618      	mov	r0, r3
 8006270:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 8006274:	461a      	mov	r2, r3
 8006276:	2100      	movs	r1, #0
 8006278:	f004 f9be 	bl	800a5f8 <memset>
    uint64_t tmp2[VEC_N_SIZE_64] = {0};
 800627c:	f507 634b 	add.w	r3, r7, #3248	@ 0xcb0
 8006280:	f5a3 634a 	sub.w	r3, r3, #3232	@ 0xca0
 8006284:	4618      	mov	r0, r3
 8006286:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 800628a:	461a      	mov	r2, r3
 800628c:	2100      	movs	r1, #0
 800628e:	f004 f9b3 	bl	800a5f8 <memset>

    // Create seed_expander from theta
    PQCLEAN_HQC128_CLEAN_seedexpander_init(&vec_seedexpander, theta, SEED_BYTES);
 8006292:	f507 634b 	add.w	r3, r7, #3248	@ 0xcb0
 8006296:	f5a3 634b 	sub.w	r3, r3, #3248	@ 0xcb0
 800629a:	f507 5072 	add.w	r0, r7, #15488	@ 0x3c80
 800629e:	f100 002c 	add.w	r0, r0, #44	@ 0x2c
 80062a2:	2228      	movs	r2, #40	@ 0x28
 80062a4:	6819      	ldr	r1, [r3, #0]
 80062a6:	f001 ffcf 	bl	8008248 <PQCLEAN_HQC128_CLEAN_seedexpander_init>

    // Retrieve h and s from public key
    PQCLEAN_HQC128_CLEAN_hqc_public_key_from_string(h, s, pk);
 80062aa:	f507 532d 	add.w	r3, r7, #11072	@ 0x2b40
 80062ae:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80062b2:	3b18      	subs	r3, #24
 80062b4:	f507 5050 	add.w	r0, r7, #13312	@ 0x3400
 80062b8:	f507 5273 	add.w	r2, r7, #15552	@ 0x3cc0
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	4619      	mov	r1, r3
 80062c0:	f000 ff66 	bl	8007190 <PQCLEAN_HQC128_CLEAN_hqc_public_key_from_string>

    // Generate r1, r2 and e
    PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight(&vec_seedexpander, r1, PARAM_OMEGA_R);
 80062c4:	f507 510a 	add.w	r1, r7, #8832	@ 0x2280
 80062c8:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 80062cc:	f507 5372 	add.w	r3, r7, #15488	@ 0x3c80
 80062d0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80062d4:	224b      	movs	r2, #75	@ 0x4b
 80062d6:	4618      	mov	r0, r3
 80062d8:	f002 fa54 	bl	8008784 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight>
    PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight(&vec_seedexpander, r2, PARAM_OMEGA_R);
 80062dc:	f507 53d1 	add.w	r3, r7, #6688	@ 0x1a20
 80062e0:	f103 0310 	add.w	r3, r3, #16
 80062e4:	3b28      	subs	r3, #40	@ 0x28
 80062e6:	f507 5072 	add.w	r0, r7, #15488	@ 0x3c80
 80062ea:	f100 002c 	add.w	r0, r0, #44	@ 0x2c
 80062ee:	224b      	movs	r2, #75	@ 0x4b
 80062f0:	4619      	mov	r1, r3
 80062f2:	f002 fa47 	bl	8008784 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight>
    PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight(&vec_seedexpander, e, PARAM_OMEGA_E);
 80062f6:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 80062fa:	f103 0310 	add.w	r3, r3, #16
 80062fe:	3b10      	subs	r3, #16
 8006300:	f507 5072 	add.w	r0, r7, #15488	@ 0x3c80
 8006304:	f100 002c 	add.w	r0, r0, #44	@ 0x2c
 8006308:	224b      	movs	r2, #75	@ 0x4b
 800630a:	4619      	mov	r1, r3
 800630c:	f002 fa3a 	bl	8008784 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight>

    // Compute u = r1 + r2.h
    PQCLEAN_HQC128_CLEAN_vect_mul(u, r2, h);
 8006310:	f507 5250 	add.w	r2, r7, #13312	@ 0x3400
 8006314:	f507 53d1 	add.w	r3, r7, #6688	@ 0x1a20
 8006318:	f103 0310 	add.w	r3, r3, #16
 800631c:	3b28      	subs	r3, #40	@ 0x28
 800631e:	f507 614b 	add.w	r1, r7, #3248	@ 0xcb0
 8006322:	f6a1 40a4 	subw	r0, r1, #3236	@ 0xca4
 8006326:	4619      	mov	r1, r3
 8006328:	6800      	ldr	r0, [r0, #0]
 800632a:	f7ff fde4 	bl	8005ef6 <PQCLEAN_HQC128_CLEAN_vect_mul>
    PQCLEAN_HQC128_CLEAN_vect_add(u, r1, u, VEC_N_SIZE_64);
 800632e:	f507 634b 	add.w	r3, r7, #3248	@ 0xcb0
 8006332:	f6a3 42a4 	subw	r2, r3, #3236	@ 0xca4
 8006336:	f507 510a 	add.w	r1, r7, #8832	@ 0x2280
 800633a:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 800633e:	f507 634b 	add.w	r3, r7, #3248	@ 0xcb0
 8006342:	f6a3 40a4 	subw	r0, r3, #3236	@ 0xca4
 8006346:	f240 1315 	movw	r3, #277	@ 0x115
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	6800      	ldr	r0, [r0, #0]
 800634e:	f002 fc83 	bl	8008c58 <PQCLEAN_HQC128_CLEAN_vect_add>

    // Compute v = m.G by encoding the message
    PQCLEAN_HQC128_CLEAN_code_encode(v, m);
 8006352:	f507 634b 	add.w	r3, r7, #3248	@ 0xcb0
 8006356:	f6a3 42ac 	subw	r2, r3, #3244	@ 0xcac
 800635a:	f507 634b 	add.w	r3, r7, #3248	@ 0xcb0
 800635e:	f6a3 43a8 	subw	r3, r3, #3240	@ 0xca8
 8006362:	6811      	ldr	r1, [r2, #0]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	f7fa f87f 	bl	8000468 <PQCLEAN_HQC128_CLEAN_code_encode>
    PQCLEAN_HQC128_CLEAN_vect_resize(tmp1, PARAM_N, v, PARAM_N1N2);
 800636a:	f507 634b 	add.w	r3, r7, #3248	@ 0xcb0
 800636e:	f6a3 42a8 	subw	r2, r3, #3240	@ 0xca8
 8006372:	f507 600f 	add.w	r0, r7, #2288	@ 0x8f0
 8006376:	3838      	subs	r0, #56	@ 0x38
 8006378:	f44f 438a 	mov.w	r3, #17664	@ 0x4500
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	f244 5105 	movw	r1, #17669	@ 0x4505
 8006382:	f002 fcc1 	bl	8008d08 <PQCLEAN_HQC128_CLEAN_vect_resize>

    // Compute v = m.G + s.r2 + e
    PQCLEAN_HQC128_CLEAN_vect_mul(tmp2, r2, s);
 8006386:	f507 522d 	add.w	r2, r7, #11072	@ 0x2b40
 800638a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800638e:	3a18      	subs	r2, #24
 8006390:	f507 51d1 	add.w	r1, r7, #6688	@ 0x1a20
 8006394:	f101 0110 	add.w	r1, r1, #16
 8006398:	3928      	subs	r1, #40	@ 0x28
 800639a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800639e:	3b20      	subs	r3, #32
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fda8 	bl	8005ef6 <PQCLEAN_HQC128_CLEAN_vect_mul>
    PQCLEAN_HQC128_CLEAN_vect_add(tmp2, e, tmp2, VEC_N_SIZE_64);
 80063a6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80063aa:	3a20      	subs	r2, #32
 80063ac:	f507 518b 	add.w	r1, r7, #4448	@ 0x1160
 80063b0:	f101 0110 	add.w	r1, r1, #16
 80063b4:	3910      	subs	r1, #16
 80063b6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80063ba:	3820      	subs	r0, #32
 80063bc:	f240 1315 	movw	r3, #277	@ 0x115
 80063c0:	f002 fc4a 	bl	8008c58 <PQCLEAN_HQC128_CLEAN_vect_add>
    PQCLEAN_HQC128_CLEAN_vect_add(tmp2, tmp1, tmp2, VEC_N_SIZE_64);
 80063c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80063c8:	3a20      	subs	r2, #32
 80063ca:	f507 610f 	add.w	r1, r7, #2288	@ 0x8f0
 80063ce:	3938      	subs	r1, #56	@ 0x38
 80063d0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80063d4:	3820      	subs	r0, #32
 80063d6:	f240 1315 	movw	r3, #277	@ 0x115
 80063da:	f002 fc3d 	bl	8008c58 <PQCLEAN_HQC128_CLEAN_vect_add>
    PQCLEAN_HQC128_CLEAN_vect_resize(v, PARAM_N1N2, tmp2, PARAM_N);
 80063de:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80063e2:	3a20      	subs	r2, #32
 80063e4:	f507 634b 	add.w	r3, r7, #3248	@ 0xcb0
 80063e8:	f6a3 40a8 	subw	r0, r3, #3240	@ 0xca8
 80063ec:	f244 5305 	movw	r3, #17669	@ 0x4505
 80063f0:	f44f 418a 	mov.w	r1, #17664	@ 0x4500
 80063f4:	6800      	ldr	r0, [r0, #0]
 80063f6:	f002 fc87 	bl	8008d08 <PQCLEAN_HQC128_CLEAN_vect_resize>

    PQCLEAN_HQC128_CLEAN_seedexpander_release(&vec_seedexpander);
 80063fa:	f507 5372 	add.w	r3, r7, #15488	@ 0x3c80
 80063fe:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8006402:	4618      	mov	r0, r3
 8006404:	f001 ff7e 	bl	8008304 <PQCLEAN_HQC128_CLEAN_seedexpander_release>
}
 8006408:	bf00      	nop
 800640a:	f507 5772 	add.w	r7, r7, #15488	@ 0x3c80
 800640e:	3734      	adds	r7, #52	@ 0x34
 8006410:	46bd      	mov	sp, r7
 8006412:	bd90      	pop	{r4, r7, pc}

08006414 <PQCLEAN_HQC128_CLEAN_hqc_pke_decrypt>:
 * @param[in] u Vector u (first part of the ciphertext)
 * @param[in] v Vector v (second part of the ciphertext)
 * @param[in] sk String containing the secret key
 * @returns 0
 */
uint8_t PQCLEAN_HQC128_CLEAN_hqc_pke_decrypt(uint8_t *m, uint8_t *sigma, const uint64_t *u, const uint64_t *v, const uint8_t *sk) {
 8006414:	b590      	push	{r4, r7, lr}
 8006416:	f5ad 5d2e 	sub.w	sp, sp, #11136	@ 0x2b80
 800641a:	b083      	sub	sp, #12
 800641c:	af02      	add	r7, sp, #8
 800641e:	f507 6438 	add.w	r4, r7, #2944	@ 0xb80
 8006422:	f6a4 3474 	subw	r4, r4, #2932	@ 0xb74
 8006426:	6020      	str	r0, [r4, #0]
 8006428:	f507 6038 	add.w	r0, r7, #2944	@ 0xb80
 800642c:	f6a0 3078 	subw	r0, r0, #2936	@ 0xb78
 8006430:	6001      	str	r1, [r0, #0]
 8006432:	f507 6138 	add.w	r1, r7, #2944	@ 0xb80
 8006436:	f6a1 317c 	subw	r1, r1, #2940	@ 0xb7c
 800643a:	600a      	str	r2, [r1, #0]
 800643c:	f507 6238 	add.w	r2, r7, #2944	@ 0xb80
 8006440:	f5a2 6238 	sub.w	r2, r2, #2944	@ 0xb80
 8006444:	6013      	str	r3, [r2, #0]
    uint64_t x[VEC_N_SIZE_64] = {0};
 8006446:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 800644a:	f6a3 03a8 	subw	r3, r3, #2216	@ 0x8a8
 800644e:	4618      	mov	r0, r3
 8006450:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 8006454:	461a      	mov	r2, r3
 8006456:	2100      	movs	r1, #0
 8006458:	f004 f8ce 	bl	800a5f8 <memset>
    uint64_t y[VEC_N_SIZE_64] = {0};
 800645c:	f507 53dc 	add.w	r3, r7, #7040	@ 0x1b80
 8006460:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8006464:	4618      	mov	r0, r3
 8006466:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 800646a:	461a      	mov	r2, r3
 800646c:	2100      	movs	r1, #0
 800646e:	f004 f8c3 	bl	800a5f8 <memset>
    uint8_t pk[PUBLIC_KEY_BYTES] = {0};
 8006472:	f507 53dc 	add.w	r3, r7, #7040	@ 0x1b80
 8006476:	f6a3 231c 	subw	r3, r3, #2588	@ 0xa1c
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	3304      	adds	r3, #4
 8006480:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f004 f8b6 	bl	800a5f8 <memset>
    uint64_t tmp1[VEC_N_SIZE_64] = {0};
 800648c:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8006490:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8006494:	4618      	mov	r0, r3
 8006496:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 800649a:	461a      	mov	r2, r3
 800649c:	2100      	movs	r1, #0
 800649e:	f004 f8ab 	bl	800a5f8 <memset>
    uint64_t tmp2[VEC_N_SIZE_64] = {0};
 80064a2:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 80064a6:	f5a3 6337 	sub.w	r3, r3, #2928	@ 0xb70
 80064aa:	4618      	mov	r0, r3
 80064ac:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 80064b0:	461a      	mov	r2, r3
 80064b2:	2100      	movs	r1, #0
 80064b4:	f004 f8a0 	bl	800a5f8 <memset>

    // Retrieve x, y, pk from secret key
    PQCLEAN_HQC128_CLEAN_hqc_secret_key_from_string(x, y, sigma, pk, sk);
 80064b8:	f507 538c 	add.w	r3, r7, #4480	@ 0x1180
 80064bc:	3b1c      	subs	r3, #28
 80064be:	f507 6238 	add.w	r2, r7, #2944	@ 0xb80
 80064c2:	f6a2 3278 	subw	r2, r2, #2936	@ 0xb78
 80064c6:	f507 51d2 	add.w	r1, r7, #6720	@ 0x1a40
 80064ca:	3910      	subs	r1, #16
 80064cc:	f507 540b 	add.w	r4, r7, #8896	@ 0x22c0
 80064d0:	f104 0418 	add.w	r4, r4, #24
 80064d4:	f507 502e 	add.w	r0, r7, #11136	@ 0x2b80
 80064d8:	f100 0010 	add.w	r0, r0, #16
 80064dc:	6800      	ldr	r0, [r0, #0]
 80064de:	9000      	str	r0, [sp, #0]
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	4620      	mov	r0, r4
 80064e4:	f000 fe07 	bl	80070f6 <PQCLEAN_HQC128_CLEAN_hqc_secret_key_from_string>

    // Compute v - u.y
    PQCLEAN_HQC128_CLEAN_vect_resize(tmp1, PARAM_N, v, PARAM_N1N2);
 80064e8:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 80064ec:	f5a3 6238 	sub.w	r2, r3, #2944	@ 0xb80
 80064f0:	f507 600c 	add.w	r0, r7, #2240	@ 0x8c0
 80064f4:	3808      	subs	r0, #8
 80064f6:	f44f 438a 	mov.w	r3, #17664	@ 0x4500
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	f244 5105 	movw	r1, #17669	@ 0x4505
 8006500:	f002 fc02 	bl	8008d08 <PQCLEAN_HQC128_CLEAN_vect_resize>
    PQCLEAN_HQC128_CLEAN_vect_mul(tmp2, y, u);
 8006504:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8006508:	f6a3 327c 	subw	r2, r3, #2940	@ 0xb7c
 800650c:	f507 51d2 	add.w	r1, r7, #6720	@ 0x1a40
 8006510:	3910      	subs	r1, #16
 8006512:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8006516:	3b30      	subs	r3, #48	@ 0x30
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fceb 	bl	8005ef6 <PQCLEAN_HQC128_CLEAN_vect_mul>
    PQCLEAN_HQC128_CLEAN_vect_add(tmp2, tmp1, tmp2, VEC_N_SIZE_64);
 8006520:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8006524:	3a30      	subs	r2, #48	@ 0x30
 8006526:	f507 610c 	add.w	r1, r7, #2240	@ 0x8c0
 800652a:	3908      	subs	r1, #8
 800652c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8006530:	3830      	subs	r0, #48	@ 0x30
 8006532:	f240 1315 	movw	r3, #277	@ 0x115
 8006536:	f002 fb8f 	bl	8008c58 <PQCLEAN_HQC128_CLEAN_vect_add>

    // Compute m by decoding v - u.y
    PQCLEAN_HQC128_CLEAN_code_decode(m, tmp2);
 800653a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800653e:	3b30      	subs	r3, #48	@ 0x30
 8006540:	f507 6238 	add.w	r2, r7, #2944	@ 0xb80
 8006544:	f6a2 3274 	subw	r2, r2, #2932	@ 0xb74
 8006548:	4619      	mov	r1, r3
 800654a:	6810      	ldr	r0, [r2, #0]
 800654c:	f7f9 ffaa 	bl	80004a4 <PQCLEAN_HQC128_CLEAN_code_decode>

    return 0;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	f507 572e 	add.w	r7, r7, #11136	@ 0x2b80
 8006558:	3704      	adds	r7, #4
 800655a:	46bd      	mov	sp, r7
 800655c:	bd90      	pop	{r4, r7, pc}

0800655e <PQCLEAN_HQC128_CLEAN_crypto_kem_keypair>:
 *
 * @param[out] pk String containing the public key
 * @param[out] sk String containing the secret key
 * @returns 0 if keygen is successful
 */
int PQCLEAN_HQC128_CLEAN_crypto_kem_keypair(uint8_t *pk, uint8_t *sk) {
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]

    PQCLEAN_HQC128_CLEAN_hqc_pke_keygen(pk, sk);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7ff fd13 	bl	8005f96 <PQCLEAN_HQC128_CLEAN_hqc_pke_keygen>
    return 0;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <PQCLEAN_HQC128_CLEAN_crypto_kem_enc>:
 * @param[out] ct String containing the ciphertext
 * @param[out] ss String containing the shared secret
 * @param[in] pk String containing the public key
 * @returns 0 if encapsulation is successful
 */
int PQCLEAN_HQC128_CLEAN_crypto_kem_enc(uint8_t *ct, uint8_t *ss, const uint8_t *pk) {
 800657a:	b580      	push	{r7, lr}
 800657c:	f5ad 5d2f 	sub.w	sp, sp, #11200	@ 0x2bc0
 8006580:	b08c      	sub	sp, #48	@ 0x30
 8006582:	af02      	add	r7, sp, #8
 8006584:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 8006588:	f6a3 33dc 	subw	r3, r3, #3036	@ 0xbdc
 800658c:	6018      	str	r0, [r3, #0]
 800658e:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 8006592:	f5a3 633e 	sub.w	r3, r3, #3040	@ 0xbe0
 8006596:	6019      	str	r1, [r3, #0]
 8006598:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 800659c:	f6a3 33e4 	subw	r3, r3, #3044	@ 0xbe4
 80065a0:	601a      	str	r2, [r3, #0]

    uint8_t theta[SHAKE256_512_BYTES] = {0};
 80065a2:	2300      	movs	r3, #0
 80065a4:	f507 522e 	add.w	r2, r7, #11136	@ 0x2b80
 80065a8:	f102 0220 	add.w	r2, r2, #32
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 80065b2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80065b6:	223c      	movs	r2, #60	@ 0x3c
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f004 f81c 	bl	800a5f8 <memset>
    uint64_t u[VEC_N_SIZE_64] = {0};
 80065c0:	f507 532f 	add.w	r3, r7, #11200	@ 0x2bc0
 80065c4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80065c8:	f5a3 630f 	sub.w	r3, r3, #2288	@ 0x8f0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 80065d2:	461a      	mov	r2, r3
 80065d4:	2100      	movs	r1, #0
 80065d6:	f004 f80f 	bl	800a5f8 <memset>
    uint64_t v[VEC_N1N2_SIZE_64] = {0};
 80065da:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 80065de:	f103 0308 	add.w	r3, r3, #8
 80065e2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80065e6:	4618      	mov	r0, r3
 80065e8:	f44f 630a 	mov.w	r3, #2208	@ 0x8a0
 80065ec:	461a      	mov	r2, r3
 80065ee:	2100      	movs	r1, #0
 80065f0:	f004 f802 	bl	800a5f8 <memset>
    uint8_t mc[VEC_K_SIZE_BYTES + VEC_N_SIZE_BYTES + VEC_N1N2_SIZE_BYTES] = {0};
 80065f4:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 80065f8:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	3304      	adds	r3, #4
 8006602:	f241 124d 	movw	r2, #4429	@ 0x114d
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f003 fff5 	bl	800a5f8 <memset>
    uint8_t tmp[VEC_K_SIZE_BYTES + PUBLIC_KEY_BYTES + SALT_SIZE_BYTES] = {0};
 800660e:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 8006612:	f5a3 633d 	sub.w	r3, r3, #3024	@ 0xbd0
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	3304      	adds	r3, #4
 800661c:	f640 02e5 	movw	r2, #2277	@ 0x8e5
 8006620:	2100      	movs	r1, #0
 8006622:	4618      	mov	r0, r3
 8006624:	f003 ffe8 	bl	800a5f8 <memset>
    uint8_t *m = tmp;
 8006628:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800662c:	3b10      	subs	r3, #16
 800662e:	f507 522f 	add.w	r2, r7, #11200	@ 0x2bc0
 8006632:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8006636:	6013      	str	r3, [r2, #0]
    uint8_t *salt = tmp + VEC_K_SIZE_BYTES + PUBLIC_KEY_BYTES;
 8006638:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800663c:	3b10      	subs	r3, #16
 800663e:	f603 03d9 	addw	r3, r3, #2265	@ 0x8d9
 8006642:	f507 522f 	add.w	r2, r7, #11200	@ 0x2bc0
 8006646:	f102 0220 	add.w	r2, r2, #32
 800664a:	6013      	str	r3, [r2, #0]
    shake256incctx shake256state;

    // Computing m
    randombytes(m, VEC_K_SIZE_BYTES);
 800664c:	2110      	movs	r1, #16
 800664e:	f507 532f 	add.w	r3, r7, #11200	@ 0x2bc0
 8006652:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	f000 fe0c 	bl	8007274 <PQCLEAN_randombytes>

    // Computing theta
    randombytes(salt, SALT_SIZE_BYTES);
 800665c:	2110      	movs	r1, #16
 800665e:	f507 532f 	add.w	r3, r7, #11200	@ 0x2bc0
 8006662:	f103 0320 	add.w	r3, r3, #32
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	f000 fe04 	bl	8007274 <PQCLEAN_randombytes>
    memcpy(tmp + VEC_K_SIZE_BYTES, pk, PUBLIC_KEY_BYTES);
 800666c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006670:	3b10      	subs	r3, #16
 8006672:	3310      	adds	r3, #16
 8006674:	f607 32e8 	addw	r2, r7, #3048	@ 0xbe8
 8006678:	f6a2 31e4 	subw	r1, r2, #3044	@ 0xbe4
 800667c:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8006680:	6809      	ldr	r1, [r1, #0]
 8006682:	4618      	mov	r0, r3
 8006684:	f003 fffd 	bl	800a682 <memcpy>
    PQCLEAN_HQC128_CLEAN_shake256_512_ds(&shake256state, theta, tmp, VEC_K_SIZE_BYTES + PUBLIC_KEY_BYTES + SALT_SIZE_BYTES, G_FCT_DOMAIN);
 8006688:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800668c:	3a10      	subs	r2, #16
 800668e:	f507 512e 	add.w	r1, r7, #11136	@ 0x2b80
 8006692:	f101 0120 	add.w	r1, r1, #32
 8006696:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800669a:	3814      	subs	r0, #20
 800669c:	2303      	movs	r3, #3
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	f640 03e9 	movw	r3, #2281	@ 0x8e9
 80066a4:	f001 fdac 	bl	8008200 <PQCLEAN_HQC128_CLEAN_shake256_512_ds>

    // Encrypting m
    PQCLEAN_HQC128_CLEAN_hqc_pke_encrypt(u, v, m, theta, pk);
 80066a8:	f507 522e 	add.w	r2, r7, #11136	@ 0x2b80
 80066ac:	f102 0220 	add.w	r2, r2, #32
 80066b0:	f507 51d3 	add.w	r1, r7, #6752	@ 0x1a60
 80066b4:	f101 0108 	add.w	r1, r1, #8
 80066b8:	3910      	subs	r1, #16
 80066ba:	f507 500b 	add.w	r0, r7, #8896	@ 0x22c0
 80066be:	f100 0038 	add.w	r0, r0, #56	@ 0x38
 80066c2:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 80066c6:	f6a3 33e4 	subw	r3, r3, #3044	@ 0xbe4
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	4613      	mov	r3, r2
 80066d0:	f507 522f 	add.w	r2, r7, #11200	@ 0x2bc0
 80066d4:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80066d8:	6812      	ldr	r2, [r2, #0]
 80066da:	f7ff fd6a 	bl	80061b2 <PQCLEAN_HQC128_CLEAN_hqc_pke_encrypt>

    // Computing shared secret
    memcpy(mc, m, VEC_K_SIZE_BYTES);
 80066de:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 80066e2:	3b24      	subs	r3, #36	@ 0x24
 80066e4:	2210      	movs	r2, #16
 80066e6:	f507 512f 	add.w	r1, r7, #11200	@ 0x2bc0
 80066ea:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 80066ee:	6809      	ldr	r1, [r1, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f003 ffc6 	bl	800a682 <memcpy>
    PQCLEAN_HQC128_CLEAN_store8_arr(mc + VEC_K_SIZE_BYTES, VEC_N_SIZE_BYTES, u, VEC_N_SIZE_64);
 80066f6:	f607 1028 	addw	r0, r7, #2344	@ 0x928
 80066fa:	3824      	subs	r0, #36	@ 0x24
 80066fc:	3010      	adds	r0, #16
 80066fe:	f507 520b 	add.w	r2, r7, #8896	@ 0x22c0
 8006702:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8006706:	f240 1315 	movw	r3, #277	@ 0x115
 800670a:	f640 01a1 	movw	r1, #2209	@ 0x8a1
 800670e:	f000 fc92 	bl	8007036 <PQCLEAN_HQC128_CLEAN_store8_arr>
    PQCLEAN_HQC128_CLEAN_store8_arr(mc + VEC_K_SIZE_BYTES + VEC_N_SIZE_BYTES, VEC_N1N2_SIZE_BYTES, v, VEC_N1N2_SIZE_64);
 8006712:	f607 1028 	addw	r0, r7, #2344	@ 0x928
 8006716:	3824      	subs	r0, #36	@ 0x24
 8006718:	f600 00b1 	addw	r0, r0, #2225	@ 0x8b1
 800671c:	f507 52d3 	add.w	r2, r7, #6752	@ 0x1a60
 8006720:	f102 0208 	add.w	r2, r2, #8
 8006724:	3a10      	subs	r2, #16
 8006726:	f44f 738a 	mov.w	r3, #276	@ 0x114
 800672a:	f44f 610a 	mov.w	r1, #2208	@ 0x8a0
 800672e:	f000 fc82 	bl	8007036 <PQCLEAN_HQC128_CLEAN_store8_arr>
    PQCLEAN_HQC128_CLEAN_shake256_512_ds(&shake256state, ss, mc, VEC_K_SIZE_BYTES + VEC_N_SIZE_BYTES + VEC_N1N2_SIZE_BYTES, K_FCT_DOMAIN);
 8006732:	f607 1228 	addw	r2, r7, #2344	@ 0x928
 8006736:	3a24      	subs	r2, #36	@ 0x24
 8006738:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 800673c:	f5a3 613e 	sub.w	r1, r3, #3040	@ 0xbe0
 8006740:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8006744:	3814      	subs	r0, #20
 8006746:	2304      	movs	r3, #4
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	f241 1351 	movw	r3, #4433	@ 0x1151
 800674e:	6809      	ldr	r1, [r1, #0]
 8006750:	f001 fd56 	bl	8008200 <PQCLEAN_HQC128_CLEAN_shake256_512_ds>

    // Computing ciphertext
    PQCLEAN_HQC128_CLEAN_hqc_ciphertext_to_string(ct, u, v, salt);
 8006754:	f507 52d3 	add.w	r2, r7, #6752	@ 0x1a60
 8006758:	f102 0208 	add.w	r2, r2, #8
 800675c:	3a10      	subs	r2, #16
 800675e:	f507 510b 	add.w	r1, r7, #8896	@ 0x22c0
 8006762:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8006766:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 800676a:	f6a3 30dc 	subw	r0, r3, #3036	@ 0xbdc
 800676e:	f507 532f 	add.w	r3, r7, #11200	@ 0x2bc0
 8006772:	f103 0320 	add.w	r3, r3, #32
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6800      	ldr	r0, [r0, #0]
 800677a:	f000 fd2f 	bl	80071dc <PQCLEAN_HQC128_CLEAN_hqc_ciphertext_to_string>

    return 0;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	f507 572f 	add.w	r7, r7, #11200	@ 0x2bc0
 8006786:	3728      	adds	r7, #40	@ 0x28
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <PQCLEAN_HQC128_CLEAN_crypto_kem_dec>:
 * @param[out] ss String containing the shared secret
 * @param[in] ct String containing the cipĥertext
 * @param[in] sk String containing the secret key
 * @returns 0 if decapsulation is successful, -1 otherwise
 */
int PQCLEAN_HQC128_CLEAN_crypto_kem_dec(uint8_t *ss, const uint8_t *ct, const uint8_t *sk) {
 800678c:	b580      	push	{r7, lr}
 800678e:	f5ad 5d75 	sub.w	sp, sp, #15680	@ 0x3d40
 8006792:	b086      	sub	sp, #24
 8006794:	af02      	add	r7, sp, #8
 8006796:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800679a:	f6a3 5344 	subw	r3, r3, #3396	@ 0xd44
 800679e:	6018      	str	r0, [r3, #0]
 80067a0:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 80067a4:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 80067a8:	6019      	str	r1, [r3, #0]
 80067aa:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 80067ae:	f6a3 534c 	subw	r3, r3, #3404	@ 0xd4c
 80067b2:	601a      	str	r2, [r3, #0]

    uint8_t result;
    uint64_t u[VEC_N_SIZE_64] = {0};
 80067b4:	f507 5375 	add.w	r3, r7, #15680	@ 0x3d40
 80067b8:	f103 0310 	add.w	r3, r3, #16
 80067bc:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 80067c0:	4618      	mov	r0, r3
 80067c2:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 80067c6:	461a      	mov	r2, r3
 80067c8:	2100      	movs	r1, #0
 80067ca:	f003 ff15 	bl	800a5f8 <memset>
    uint64_t v[VEC_N1N2_SIZE_64] = {0};
 80067ce:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 80067d2:	f103 0310 	add.w	r3, r3, #16
 80067d6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80067da:	4618      	mov	r0, r3
 80067dc:	f44f 630a 	mov.w	r3, #2208	@ 0x8a0
 80067e0:	461a      	mov	r2, r3
 80067e2:	2100      	movs	r1, #0
 80067e4:	f003 ff08 	bl	800a5f8 <memset>
    const uint8_t *pk = sk + SEED_BYTES;
 80067e8:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 80067ec:	f6a3 534c 	subw	r3, r3, #3404	@ 0xd4c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3328      	adds	r3, #40	@ 0x28
 80067f4:	f507 5275 	add.w	r2, r7, #15680	@ 0x3d40
 80067f8:	f102 0208 	add.w	r2, r2, #8
 80067fc:	6013      	str	r3, [r2, #0]
    uint8_t sigma[VEC_K_SIZE_BYTES] = {0};
 80067fe:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8006802:	f103 0310 	add.w	r3, r3, #16
 8006806:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800680a:	2200      	movs	r2, #0
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	3304      	adds	r3, #4
 8006810:	2200      	movs	r2, #0
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	609a      	str	r2, [r3, #8]
    uint8_t theta[SHAKE256_512_BYTES] = {0};
 8006818:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 800681c:	f103 0310 	add.w	r3, r3, #16
 8006820:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	3304      	adds	r3, #4
 800682a:	223c      	movs	r2, #60	@ 0x3c
 800682c:	2100      	movs	r1, #0
 800682e:	4618      	mov	r0, r3
 8006830:	f003 fee2 	bl	800a5f8 <memset>
    uint64_t u2[VEC_N_SIZE_64] = {0};
 8006834:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8006838:	f103 0310 	add.w	r3, r3, #16
 800683c:	f6a3 2358 	subw	r3, r3, #2648	@ 0xa58
 8006840:	4618      	mov	r0, r3
 8006842:	f640 03a8 	movw	r3, #2216	@ 0x8a8
 8006846:	461a      	mov	r2, r3
 8006848:	2100      	movs	r1, #0
 800684a:	f003 fed5 	bl	800a5f8 <memset>
    uint64_t v2[VEC_N1N2_SIZE_64] = {0};
 800684e:	f507 53ea 	add.w	r3, r7, #7488	@ 0x1d40
 8006852:	f103 0310 	add.w	r3, r3, #16
 8006856:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800685a:	4618      	mov	r0, r3
 800685c:	f44f 630a 	mov.w	r3, #2208	@ 0x8a0
 8006860:	461a      	mov	r2, r3
 8006862:	2100      	movs	r1, #0
 8006864:	f003 fec8 	bl	800a5f8 <memset>
    uint8_t mc[VEC_K_SIZE_BYTES + VEC_N_SIZE_BYTES + VEC_N1N2_SIZE_BYTES] = {0};
 8006868:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 800686c:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	3304      	adds	r3, #4
 8006876:	f241 124d 	movw	r2, #4429	@ 0x114d
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f003 febb 	bl	800a5f8 <memset>
    uint8_t tmp[VEC_K_SIZE_BYTES + PUBLIC_KEY_BYTES + SALT_SIZE_BYTES] = {0};
 8006882:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8006886:	f6a3 5338 	subw	r3, r3, #3384	@ 0xd38
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	3304      	adds	r3, #4
 8006890:	f640 02e5 	movw	r2, #2277	@ 0x8e5
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f003 feae 	bl	800a5f8 <memset>
    uint8_t *m = tmp;
 800689c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80068a0:	3b38      	subs	r3, #56	@ 0x38
 80068a2:	f507 5275 	add.w	r2, r7, #15680	@ 0x3d40
 80068a6:	f102 0204 	add.w	r2, r2, #4
 80068aa:	6013      	str	r3, [r2, #0]
    uint8_t *salt = tmp + VEC_K_SIZE_BYTES + PUBLIC_KEY_BYTES;
 80068ac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80068b0:	3b38      	subs	r3, #56	@ 0x38
 80068b2:	f603 03d9 	addw	r3, r3, #2265	@ 0x8d9
 80068b6:	f507 5275 	add.w	r2, r7, #15680	@ 0x3d40
 80068ba:	6013      	str	r3, [r2, #0]
    shake256incctx shake256state;

    // Retrieving u, v and d from ciphertext
    PQCLEAN_HQC128_CLEAN_hqc_ciphertext_from_string(u, v, salt, ct);
 80068bc:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 80068c0:	f6a3 5348 	subw	r3, r3, #3400	@ 0xd48
 80068c4:	f507 512f 	add.w	r1, r7, #11200	@ 0x2bc0
 80068c8:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 80068cc:	f507 5052 	add.w	r0, r7, #13440	@ 0x3480
 80068d0:	f100 0010 	add.w	r0, r0, #16
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f507 5275 	add.w	r2, r7, #15680	@ 0x3d40
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	f000 fca4 	bl	8007228 <PQCLEAN_HQC128_CLEAN_hqc_ciphertext_from_string>

    // Decrypting
    result = PQCLEAN_HQC128_CLEAN_hqc_pke_decrypt(m, sigma, u, v, sk);
 80068e0:	f507 502f 	add.w	r0, r7, #11200	@ 0x2bc0
 80068e4:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 80068e8:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80068ec:	f102 0210 	add.w	r2, r2, #16
 80068f0:	f507 512f 	add.w	r1, r7, #11200	@ 0x2bc0
 80068f4:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 80068f8:	3910      	subs	r1, #16
 80068fa:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 80068fe:	f6a3 534c 	subw	r3, r3, #3404	@ 0xd4c
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	4603      	mov	r3, r0
 8006908:	f507 5075 	add.w	r0, r7, #15680	@ 0x3d40
 800690c:	f100 0004 	add.w	r0, r0, #4
 8006910:	6800      	ldr	r0, [r0, #0]
 8006912:	f7ff fd7f 	bl	8006414 <PQCLEAN_HQC128_CLEAN_hqc_pke_decrypt>
 8006916:	4603      	mov	r3, r0
 8006918:	f507 5274 	add.w	r2, r7, #15616	@ 0x3d00
 800691c:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8006920:	7013      	strb	r3, [r2, #0]

    // Computing theta
    memcpy(tmp + VEC_K_SIZE_BYTES, pk, PUBLIC_KEY_BYTES);
 8006922:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006926:	3b38      	subs	r3, #56	@ 0x38
 8006928:	3310      	adds	r3, #16
 800692a:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 800692e:	f507 5175 	add.w	r1, r7, #15680	@ 0x3d40
 8006932:	f101 0108 	add.w	r1, r1, #8
 8006936:	6809      	ldr	r1, [r1, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f003 fea2 	bl	800a682 <memcpy>
    PQCLEAN_HQC128_CLEAN_shake256_512_ds(&shake256state, theta, tmp, VEC_K_SIZE_BYTES + PUBLIC_KEY_BYTES + SALT_SIZE_BYTES, G_FCT_DOMAIN);
 800693e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8006942:	3a38      	subs	r2, #56	@ 0x38
 8006944:	f507 512e 	add.w	r1, r7, #11136	@ 0x2b80
 8006948:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 800694c:	3910      	subs	r1, #16
 800694e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8006952:	383c      	subs	r0, #60	@ 0x3c
 8006954:	2303      	movs	r3, #3
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	f640 03e9 	movw	r3, #2281	@ 0x8e9
 800695c:	f001 fc50 	bl	8008200 <PQCLEAN_HQC128_CLEAN_shake256_512_ds>

    // Encrypting m'
    PQCLEAN_HQC128_CLEAN_hqc_pke_encrypt(u2, v2, m, theta, pk);
 8006960:	f507 532e 	add.w	r3, r7, #11136	@ 0x2b80
 8006964:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8006968:	3b10      	subs	r3, #16
 800696a:	f507 51d4 	add.w	r1, r7, #6784	@ 0x1a80
 800696e:	f101 0110 	add.w	r1, r1, #16
 8006972:	3938      	subs	r1, #56	@ 0x38
 8006974:	f507 500c 	add.w	r0, r7, #8960	@ 0x2300
 8006978:	f100 0010 	add.w	r0, r0, #16
 800697c:	3818      	subs	r0, #24
 800697e:	f507 5275 	add.w	r2, r7, #15680	@ 0x3d40
 8006982:	f102 0208 	add.w	r2, r2, #8
 8006986:	6812      	ldr	r2, [r2, #0]
 8006988:	9200      	str	r2, [sp, #0]
 800698a:	f507 5275 	add.w	r2, r7, #15680	@ 0x3d40
 800698e:	f102 0204 	add.w	r2, r2, #4
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	f7ff fc0d 	bl	80061b2 <PQCLEAN_HQC128_CLEAN_hqc_pke_encrypt>

    // Check if c != c'
    result |= PQCLEAN_HQC128_CLEAN_vect_compare((uint8_t *)u, (uint8_t *)u2, VEC_N_SIZE_BYTES);
 8006998:	f507 530c 	add.w	r3, r7, #8960	@ 0x2300
 800699c:	f103 0310 	add.w	r3, r3, #16
 80069a0:	3b18      	subs	r3, #24
 80069a2:	f507 5052 	add.w	r0, r7, #13440	@ 0x3480
 80069a6:	f100 0010 	add.w	r0, r0, #16
 80069aa:	f640 02a1 	movw	r2, #2209	@ 0x8a1
 80069ae:	4619      	mov	r1, r3
 80069b0:	f002 f980 	bl	8008cb4 <PQCLEAN_HQC128_CLEAN_vect_compare>
 80069b4:	4603      	mov	r3, r0
 80069b6:	461a      	mov	r2, r3
 80069b8:	f507 5374 	add.w	r3, r7, #15616	@ 0x3d00
 80069bc:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f507 5274 	add.w	r2, r7, #15616	@ 0x3d00
 80069c8:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 80069cc:	7013      	strb	r3, [r2, #0]
    result |= PQCLEAN_HQC128_CLEAN_vect_compare((uint8_t *)v, (uint8_t *)v2, VEC_N1N2_SIZE_BYTES);
 80069ce:	f507 53d4 	add.w	r3, r7, #6784	@ 0x1a80
 80069d2:	f103 0310 	add.w	r3, r3, #16
 80069d6:	3b38      	subs	r3, #56	@ 0x38
 80069d8:	f507 502f 	add.w	r0, r7, #11200	@ 0x2bc0
 80069dc:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 80069e0:	f44f 620a 	mov.w	r2, #2208	@ 0x8a0
 80069e4:	4619      	mov	r1, r3
 80069e6:	f002 f965 	bl	8008cb4 <PQCLEAN_HQC128_CLEAN_vect_compare>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	f507 5374 	add.w	r3, r7, #15616	@ 0x3d00
 80069f2:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f507 5274 	add.w	r2, r7, #15616	@ 0x3d00
 80069fe:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8006a02:	7013      	strb	r3, [r2, #0]

    result = (uint8_t) (-((int16_t) result) >> 15);
 8006a04:	f507 5374 	add.w	r3, r7, #15616	@ 0x3d00
 8006a08:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	425b      	negs	r3, r3
 8006a10:	13db      	asrs	r3, r3, #15
 8006a12:	f507 5274 	add.w	r2, r7, #15616	@ 0x3d00
 8006a16:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8006a1a:	7013      	strb	r3, [r2, #0]

    for (size_t i = 0; i < VEC_K_SIZE_BYTES; ++i) {
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f507 5275 	add.w	r2, r7, #15680	@ 0x3d40
 8006a22:	f102 020c 	add.w	r2, r2, #12
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	e045      	b.n	8006ab6 <PQCLEAN_HQC128_CLEAN_crypto_kem_dec+0x32a>
        mc[i] = (m[i] & result) ^ (sigma[i] & ~result);
 8006a2a:	f507 5375 	add.w	r3, r7, #15680	@ 0x3d40
 8006a2e:	f103 0304 	add.w	r3, r3, #4
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	f507 5375 	add.w	r3, r7, #15680	@ 0x3d40
 8006a38:	f103 030c 	add.w	r3, r3, #12
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781a      	ldrb	r2, [r3, #0]
 8006a42:	f507 5374 	add.w	r3, r7, #15616	@ 0x3d00
 8006a46:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	b25a      	sxtb	r2, r3
 8006a52:	f507 5335 	add.w	r3, r7, #11584	@ 0x2d40
 8006a56:	f103 0310 	add.w	r3, r3, #16
 8006a5a:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 8006a5e:	f507 5375 	add.w	r3, r7, #15680	@ 0x3d40
 8006a62:	f103 030c 	add.w	r3, r3, #12
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	440b      	add	r3, r1
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	b259      	sxtb	r1, r3
 8006a6e:	f507 5374 	add.w	r3, r7, #15616	@ 0x3d00
 8006a72:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8006a76:	f993 3000 	ldrsb.w	r3, [r3]
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	b25b      	sxtb	r3, r3
 8006a7e:	400b      	ands	r3, r1
 8006a80:	b25b      	sxtb	r3, r3
 8006a82:	4053      	eors	r3, r2
 8006a84:	b25b      	sxtb	r3, r3
 8006a86:	b2d9      	uxtb	r1, r3
 8006a88:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8006a8c:	f2a3 424c 	subw	r2, r3, #1100	@ 0x44c
 8006a90:	f507 5375 	add.w	r3, r7, #15680	@ 0x3d40
 8006a94:	f103 030c 	add.w	r3, r3, #12
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < VEC_K_SIZE_BYTES; ++i) {
 8006aa0:	f507 5375 	add.w	r3, r7, #15680	@ 0x3d40
 8006aa4:	f103 030c 	add.w	r3, r3, #12
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	f507 5275 	add.w	r2, r7, #15680	@ 0x3d40
 8006ab0:	f102 020c 	add.w	r2, r2, #12
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	f507 5375 	add.w	r3, r7, #15680	@ 0x3d40
 8006aba:	f103 030c 	add.w	r3, r3, #12
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b0f      	cmp	r3, #15
 8006ac2:	d9b2      	bls.n	8006a2a <PQCLEAN_HQC128_CLEAN_crypto_kem_dec+0x29e>
    }

    // Computing shared secret
    PQCLEAN_HQC128_CLEAN_store8_arr(mc + VEC_K_SIZE_BYTES, VEC_N_SIZE_BYTES, u, VEC_N_SIZE_64);
 8006ac4:	f507 6011 	add.w	r0, r7, #2320	@ 0x910
 8006ac8:	380c      	subs	r0, #12
 8006aca:	3010      	adds	r0, #16
 8006acc:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8006ad0:	f102 0210 	add.w	r2, r2, #16
 8006ad4:	f240 1315 	movw	r3, #277	@ 0x115
 8006ad8:	f640 01a1 	movw	r1, #2209	@ 0x8a1
 8006adc:	f000 faab 	bl	8007036 <PQCLEAN_HQC128_CLEAN_store8_arr>
    PQCLEAN_HQC128_CLEAN_store8_arr(mc + VEC_K_SIZE_BYTES + VEC_N_SIZE_BYTES, VEC_N1N2_SIZE_BYTES, v, VEC_N1N2_SIZE_64);
 8006ae0:	f507 6011 	add.w	r0, r7, #2320	@ 0x910
 8006ae4:	380c      	subs	r0, #12
 8006ae6:	f600 00b1 	addw	r0, r0, #2225	@ 0x8b1
 8006aea:	f507 522f 	add.w	r2, r7, #11200	@ 0x2bc0
 8006aee:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8006af2:	f44f 738a 	mov.w	r3, #276	@ 0x114
 8006af6:	f44f 610a 	mov.w	r1, #2208	@ 0x8a0
 8006afa:	f000 fa9c 	bl	8007036 <PQCLEAN_HQC128_CLEAN_store8_arr>
    PQCLEAN_HQC128_CLEAN_shake256_512_ds(&shake256state, ss, mc, VEC_K_SIZE_BYTES + VEC_N_SIZE_BYTES + VEC_N1N2_SIZE_BYTES, K_FCT_DOMAIN);
 8006afe:	f507 6211 	add.w	r2, r7, #2320	@ 0x910
 8006b02:	3a0c      	subs	r2, #12
 8006b04:	f507 6355 	add.w	r3, r7, #3408	@ 0xd50
 8006b08:	f6a3 5144 	subw	r1, r3, #3396	@ 0xd44
 8006b0c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8006b10:	383c      	subs	r0, #60	@ 0x3c
 8006b12:	2304      	movs	r3, #4
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	f241 1351 	movw	r3, #4433	@ 0x1151
 8006b1a:	6809      	ldr	r1, [r1, #0]
 8006b1c:	f001 fb70 	bl	8008200 <PQCLEAN_HQC128_CLEAN_shake256_512_ds>

    return -(~result & 1);
 8006b20:	f507 5374 	add.w	r3, r7, #15616	@ 0x3d00
 8006b24:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bf0c      	ite	eq
 8006b32:	2301      	moveq	r3, #1
 8006b34:	2300      	movne	r3, #0
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	425b      	negs	r3, r3
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f507 5775 	add.w	r7, r7, #15680	@ 0x3d40
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	f5ad 5d0f 	sub.w	sp, sp, #9152	@ 0x23c0
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b50:	f002 f95d 	bl	8008e0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b54:	f000 f8be 	bl	8006cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b58:	f000 f934 	bl	8006dc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006b5c:	f000 f908 	bl	8006d70 <MX_USART2_UART_Init>
      unsigned char sk[PQCLEAN_HQC128_CLEAN_CRYPTO_SECRETKEYBYTES];
      unsigned char ct[PQCLEAN_HQC128_CLEAN_CRYPTO_CIPHERTEXTBYTES];
      unsigned char ss1[PQCLEAN_HQC128_CLEAN_CRYPTO_BYTES];
      unsigned char ss2[PQCLEAN_HQC128_CLEAN_CRYPTO_BYTES];

      for(int i = 0; i < 5; i++) {
 8006b60:	2300      	movs	r3, #0
 8006b62:	f507 520f 	add.w	r2, r7, #9152	@ 0x23c0
 8006b66:	6013      	str	r3, [r2, #0]
 8006b68:	e096      	b.n	8006c98 <main+0x152>
          // Measure key pair generation time
          start_tick_keypair = HAL_GetTick();
 8006b6a:	f002 f9b5 	bl	8008ed8 <HAL_GetTick>
 8006b6e:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006b72:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8006b76:	6018      	str	r0, [r3, #0]
          PQCLEAN_HQC128_CLEAN_crypto_kem_keypair(pk, sk);
 8006b78:	f507 6215 	add.w	r2, r7, #2384	@ 0x950
 8006b7c:	3a04      	subs	r2, #4
 8006b7e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8006b82:	3b10      	subs	r3, #16
 8006b84:	4611      	mov	r1, r2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fce9 	bl	800655e <PQCLEAN_HQC128_CLEAN_crypto_kem_keypair>
          end_tick_keypair = HAL_GetTick();
 8006b8c:	f002 f9a4 	bl	8008ed8 <HAL_GetTick>
 8006b90:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006b94:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8006b98:	6018      	str	r0, [r3, #0]
          elapsed_ticks_keypair += end_tick_keypair - start_tick_keypair;
 8006b9a:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006b9e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006ba8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	f507 520f 	add.w	r2, r7, #9152	@ 0x23c0
 8006bb4:	f102 020c 	add.w	r2, r2, #12
 8006bb8:	6812      	ldr	r2, [r2, #0]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f507 520f 	add.w	r2, r7, #9152	@ 0x23c0
 8006bc0:	f102 020c 	add.w	r2, r2, #12
 8006bc4:	6013      	str	r3, [r2, #0]

          // Measure encryption time
          start_tick_enc = HAL_GetTick();
 8006bc6:	f002 f987 	bl	8008ed8 <HAL_GetTick>
 8006bca:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006bce:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8006bd2:	6018      	str	r0, [r3, #0]
          PQCLEAN_HQC128_CLEAN_crypto_kem_enc(ct, ss1, pk);
 8006bd4:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8006bd8:	3a10      	subs	r2, #16
 8006bda:	f107 0310 	add.w	r3, r7, #16
 8006bde:	3b10      	subs	r3, #16
 8006be0:	f507 5092 	add.w	r0, r7, #4672	@ 0x1240
 8006be4:	f100 0010 	add.w	r0, r0, #16
 8006be8:	4619      	mov	r1, r3
 8006bea:	f7ff fcc6 	bl	800657a <PQCLEAN_HQC128_CLEAN_crypto_kem_enc>
          end_tick_enc = HAL_GetTick();
 8006bee:	f002 f973 	bl	8008ed8 <HAL_GetTick>
 8006bf2:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006bf6:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8006bfa:	6018      	str	r0, [r3, #0]
          elapsed_ticks_enc += end_tick_enc - start_tick_enc;
 8006bfc:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006c00:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006c0a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f507 520f 	add.w	r2, r7, #9152	@ 0x23c0
 8006c16:	f102 0208 	add.w	r2, r2, #8
 8006c1a:	6812      	ldr	r2, [r2, #0]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f507 520f 	add.w	r2, r7, #9152	@ 0x23c0
 8006c22:	f102 0208 	add.w	r2, r2, #8
 8006c26:	6013      	str	r3, [r2, #0]

          // Measure decryption time
          start_tick_dec = HAL_GetTick();
 8006c28:	f002 f956 	bl	8008ed8 <HAL_GetTick>
 8006c2c:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006c30:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8006c34:	6018      	str	r0, [r3, #0]
          PQCLEAN_HQC128_CLEAN_crypto_kem_dec(ss2, ct, sk);
 8006c36:	f507 6215 	add.w	r2, r7, #2384	@ 0x950
 8006c3a:	3a04      	subs	r2, #4
 8006c3c:	f507 5192 	add.w	r1, r7, #4672	@ 0x1240
 8006c40:	f101 0110 	add.w	r1, r1, #16
 8006c44:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006c48:	3b10      	subs	r3, #16
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff fd9e 	bl	800678c <PQCLEAN_HQC128_CLEAN_crypto_kem_dec>
          end_tick_dec = HAL_GetTick();
 8006c50:	f002 f942 	bl	8008ed8 <HAL_GetTick>
 8006c54:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006c58:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8006c5c:	6018      	str	r0, [r3, #0]
          elapsed_ticks_dec += end_tick_dec - start_tick_dec;
 8006c5e:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006c62:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	f507 530e 	add.w	r3, r7, #9088	@ 0x2380
 8006c6c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	f507 520f 	add.w	r2, r7, #9152	@ 0x23c0
 8006c78:	f102 0204 	add.w	r2, r2, #4
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f507 520f 	add.w	r2, r7, #9152	@ 0x23c0
 8006c84:	f102 0204 	add.w	r2, r2, #4
 8006c88:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < 5; i++) {
 8006c8a:	f507 530f 	add.w	r3, r7, #9152	@ 0x23c0
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	f507 520f 	add.w	r2, r7, #9152	@ 0x23c0
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	f507 530f 	add.w	r3, r7, #9152	@ 0x23c0
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	f77f af63 	ble.w	8006b6a <main+0x24>
      }
      uint32_t sum = elapsed_ticks_keypair + elapsed_ticks_enc + elapsed_ticks_dec;
 8006ca4:	f507 530f 	add.w	r3, r7, #9152	@ 0x23c0
 8006ca8:	f103 030c 	add.w	r3, r3, #12
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	f507 530f 	add.w	r3, r7, #9152	@ 0x23c0
 8006cb2:	f103 0308 	add.w	r3, r3, #8
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f507 520f 	add.w	r2, r7, #9152	@ 0x23c0
 8006cbe:	f102 0204 	add.w	r2, r2, #4
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f507 520e 	add.w	r2, r7, #9088	@ 0x2380
 8006cca:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8006cce:	6013      	str	r3, [r2, #0]
  {
 8006cd0:	e746      	b.n	8006b60 <main+0x1a>
	...

08006cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b092      	sub	sp, #72	@ 0x48
 8006cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006cda:	f107 0314 	add.w	r3, r7, #20
 8006cde:	2234      	movs	r2, #52	@ 0x34
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f003 fc88 	bl	800a5f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006ce8:	463b      	mov	r3, r7
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	609a      	str	r2, [r3, #8]
 8006cf2:	60da      	str	r2, [r3, #12]
 8006cf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d6c <SystemClock_Config+0x98>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8006cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <SystemClock_Config+0x98>)
 8006d00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006d04:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006d06:	2302      	movs	r3, #2
 8006d08:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006d0e:	2310      	movs	r3, #16
 8006d10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d12:	2302      	movs	r3, #2
 8006d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006d16:	2300      	movs	r3, #0
 8006d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8006d1a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8006d20:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006d24:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d26:	f107 0314 	add.w	r3, r7, #20
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f002 fb6a 	bl	8009404 <HAL_RCC_OscConfig>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8006d36:	f000 f8ab 	bl	8006e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d3a:	230f      	movs	r3, #15
 8006d3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006d4e:	463b      	mov	r3, r7
 8006d50:	2101      	movs	r1, #1
 8006d52:	4618      	mov	r0, r3
 8006d54:	f002 fe86 	bl	8009a64 <HAL_RCC_ClockConfig>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8006d5e:	f000 f897 	bl	8006e90 <Error_Handler>
  }
}
 8006d62:	bf00      	nop
 8006d64:	3748      	adds	r7, #72	@ 0x48
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40007000 	.word	0x40007000

08006d70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006d74:	4b11      	ldr	r3, [pc, #68]	@ (8006dbc <MX_USART2_UART_Init+0x4c>)
 8006d76:	4a12      	ldr	r2, [pc, #72]	@ (8006dc0 <MX_USART2_UART_Init+0x50>)
 8006d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006d7a:	4b10      	ldr	r3, [pc, #64]	@ (8006dbc <MX_USART2_UART_Init+0x4c>)
 8006d7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006d82:	4b0e      	ldr	r3, [pc, #56]	@ (8006dbc <MX_USART2_UART_Init+0x4c>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006d88:	4b0c      	ldr	r3, [pc, #48]	@ (8006dbc <MX_USART2_UART_Init+0x4c>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dbc <MX_USART2_UART_Init+0x4c>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006d94:	4b09      	ldr	r3, [pc, #36]	@ (8006dbc <MX_USART2_UART_Init+0x4c>)
 8006d96:	220c      	movs	r2, #12
 8006d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d9a:	4b08      	ldr	r3, [pc, #32]	@ (8006dbc <MX_USART2_UART_Init+0x4c>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006da0:	4b06      	ldr	r3, [pc, #24]	@ (8006dbc <MX_USART2_UART_Init+0x4c>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006da6:	4805      	ldr	r0, [pc, #20]	@ (8006dbc <MX_USART2_UART_Init+0x4c>)
 8006da8:	f003 f922 	bl	8009ff0 <HAL_UART_Init>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006db2:	f000 f86d 	bl	8006e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	200001b0 	.word	0x200001b0
 8006dc0:	40004400 	.word	0x40004400

08006dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08a      	sub	sp, #40	@ 0x28
 8006dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dca:	f107 0314 	add.w	r3, r7, #20
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	605a      	str	r2, [r3, #4]
 8006dd4:	609a      	str	r2, [r3, #8]
 8006dd6:	60da      	str	r2, [r3, #12]
 8006dd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dda:	4b2a      	ldr	r3, [pc, #168]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	4a29      	ldr	r2, [pc, #164]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006de0:	f043 0304 	orr.w	r3, r3, #4
 8006de4:	61d3      	str	r3, [r2, #28]
 8006de6:	4b27      	ldr	r3, [pc, #156]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	613b      	str	r3, [r7, #16]
 8006df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006df2:	4b24      	ldr	r3, [pc, #144]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	4a23      	ldr	r2, [pc, #140]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006df8:	f043 0320 	orr.w	r3, r3, #32
 8006dfc:	61d3      	str	r3, [r2, #28]
 8006dfe:	4b21      	ldr	r3, [pc, #132]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	61d3      	str	r3, [r2, #28]
 8006e16:	4b1b      	ldr	r3, [pc, #108]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e22:	4b18      	ldr	r3, [pc, #96]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	4a17      	ldr	r2, [pc, #92]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006e28:	f043 0302 	orr.w	r3, r3, #2
 8006e2c:	61d3      	str	r3, [r2, #28]
 8006e2e:	4b15      	ldr	r3, [pc, #84]	@ (8006e84 <MX_GPIO_Init+0xc0>)
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	607b      	str	r3, [r7, #4]
 8006e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2120      	movs	r1, #32
 8006e3e:	4812      	ldr	r0, [pc, #72]	@ (8006e88 <MX_GPIO_Init+0xc4>)
 8006e40:	f002 fac8 	bl	80093d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006e44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006e4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	4619      	mov	r1, r3
 8006e5a:	480c      	ldr	r0, [pc, #48]	@ (8006e8c <MX_GPIO_Init+0xc8>)
 8006e5c:	f002 f92a 	bl	80090b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8006e60:	2320      	movs	r3, #32
 8006e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e64:	2301      	movs	r3, #1
 8006e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	4619      	mov	r1, r3
 8006e76:	4804      	ldr	r0, [pc, #16]	@ (8006e88 <MX_GPIO_Init+0xc4>)
 8006e78:	f002 f91c 	bl	80090b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006e7c:	bf00      	nop
 8006e7e:	3728      	adds	r7, #40	@ 0x28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40023800 	.word	0x40023800
 8006e88:	40020000 	.word	0x40020000
 8006e8c:	40020800 	.word	0x40020800

08006e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e94:	b672      	cpsid	i
}
 8006e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e98:	bf00      	nop
 8006e9a:	e7fd      	b.n	8006e98 <Error_Handler+0x8>

08006e9c <load8>:
/**
 * @file parsing.c
 * @brief Functions to parse secret key, public key and ciphertext of the HQC scheme
 */

static uint64_t load8(const uint8_t *in) {
 8006e9c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8006ea0:	b087      	sub	sp, #28
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
    uint64_t ret = in[7];
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	3107      	adds	r1, #7
 8006eaa:	7809      	ldrb	r1, [r1, #0]
 8006eac:	b2c9      	uxtb	r1, r1
 8006eae:	2000      	movs	r0, #0
 8006eb0:	460a      	mov	r2, r1
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    for (int8_t i = 6; i >= 0; --i) {
 8006eb8:	2306      	movs	r3, #6
 8006eba:	73fb      	strb	r3, [r7, #15]
 8006ebc:	e020      	b.n	8006f00 <load8+0x64>
        ret <<= 8;
 8006ebe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	020b      	lsls	r3, r1, #8
 8006ecc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ed0:	0202      	lsls	r2, r0, #8
 8006ed2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ret |= in[i];
 8006ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	461c      	mov	r4, r3
 8006ee6:	4615      	mov	r5, r2
 8006ee8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006eec:	ea42 0804 	orr.w	r8, r2, r4
 8006ef0:	ea43 0905 	orr.w	r9, r3, r5
 8006ef4:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (int8_t i = 6; i >= 0; --i) {
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	73fb      	strb	r3, [r7, #15]
 8006f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	dada      	bge.n	8006ebe <load8+0x22>
    }

    return ret;
 8006f08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4619      	mov	r1, r3
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8006f18:	4770      	bx	lr

08006f1a <PQCLEAN_HQC128_CLEAN_load8_arr>:

void PQCLEAN_HQC128_CLEAN_load8_arr(uint64_t *out64, size_t outlen, const uint8_t *in8, size_t inlen) {
 8006f1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1e:	b089      	sub	sp, #36	@ 0x24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
    size_t index_in = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61fb      	str	r3, [r7, #28]
    size_t index_out = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61bb      	str	r3, [r7, #24]

    // first copy by 8 bytes
    if (inlen >= 8 && outlen >= 1) {
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b07      	cmp	r3, #7
 8006f36:	d920      	bls.n	8006f7a <PQCLEAN_HQC128_CLEAN_load8_arr+0x60>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01d      	beq.n	8006f7a <PQCLEAN_HQC128_CLEAN_load8_arr+0x60>
        while (index_out < outlen && index_in + 8 <= inlen) {
 8006f3e:	e013      	b.n	8006f68 <PQCLEAN_HQC128_CLEAN_load8_arr+0x4e>
            out64[index_out] = load8(in8 + index_in);
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	18d1      	adds	r1, r2, r3
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	68fa      	ldr	r2, [r7, #12]
 8006f4c:	18d6      	adds	r6, r2, r3
 8006f4e:	4608      	mov	r0, r1
 8006f50:	f7ff ffa4 	bl	8006e9c <load8>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	e9c6 2300 	strd	r2, r3, [r6]

            index_in += 8;
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	61fb      	str	r3, [r7, #28]
            index_out += 1;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	3301      	adds	r3, #1
 8006f66:	61bb      	str	r3, [r7, #24]
        while (index_out < outlen && index_in + 8 <= inlen) {
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d204      	bcs.n	8006f7a <PQCLEAN_HQC128_CLEAN_load8_arr+0x60>
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	3308      	adds	r3, #8
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d2e2      	bcs.n	8006f40 <PQCLEAN_HQC128_CLEAN_load8_arr+0x26>
        }
    }

    // we now need to do the last 7 bytes if necessary
    if (index_in >= inlen || index_out >= outlen) {
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d254      	bcs.n	800702c <PQCLEAN_HQC128_CLEAN_load8_arr+0x112>
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d250      	bcs.n	800702c <PQCLEAN_HQC128_CLEAN_load8_arr+0x112>
        return;
    }
    out64[index_out] = in8[inlen - 1];
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4413      	add	r3, r2
 8006f92:	7819      	ldrb	r1, [r3, #0]
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	b2ca      	uxtb	r2, r1
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4692      	mov	sl, r2
 8006fa2:	468b      	mov	fp, r1
 8006fa4:	e9c3 ab00 	strd	sl, fp, [r3]
    for (int8_t i = (int8_t)(inlen - index_in) - 2; i >= 0; --i) {
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	3b02      	subs	r3, #2
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	75fb      	strb	r3, [r7, #23]
 8006fba:	e032      	b.n	8007022 <PQCLEAN_HQC128_CLEAN_load8_arr+0x108>
        out64[index_out] <<= 8;
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	18d6      	adds	r6, r2, r3
 8006fd0:	f04f 0200 	mov.w	r2, #0
 8006fd4:	f04f 0300 	mov.w	r3, #0
 8006fd8:	020b      	lsls	r3, r1, #8
 8006fda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fde:	0202      	lsls	r2, r0, #8
 8006fe0:	e9c6 2300 	strd	r2, r3, [r6]
        out64[index_out] |= in8[index_in + i];
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f997 0017 	ldrsb.w	r0, [r7, #23]
 8006ff4:	69f9      	ldr	r1, [r7, #28]
 8006ff6:	4401      	add	r1, r0
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	4401      	add	r1, r0
 8006ffc:	7809      	ldrb	r1, [r1, #0]
 8006ffe:	b2c9      	uxtb	r1, r1
 8007000:	2000      	movs	r0, #0
 8007002:	460c      	mov	r4, r1
 8007004:	4605      	mov	r5, r0
 8007006:	69b9      	ldr	r1, [r7, #24]
 8007008:	00c9      	lsls	r1, r1, #3
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	4401      	add	r1, r0
 800700e:	ea42 0804 	orr.w	r8, r2, r4
 8007012:	ea43 0905 	orr.w	r9, r3, r5
 8007016:	e9c1 8900 	strd	r8, r9, [r1]
    for (int8_t i = (int8_t)(inlen - index_in) - 2; i >= 0; --i) {
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	3b01      	subs	r3, #1
 800701e:	b2db      	uxtb	r3, r3
 8007020:	75fb      	strb	r3, [r7, #23]
 8007022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007026:	2b00      	cmp	r3, #0
 8007028:	dac8      	bge.n	8006fbc <PQCLEAN_HQC128_CLEAN_load8_arr+0xa2>
 800702a:	e000      	b.n	800702e <PQCLEAN_HQC128_CLEAN_load8_arr+0x114>
        return;
 800702c:	bf00      	nop
    }
}
 800702e:	3724      	adds	r7, #36	@ 0x24
 8007030:	46bd      	mov	sp, r7
 8007032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007036 <PQCLEAN_HQC128_CLEAN_store8_arr>:

void PQCLEAN_HQC128_CLEAN_store8_arr(uint8_t *out8, size_t outlen, const uint64_t *in64, size_t inlen) {
 8007036:	b4f0      	push	{r4, r5, r6, r7}
 8007038:	b086      	sub	sp, #24
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
 8007042:	603b      	str	r3, [r7, #0]
    for (size_t index_out = 0, index_in = 0; index_out < outlen && index_in < inlen;) {
 8007044:	2300      	movs	r3, #0
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	2300      	movs	r3, #0
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	e027      	b.n	800709e <PQCLEAN_HQC128_CLEAN_store8_arr+0x68>
        out8[index_out] = (in64[index_in] >> ((index_out % 8) * 8)) & 0xFF;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	6979      	ldr	r1, [r7, #20]
 800705c:	f001 0107 	and.w	r1, r1, #7
 8007060:	00c9      	lsls	r1, r1, #3
 8007062:	f1c1 0620 	rsb	r6, r1, #32
 8007066:	f1a1 0020 	sub.w	r0, r1, #32
 800706a:	fa22 f401 	lsr.w	r4, r2, r1
 800706e:	fa03 f606 	lsl.w	r6, r3, r6
 8007072:	4334      	orrs	r4, r6
 8007074:	fa23 f000 	lsr.w	r0, r3, r0
 8007078:	4304      	orrs	r4, r0
 800707a:	fa23 f501 	lsr.w	r5, r3, r1
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	4413      	add	r3, r2
 8007084:	b2e2      	uxtb	r2, r4
 8007086:	701a      	strb	r2, [r3, #0]
        ++index_out;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	3301      	adds	r3, #1
 800708c:	617b      	str	r3, [r7, #20]
        if (index_out % 8 == 0) {
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <PQCLEAN_HQC128_CLEAN_store8_arr+0x68>
            ++index_in;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	3301      	adds	r3, #1
 800709c:	613b      	str	r3, [r7, #16]
    for (size_t index_out = 0, index_in = 0; index_out < outlen && index_in < inlen;) {
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d203      	bcs.n	80070ae <PQCLEAN_HQC128_CLEAN_store8_arr+0x78>
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d3cf      	bcc.n	800704e <PQCLEAN_HQC128_CLEAN_store8_arr+0x18>
        }
    }
}
 80070ae:	bf00      	nop
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bcf0      	pop	{r4, r5, r6, r7}
 80070b6:	4770      	bx	lr

080070b8 <PQCLEAN_HQC128_CLEAN_hqc_secret_key_to_string>:
 * @param[out] sk String containing the secret key
 * @param[in] sk_seed Seed used to generate the secret key
 * @param[in] sigma String used in HHK transform
 * @param[in] pk String containing the public key
 */
void PQCLEAN_HQC128_CLEAN_hqc_secret_key_to_string(uint8_t *sk, const uint8_t *sk_seed, const uint8_t *sigma, const uint8_t *pk) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
    memcpy(sk, sk_seed, SEED_BYTES);
 80070c6:	2228      	movs	r2, #40	@ 0x28
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f003 fad9 	bl	800a682 <memcpy>
    memcpy(sk + SEED_BYTES, sigma, VEC_K_SIZE_BYTES);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	3328      	adds	r3, #40	@ 0x28
 80070d4:	2210      	movs	r2, #16
 80070d6:	6879      	ldr	r1, [r7, #4]
 80070d8:	4618      	mov	r0, r3
 80070da:	f003 fad2 	bl	800a682 <memcpy>
    memcpy(sk + SEED_BYTES + VEC_K_SIZE_BYTES, pk, PUBLIC_KEY_BYTES);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3338      	adds	r3, #56	@ 0x38
 80070e2:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f003 faca 	bl	800a682 <memcpy>
}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <PQCLEAN_HQC128_CLEAN_hqc_secret_key_from_string>:
 * @param[out] x uint64_t representation of vector x
 * @param[out] y uint64_t representation of vector y
 * @param[out] pk String containing the public key
 * @param[in] sk String containing the secret key
 */
void PQCLEAN_HQC128_CLEAN_hqc_secret_key_from_string(uint64_t *x, uint64_t *y, uint8_t *sigma, uint8_t *pk, const uint8_t *sk) {
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b086      	sub	sp, #24
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	603b      	str	r3, [r7, #0]
    seedexpander_state sk_seedexpander;

    memcpy(sigma, sk + SEED_BYTES, VEC_K_SIZE_BYTES);
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	3328      	adds	r3, #40	@ 0x28
 8007108:	2210      	movs	r2, #16
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f003 fab8 	bl	800a682 <memcpy>
    PQCLEAN_HQC128_CLEAN_seedexpander_init(&sk_seedexpander, sk, SEED_BYTES);
 8007112:	f107 0314 	add.w	r3, r7, #20
 8007116:	2228      	movs	r2, #40	@ 0x28
 8007118:	6a39      	ldr	r1, [r7, #32]
 800711a:	4618      	mov	r0, r3
 800711c:	f001 f894 	bl	8008248 <PQCLEAN_HQC128_CLEAN_seedexpander_init>

    PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight(&sk_seedexpander, x, PARAM_OMEGA);
 8007120:	f107 0314 	add.w	r3, r7, #20
 8007124:	2242      	movs	r2, #66	@ 0x42
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	4618      	mov	r0, r3
 800712a:	f001 fb2b 	bl	8008784 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight>
    PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight(&sk_seedexpander, y, PARAM_OMEGA);
 800712e:	f107 0314 	add.w	r3, r7, #20
 8007132:	2242      	movs	r2, #66	@ 0x42
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	4618      	mov	r0, r3
 8007138:	f001 fb24 	bl	8008784 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight>
    memcpy(pk, sk + SEED_BYTES + VEC_K_SIZE_BYTES, PUBLIC_KEY_BYTES);
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	3338      	adds	r3, #56	@ 0x38
 8007140:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8007144:	4619      	mov	r1, r3
 8007146:	6838      	ldr	r0, [r7, #0]
 8007148:	f003 fa9b 	bl	800a682 <memcpy>

    PQCLEAN_HQC128_CLEAN_seedexpander_release(&sk_seedexpander);
 800714c:	f107 0314 	add.w	r3, r7, #20
 8007150:	4618      	mov	r0, r3
 8007152:	f001 f8d7 	bl	8008304 <PQCLEAN_HQC128_CLEAN_seedexpander_release>
}
 8007156:	bf00      	nop
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <PQCLEAN_HQC128_CLEAN_hqc_public_key_to_string>:
 *
 * @param[out] pk String containing the public key
 * @param[in] pk_seed Seed used to generate the public key
 * @param[in] s uint64_t representation of vector s
 */
void PQCLEAN_HQC128_CLEAN_hqc_public_key_to_string(uint8_t *pk, const uint8_t *pk_seed, const uint64_t *s) {
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
    memcpy(pk, pk_seed, SEED_BYTES);
 800716a:	2228      	movs	r2, #40	@ 0x28
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f003 fa87 	bl	800a682 <memcpy>
    PQCLEAN_HQC128_CLEAN_store8_arr(pk + SEED_BYTES, VEC_N_SIZE_BYTES, s, VEC_N_SIZE_64);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800717a:	f240 1315 	movw	r3, #277	@ 0x115
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	f640 01a1 	movw	r1, #2209	@ 0x8a1
 8007184:	f7ff ff57 	bl	8007036 <PQCLEAN_HQC128_CLEAN_store8_arr>
}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <PQCLEAN_HQC128_CLEAN_hqc_public_key_from_string>:
 *
 * @param[out] h uint64_t representation of vector h
 * @param[out] s uint64_t representation of vector s
 * @param[in] pk String containing the public key
 */
void PQCLEAN_HQC128_CLEAN_hqc_public_key_from_string(uint64_t *h, uint64_t *s, const uint8_t *pk) {
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
    seedexpander_state pk_seedexpander;

    PQCLEAN_HQC128_CLEAN_seedexpander_init(&pk_seedexpander, pk, SEED_BYTES);
 800719c:	f107 0314 	add.w	r3, r7, #20
 80071a0:	2228      	movs	r2, #40	@ 0x28
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 f84f 	bl	8008248 <PQCLEAN_HQC128_CLEAN_seedexpander_init>
    PQCLEAN_HQC128_CLEAN_vect_set_random(&pk_seedexpander, h);
 80071aa:	f107 0314 	add.w	r3, r7, #20
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 fd04 	bl	8008bbe <PQCLEAN_HQC128_CLEAN_vect_set_random>

    PQCLEAN_HQC128_CLEAN_load8_arr(s, VEC_N_SIZE_64, pk + SEED_BYTES, VEC_N_SIZE_BYTES);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80071bc:	f640 03a1 	movw	r3, #2209	@ 0x8a1
 80071c0:	f240 1115 	movw	r1, #277	@ 0x115
 80071c4:	68b8      	ldr	r0, [r7, #8]
 80071c6:	f7ff fea8 	bl	8006f1a <PQCLEAN_HQC128_CLEAN_load8_arr>

    PQCLEAN_HQC128_CLEAN_seedexpander_release(&pk_seedexpander);
 80071ca:	f107 0314 	add.w	r3, r7, #20
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 f898 	bl	8008304 <PQCLEAN_HQC128_CLEAN_seedexpander_release>
}
 80071d4:	bf00      	nop
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <PQCLEAN_HQC128_CLEAN_hqc_ciphertext_to_string>:
 * @param[out] ct String containing the ciphertext
 * @param[in] u uint64_t representation of vector u
 * @param[in] v uint64_t representation of vector v
 * @param[in] salt String containing a salt
 */
void PQCLEAN_HQC128_CLEAN_hqc_ciphertext_to_string(uint8_t *ct, const uint64_t *u, const uint64_t *v, const uint8_t *salt) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
    PQCLEAN_HQC128_CLEAN_store8_arr(ct, VEC_N_SIZE_BYTES, u, VEC_N_SIZE_64);
 80071ea:	f240 1315 	movw	r3, #277	@ 0x115
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	f640 01a1 	movw	r1, #2209	@ 0x8a1
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7ff ff1e 	bl	8007036 <PQCLEAN_HQC128_CLEAN_store8_arr>
    PQCLEAN_HQC128_CLEAN_store8_arr(ct + VEC_N_SIZE_BYTES, VEC_N1N2_SIZE_BYTES, v, VEC_N1N2_SIZE_64);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f603 00a1 	addw	r0, r3, #2209	@ 0x8a1
 8007200:	f44f 738a 	mov.w	r3, #276	@ 0x114
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	f44f 610a 	mov.w	r1, #2208	@ 0x8a0
 800720a:	f7ff ff14 	bl	8007036 <PQCLEAN_HQC128_CLEAN_store8_arr>
    memcpy(ct + VEC_N_SIZE_BYTES + VEC_N1N2_SIZE_BYTES, salt, SALT_SIZE_BYTES);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 8007214:	3301      	adds	r3, #1
 8007216:	2210      	movs	r2, #16
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f003 fa31 	bl	800a682 <memcpy>
}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <PQCLEAN_HQC128_CLEAN_hqc_ciphertext_from_string>:
 * @param[out] u uint64_t representation of vector u
 * @param[out] v uint64_t representation of vector v
 * @param[out] d String containing the hash d
 * @param[in] ct String containing the ciphertext
 */
void PQCLEAN_HQC128_CLEAN_hqc_ciphertext_from_string(uint64_t *u, uint64_t *v, uint8_t *salt, const uint8_t *ct) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
    PQCLEAN_HQC128_CLEAN_load8_arr(u, VEC_N_SIZE_64, ct, VEC_N_SIZE_BYTES);
 8007236:	f640 03a1 	movw	r3, #2209	@ 0x8a1
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	f240 1115 	movw	r1, #277	@ 0x115
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fe6a 	bl	8006f1a <PQCLEAN_HQC128_CLEAN_load8_arr>
    PQCLEAN_HQC128_CLEAN_load8_arr(v, VEC_N1N2_SIZE_64, ct + VEC_N_SIZE_BYTES, VEC_N1N2_SIZE_BYTES);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	f603 02a1 	addw	r2, r3, #2209	@ 0x8a1
 800724c:	f44f 630a 	mov.w	r3, #2208	@ 0x8a0
 8007250:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8007254:	68b8      	ldr	r0, [r7, #8]
 8007256:	f7ff fe60 	bl	8006f1a <PQCLEAN_HQC128_CLEAN_load8_arr>
    memcpy(salt, ct + VEC_N_SIZE_BYTES + VEC_N1N2_SIZE_BYTES, SALT_SIZE_BYTES);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 8007260:	3301      	adds	r3, #1
 8007262:	2210      	movs	r2, #16
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f003 fa0b 	bl	800a682 <memcpy>
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <PQCLEAN_randombytes>:
    }
    assert(false); // Unreachable
}
#endif /* defined(__EMSCRIPTEN__) */

int randombytes(uint8_t *output, size_t n) {
 8007274:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
    for(unsigned long long j=0; j<n; j++)
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800728c:	e00f      	b.n	80072ae <PQCLEAN_randombytes+0x3a>
        output[j] = (uint8_t) rand();
 800728e:	f003 f8b3 	bl	800a3f8 <rand>
 8007292:	4601      	mov	r1, r0
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	4413      	add	r3, r2
 800729a:	b2ca      	uxtb	r2, r1
 800729c:	701a      	strb	r2, [r3, #0]
    for(unsigned long long j=0; j<n; j++)
 800729e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072a2:	f112 0801 	adds.w	r8, r2, #1
 80072a6:	f143 0900 	adc.w	r9, r3, #0
 80072aa:	e9c7 8902 	strd	r8, r9, [r7, #8]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2200      	movs	r2, #0
 80072b2:	461c      	mov	r4, r3
 80072b4:	4615      	mov	r5, r2
 80072b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072ba:	42a2      	cmp	r2, r4
 80072bc:	41ab      	sbcs	r3, r5
 80072be:	d3e6      	bcc.n	800728e <PQCLEAN_randombytes+0x1a>
    return 0;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080072cc <encode>:
 * 7   ffffffff ffffffff ffffffff ffffffff
 *
 * @param[out] word An RM(1,7) codeword
 * @param[in] message A message
 */
static void encode(uint64_t *cword, uint8_t message) {
 80072cc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072d0:	b08a      	sub	sp, #40	@ 0x28
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	61f8      	str	r0, [r7, #28]
 80072d6:	460b      	mov	r3, r1
 80072d8:	76fb      	strb	r3, [r7, #27]
    uint32_t first_word;
    // bit 7 flips all the bits, do that first to save work
    first_word = BIT0MASK(message >> 7);
 80072da:	7efb      	ldrb	r3, [r7, #27]
 80072dc:	09db      	lsrs	r3, r3, #7
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	425b      	negs	r3, r3
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
    // bits 0, 1, 2, 3, 4 are the same for all four longs
    // (Warning: in the bit matrix above, low bits are at the left!)
    first_word ^= BIT0MASK(message >> 0) & 0xaaaaaaaa;
 80072e8:	7efb      	ldrb	r3, [r7, #27]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	425b      	negs	r3, r3
 80072f0:	f003 33aa 	and.w	r3, r3, #2863311530	@ 0xaaaaaaaa
 80072f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f6:	4053      	eors	r3, r2
 80072f8:	627b      	str	r3, [r7, #36]	@ 0x24
    first_word ^= BIT0MASK(message >> 1) & 0xcccccccc;
 80072fa:	7efb      	ldrb	r3, [r7, #27]
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	425b      	negs	r3, r3
 8007306:	f003 33cc 	and.w	r3, r3, #3435973836	@ 0xcccccccc
 800730a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800730c:	4053      	eors	r3, r2
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
    first_word ^= BIT0MASK(message >> 2) & 0xf0f0f0f0;
 8007310:	7efb      	ldrb	r3, [r7, #27]
 8007312:	089b      	lsrs	r3, r3, #2
 8007314:	b2db      	uxtb	r3, r3
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	425b      	negs	r3, r3
 800731c:	f003 33f0 	and.w	r3, r3, #4042322160	@ 0xf0f0f0f0
 8007320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007322:	4053      	eors	r3, r2
 8007324:	627b      	str	r3, [r7, #36]	@ 0x24
    first_word ^= BIT0MASK(message >> 3) & 0xff00ff00;
 8007326:	7efb      	ldrb	r3, [r7, #27]
 8007328:	08db      	lsrs	r3, r3, #3
 800732a:	b2db      	uxtb	r3, r3
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	425b      	negs	r3, r3
 8007332:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8007336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007338:	4053      	eors	r3, r2
 800733a:	627b      	str	r3, [r7, #36]	@ 0x24
    first_word ^= BIT0MASK(message >> 4) & 0xffff0000;
 800733c:	7efb      	ldrb	r3, [r7, #27]
 800733e:	091b      	lsrs	r3, r3, #4
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	425b      	negs	r3, r3
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	041b      	lsls	r3, r3, #16
 800734c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734e:	4053      	eors	r3, r2
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
    // we can store this in the first quarter
    cword[0] = first_word;
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007354:	2200      	movs	r2, #0
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	617a      	str	r2, [r7, #20]
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007360:	e9c3 1200 	strd	r1, r2, [r3]
    // bit 5 flips entries 1 and 3; bit 6 flips 2 and 3
    first_word ^= BIT0MASK(message >> 5);
 8007364:	7efb      	ldrb	r3, [r7, #27]
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	b2db      	uxtb	r3, r3
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	425b      	negs	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	4053      	eors	r3, r2
 8007376:	627b      	str	r3, [r7, #36]	@ 0x24
    cword[0] |= (uint64_t)first_word << 32;
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	2200      	movs	r2, #0
 8007382:	60bb      	str	r3, [r7, #8]
 8007384:	60fa      	str	r2, [r7, #12]
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	68be      	ldr	r6, [r7, #8]
 8007390:	0033      	movs	r3, r6
 8007392:	2200      	movs	r2, #0
 8007394:	ea40 0a02 	orr.w	sl, r0, r2
 8007398:	ea41 0b03 	orr.w	fp, r1, r3
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	e9c3 ab00 	strd	sl, fp, [r3]
    first_word ^= BIT0MASK(message >> 6);
 80073a2:	7efb      	ldrb	r3, [r7, #27]
 80073a4:	099b      	lsrs	r3, r3, #6
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	425b      	negs	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	4053      	eors	r3, r2
 80073b4:	627b      	str	r3, [r7, #36]	@ 0x24
    cword[1] = (uint64_t)first_word << 32;
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	2200      	movs	r2, #0
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	607a      	str	r2, [r7, #4]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	f103 0108 	add.w	r1, r3, #8
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	6838      	ldr	r0, [r7, #0]
 80073ce:	0003      	movs	r3, r0
 80073d0:	2200      	movs	r2, #0
 80073d2:	e9c1 2300 	strd	r2, r3, [r1]
    first_word ^= BIT0MASK(message >> 5);
 80073d6:	7efb      	ldrb	r3, [r7, #27]
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	425b      	negs	r3, r3
 80073e2:	461a      	mov	r2, r3
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	4053      	eors	r3, r2
 80073e8:	627b      	str	r3, [r7, #36]	@ 0x24
    cword[1] |= first_word;
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	3308      	adds	r3, #8
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80073f4:	2000      	movs	r0, #0
 80073f6:	460c      	mov	r4, r1
 80073f8:	4605      	mov	r5, r0
 80073fa:	69f9      	ldr	r1, [r7, #28]
 80073fc:	3108      	adds	r1, #8
 80073fe:	ea42 0804 	orr.w	r8, r2, r4
 8007402:	ea43 0905 	orr.w	r9, r3, r5
 8007406:	e9c1 8900 	strd	r8, r9, [r1]
}
 800740a:	bf00      	nop
 800740c:	3728      	adds	r7, #40	@ 0x28
 800740e:	46bd      	mov	sp, r7
 8007410:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007414:	4770      	bx	lr

08007416 <hadamard>:
 * src is overwritten
 *
 * @param[out] src Structure that contain the expanded codeword
 * @param[out] dst Structure that contain the expanded codeword
 */
static void hadamard(uint16_t src[128], uint16_t dst[128]) {
 8007416:	b480      	push	{r7}
 8007418:	b089      	sub	sp, #36	@ 0x24
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
    // the passes move data:
    // src -> dst -> src -> dst -> src -> dst -> src -> dst
    // using p1 and p2 alternately
    uint16_t *p1 = src;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	61fb      	str	r3, [r7, #28]
    uint16_t *p2 = dst;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	61bb      	str	r3, [r7, #24]
    uint16_t *p3;
    for (size_t pass = 0; pass < 7; ++pass) {
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	e036      	b.n	800749c <hadamard+0x86>
        for (size_t i = 0; i < 64; ++i) {
 800742e:	2300      	movs	r3, #0
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	e027      	b.n	8007484 <hadamard+0x6e>
            p2[i] = p1[2 * i] + p1[2 * i + 1];
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	4413      	add	r3, r2
 800743c:	8819      	ldrh	r1, [r3, #0]
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	3302      	adds	r3, #2
 8007444:	69fa      	ldr	r2, [r7, #28]
 8007446:	4413      	add	r3, r2
 8007448:	881a      	ldrh	r2, [r3, #0]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	69b8      	ldr	r0, [r7, #24]
 8007450:	4403      	add	r3, r0
 8007452:	440a      	add	r2, r1
 8007454:	b292      	uxth	r2, r2
 8007456:	801a      	strh	r2, [r3, #0]
            p2[i + 64] = p1[2 * i] - p1[2 * i + 1];
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	8819      	ldrh	r1, [r3, #0]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	3302      	adds	r3, #2
 8007468:	69fa      	ldr	r2, [r7, #28]
 800746a:	4413      	add	r3, r2
 800746c:	881a      	ldrh	r2, [r3, #0]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3340      	adds	r3, #64	@ 0x40
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	69b8      	ldr	r0, [r7, #24]
 8007476:	4403      	add	r3, r0
 8007478:	1a8a      	subs	r2, r1, r2
 800747a:	b292      	uxth	r2, r2
 800747c:	801a      	strh	r2, [r3, #0]
        for (size_t i = 0; i < 64; ++i) {
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	3301      	adds	r3, #1
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b3f      	cmp	r3, #63	@ 0x3f
 8007488:	d9d4      	bls.n	8007434 <hadamard+0x1e>
        }
        // swap p1, p2 for next round
        p3 = p1;
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	60fb      	str	r3, [r7, #12]
        p1 = p2;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	61fb      	str	r3, [r7, #28]
        p2 = p3;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	61bb      	str	r3, [r7, #24]
    for (size_t pass = 0; pass < 7; ++pass) {
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	3301      	adds	r3, #1
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2b06      	cmp	r3, #6
 80074a0:	d9c5      	bls.n	800742e <hadamard+0x18>
    }
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	3724      	adds	r7, #36	@ 0x24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr

080074ae <expand_and_sum>:
 * the first entry is 64 too high
 *
 * @param[out] dest Structure that contain the expanded codeword
 * @param[in] src Structure that contain the codeword
 */
static void expand_and_sum(uint16_t dest[128], const uint64_t src[2 * MULTIPLICITY]) {
 80074ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074b0:	b089      	sub	sp, #36	@ 0x24
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
    // start with the first copy
    for (size_t part = 0; part < 2; ++part) {
 80074b8:	2100      	movs	r1, #0
 80074ba:	61f9      	str	r1, [r7, #28]
 80074bc:	e02e      	b.n	800751c <expand_and_sum+0x6e>
        for (size_t bit = 0; bit < 64; ++bit) {
 80074be:	2100      	movs	r1, #0
 80074c0:	61b9      	str	r1, [r7, #24]
 80074c2:	e025      	b.n	8007510 <expand_and_sum+0x62>
            dest[part * 64 + bit] = ((src[part] >> bit) & 1);
 80074c4:	69f9      	ldr	r1, [r7, #28]
 80074c6:	00c9      	lsls	r1, r1, #3
 80074c8:	6838      	ldr	r0, [r7, #0]
 80074ca:	4401      	add	r1, r0
 80074cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d0:	69be      	ldr	r6, [r7, #24]
 80074d2:	f1c6 0e20 	rsb	lr, r6, #32
 80074d6:	f1a6 0c20 	sub.w	ip, r6, #32
 80074da:	fa20 f406 	lsr.w	r4, r0, r6
 80074de:	fa01 fe0e 	lsl.w	lr, r1, lr
 80074e2:	ea44 040e 	orr.w	r4, r4, lr
 80074e6:	fa21 fc0c 	lsr.w	ip, r1, ip
 80074ea:	ea44 040c 	orr.w	r4, r4, ip
 80074ee:	fa21 f506 	lsr.w	r5, r1, r6
 80074f2:	b2a0      	uxth	r0, r4
 80074f4:	69f9      	ldr	r1, [r7, #28]
 80074f6:	018e      	lsls	r6, r1, #6
 80074f8:	69b9      	ldr	r1, [r7, #24]
 80074fa:	4431      	add	r1, r6
 80074fc:	0049      	lsls	r1, r1, #1
 80074fe:	687e      	ldr	r6, [r7, #4]
 8007500:	4431      	add	r1, r6
 8007502:	f000 0001 	and.w	r0, r0, #1
 8007506:	b280      	uxth	r0, r0
 8007508:	8008      	strh	r0, [r1, #0]
        for (size_t bit = 0; bit < 64; ++bit) {
 800750a:	69b9      	ldr	r1, [r7, #24]
 800750c:	3101      	adds	r1, #1
 800750e:	61b9      	str	r1, [r7, #24]
 8007510:	69b9      	ldr	r1, [r7, #24]
 8007512:	293f      	cmp	r1, #63	@ 0x3f
 8007514:	d9d6      	bls.n	80074c4 <expand_and_sum+0x16>
    for (size_t part = 0; part < 2; ++part) {
 8007516:	69f9      	ldr	r1, [r7, #28]
 8007518:	3101      	adds	r1, #1
 800751a:	61f9      	str	r1, [r7, #28]
 800751c:	69f9      	ldr	r1, [r7, #28]
 800751e:	2901      	cmp	r1, #1
 8007520:	d9cd      	bls.n	80074be <expand_and_sum+0x10>
        }
    }
    // sum the rest of the copies
    for (size_t copy = 1; copy < MULTIPLICITY; ++copy) {
 8007522:	2101      	movs	r1, #1
 8007524:	6179      	str	r1, [r7, #20]
 8007526:	e043      	b.n	80075b0 <expand_and_sum+0x102>
        for (size_t part = 0; part < 2; ++part) {
 8007528:	2100      	movs	r1, #0
 800752a:	6139      	str	r1, [r7, #16]
 800752c:	e03a      	b.n	80075a4 <expand_and_sum+0xf6>
            for (size_t bit = 0; bit < 64; ++bit) {
 800752e:	2100      	movs	r1, #0
 8007530:	60f9      	str	r1, [r7, #12]
 8007532:	e031      	b.n	8007598 <expand_and_sum+0xea>
                dest[part * 64 + bit] += (uint16_t) ((src[2 * copy + part] >> bit) & 1);
 8007534:	6939      	ldr	r1, [r7, #16]
 8007536:	0188      	lsls	r0, r1, #6
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	4401      	add	r1, r0
 800753c:	0049      	lsls	r1, r1, #1
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4401      	add	r1, r0
 8007542:	f8b1 c000 	ldrh.w	ip, [r1]
 8007546:	6979      	ldr	r1, [r7, #20]
 8007548:	0048      	lsls	r0, r1, #1
 800754a:	6939      	ldr	r1, [r7, #16]
 800754c:	4401      	add	r1, r0
 800754e:	00c9      	lsls	r1, r1, #3
 8007550:	6838      	ldr	r0, [r7, #0]
 8007552:	4401      	add	r1, r0
 8007554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007558:	68fc      	ldr	r4, [r7, #12]
 800755a:	f1c4 0620 	rsb	r6, r4, #32
 800755e:	f1a4 0520 	sub.w	r5, r4, #32
 8007562:	fa20 f204 	lsr.w	r2, r0, r4
 8007566:	fa01 f606 	lsl.w	r6, r1, r6
 800756a:	4332      	orrs	r2, r6
 800756c:	fa21 f505 	lsr.w	r5, r1, r5
 8007570:	432a      	orrs	r2, r5
 8007572:	fa21 f304 	lsr.w	r3, r1, r4
 8007576:	b291      	uxth	r1, r2
 8007578:	f001 0101 	and.w	r1, r1, #1
 800757c:	b288      	uxth	r0, r1
 800757e:	6939      	ldr	r1, [r7, #16]
 8007580:	018c      	lsls	r4, r1, #6
 8007582:	68f9      	ldr	r1, [r7, #12]
 8007584:	4421      	add	r1, r4
 8007586:	0049      	lsls	r1, r1, #1
 8007588:	687c      	ldr	r4, [r7, #4]
 800758a:	4421      	add	r1, r4
 800758c:	4460      	add	r0, ip
 800758e:	b280      	uxth	r0, r0
 8007590:	8008      	strh	r0, [r1, #0]
            for (size_t bit = 0; bit < 64; ++bit) {
 8007592:	68f9      	ldr	r1, [r7, #12]
 8007594:	3101      	adds	r1, #1
 8007596:	60f9      	str	r1, [r7, #12]
 8007598:	68f9      	ldr	r1, [r7, #12]
 800759a:	293f      	cmp	r1, #63	@ 0x3f
 800759c:	d9ca      	bls.n	8007534 <expand_and_sum+0x86>
        for (size_t part = 0; part < 2; ++part) {
 800759e:	6939      	ldr	r1, [r7, #16]
 80075a0:	3101      	adds	r1, #1
 80075a2:	6139      	str	r1, [r7, #16]
 80075a4:	6939      	ldr	r1, [r7, #16]
 80075a6:	2901      	cmp	r1, #1
 80075a8:	d9c1      	bls.n	800752e <expand_and_sum+0x80>
    for (size_t copy = 1; copy < MULTIPLICITY; ++copy) {
 80075aa:	6979      	ldr	r1, [r7, #20]
 80075ac:	3101      	adds	r1, #1
 80075ae:	6179      	str	r1, [r7, #20]
 80075b0:	6979      	ldr	r1, [r7, #20]
 80075b2:	2902      	cmp	r1, #2
 80075b4:	d9b8      	bls.n	8007528 <expand_and_sum+0x7a>
            }
        }
    }
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	3724      	adds	r7, #36	@ 0x24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075c0 <find_peaks>:
 * and add 128 if the peak is positive
 * if there are two identical peaks, the peak with smallest value
 * in the lowest 7 bits it taken
 * @param[in] transform Structure that contain the expanded codeword
 */
static uint8_t find_peaks(const uint16_t transform[128]) {
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
    uint16_t peak_abs = 0;
 80075c8:	2300      	movs	r3, #0
 80075ca:	82fb      	strh	r3, [r7, #22]
    uint16_t peak = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	827b      	strh	r3, [r7, #18]
    uint16_t t, abs, mask;
    for (uint16_t i = 0; i < 128; ++i) {
 80075d4:	2300      	movs	r3, #0
 80075d6:	823b      	strh	r3, [r7, #16]
 80075d8:	e041      	b.n	800765e <find_peaks+0x9e>
        t = transform[i];
 80075da:	8a3b      	ldrh	r3, [r7, #16]
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	4413      	add	r3, r2
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	81fb      	strh	r3, [r7, #14]
        abs = t ^ ((uint16_t)(-(t >> 15)) & (t ^ -t)); // t = abs(t)
 80075e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80075ea:	13db      	asrs	r3, r3, #15
 80075ec:	b21a      	sxth	r2, r3
 80075ee:	89fb      	ldrh	r3, [r7, #14]
 80075f0:	425b      	negs	r3, r3
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	b219      	sxth	r1, r3
 80075f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80075fa:	404b      	eors	r3, r1
 80075fc:	b21b      	sxth	r3, r3
 80075fe:	4013      	ands	r3, r2
 8007600:	b21a      	sxth	r2, r3
 8007602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007606:	4053      	eors	r3, r2
 8007608:	b21b      	sxth	r3, r3
 800760a:	81bb      	strh	r3, [r7, #12]
        mask = -(((uint16_t)(peak_abs - abs)) >> 15);
 800760c:	8afa      	ldrh	r2, [r7, #22]
 800760e:	89bb      	ldrh	r3, [r7, #12]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	b29b      	uxth	r3, r3
 8007614:	b21b      	sxth	r3, r3
 8007616:	13db      	asrs	r3, r3, #15
 8007618:	b21b      	sxth	r3, r3
 800761a:	817b      	strh	r3, [r7, #10]
        peak ^= mask & (peak ^ t);
 800761c:	8aba      	ldrh	r2, [r7, #20]
 800761e:	89fb      	ldrh	r3, [r7, #14]
 8007620:	4053      	eors	r3, r2
 8007622:	b29a      	uxth	r2, r3
 8007624:	897b      	ldrh	r3, [r7, #10]
 8007626:	4013      	ands	r3, r2
 8007628:	b29a      	uxth	r2, r3
 800762a:	8abb      	ldrh	r3, [r7, #20]
 800762c:	4053      	eors	r3, r2
 800762e:	82bb      	strh	r3, [r7, #20]
        pos ^= mask & (pos ^ i);
 8007630:	8a7a      	ldrh	r2, [r7, #18]
 8007632:	8a3b      	ldrh	r3, [r7, #16]
 8007634:	4053      	eors	r3, r2
 8007636:	b29a      	uxth	r2, r3
 8007638:	897b      	ldrh	r3, [r7, #10]
 800763a:	4013      	ands	r3, r2
 800763c:	b29a      	uxth	r2, r3
 800763e:	8a7b      	ldrh	r3, [r7, #18]
 8007640:	4053      	eors	r3, r2
 8007642:	827b      	strh	r3, [r7, #18]
        peak_abs ^= mask & (peak_abs ^ abs);
 8007644:	8afa      	ldrh	r2, [r7, #22]
 8007646:	89bb      	ldrh	r3, [r7, #12]
 8007648:	4053      	eors	r3, r2
 800764a:	b29a      	uxth	r2, r3
 800764c:	897b      	ldrh	r3, [r7, #10]
 800764e:	4013      	ands	r3, r2
 8007650:	b29a      	uxth	r2, r3
 8007652:	8afb      	ldrh	r3, [r7, #22]
 8007654:	4053      	eors	r3, r2
 8007656:	82fb      	strh	r3, [r7, #22]
    for (uint16_t i = 0; i < 128; ++i) {
 8007658:	8a3b      	ldrh	r3, [r7, #16]
 800765a:	3301      	adds	r3, #1
 800765c:	823b      	strh	r3, [r7, #16]
 800765e:	8a3b      	ldrh	r3, [r7, #16]
 8007660:	2b7f      	cmp	r3, #127	@ 0x7f
 8007662:	d9ba      	bls.n	80075da <find_peaks+0x1a>
    }
    // set bit 7
    pos |= 128 & (uint16_t)((peak >> 15) - 1);
 8007664:	8abb      	ldrh	r3, [r7, #20]
 8007666:	0bdb      	lsrs	r3, r3, #15
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007672:	b29a      	uxth	r2, r3
 8007674:	8a7b      	ldrh	r3, [r7, #18]
 8007676:	4313      	orrs	r3, r2
 8007678:	827b      	strh	r3, [r7, #18]
    return (uint8_t) pos;
 800767a:	8a7b      	ldrh	r3, [r7, #18]
 800767c:	b2db      	uxtb	r3, r3
}
 800767e:	4618      	mov	r0, r3
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr

08007688 <PQCLEAN_HQC128_CLEAN_reed_muller_encode>:
 * or MULTIPLICITY repeats of 128 bits
 *
 * @param[out] cdw Array of size VEC_N1N2_SIZE_64 receiving the encoded message
 * @param[in] msg Array of size VEC_N1_SIZE_64 storing the message
 */
void PQCLEAN_HQC128_CLEAN_reed_muller_encode(uint64_t *cdw, const uint8_t *msg) {
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < VEC_N1_SIZE_BYTES; ++i) {
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	e02f      	b.n	80076f8 <PQCLEAN_HQC128_CLEAN_reed_muller_encode+0x70>
        // encode first word
        encode(&cdw[2 * i * MULTIPLICITY], msg[i]);
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4613      	mov	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	4413      	add	r3, r2
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	1898      	adds	r0, r3, r2
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	4619      	mov	r1, r3
 80076b2:	f7ff fe0b 	bl	80072cc <encode>
        // copy to other identical codewords
        for (size_t copy = 1; copy < MULTIPLICITY; ++copy) {
 80076b6:	2301      	movs	r3, #1
 80076b8:	60bb      	str	r3, [r7, #8]
 80076ba:	e017      	b.n	80076ec <PQCLEAN_HQC128_CLEAN_reed_muller_encode+0x64>
            memcpy(&cdw[2 * i * MULTIPLICITY + 2 * copy], &cdw[2 * i * MULTIPLICITY], 16);
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	441a      	add	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4413      	add	r3, r2
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	18d0      	adds	r0, r2, r3
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4613      	mov	r3, r2
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	4413      	add	r3, r2
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	461a      	mov	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4413      	add	r3, r2
 80076de:	2210      	movs	r2, #16
 80076e0:	4619      	mov	r1, r3
 80076e2:	f002 ffce 	bl	800a682 <memcpy>
        for (size_t copy = 1; copy < MULTIPLICITY; ++copy) {
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	3301      	adds	r3, #1
 80076ea:	60bb      	str	r3, [r7, #8]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d9e4      	bls.n	80076bc <PQCLEAN_HQC128_CLEAN_reed_muller_encode+0x34>
    for (size_t i = 0; i < VEC_N1_SIZE_BYTES; ++i) {
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3301      	adds	r3, #1
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80076fc:	d9cc      	bls.n	8007698 <PQCLEAN_HQC128_CLEAN_reed_muller_encode+0x10>
        }
    }
}
 80076fe:	bf00      	nop
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <PQCLEAN_HQC128_CLEAN_reed_muller_decode>:
 * The theory of error-correcting codes codes @cite macwilliams1977theory
 *
 * @param[out] msg Array of size VEC_N1_SIZE_64 receiving the decoded message
 * @param[in] cdw Array of size VEC_N1N2_SIZE_64 storing the received word
 */
void PQCLEAN_HQC128_CLEAN_reed_muller_decode(uint8_t *msg, const uint64_t *cdw) {
 8007708:	b590      	push	{r4, r7, lr}
 800770a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 800770e:	af00      	add	r7, sp, #0
 8007710:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007714:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8007718:	6018      	str	r0, [r3, #0]
 800771a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800771e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8007722:	6019      	str	r1, [r3, #0]
    uint16_t expanded[128];
    uint16_t transform[128];
    for (size_t i = 0; i < VEC_N1_SIZE_BYTES; ++i) {
 8007724:	2300      	movs	r3, #0
 8007726:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 800772a:	e03a      	b.n	80077a2 <PQCLEAN_HQC128_CLEAN_reed_muller_decode+0x9a>
        // collect the codewords
        expand_and_sum(expanded, &cdw[2 * i * MULTIPLICITY]);
 800772c:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8007730:	4613      	mov	r3, r2
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	4413      	add	r3, r2
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	461a      	mov	r2, r3
 800773a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800773e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	441a      	add	r2, r3
 8007746:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800774a:	4611      	mov	r1, r2
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff feae 	bl	80074ae <expand_and_sum>
        // apply hadamard transform
        hadamard(expanded, transform);
 8007752:	f107 020c 	add.w	r2, r7, #12
 8007756:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800775a:	4611      	mov	r1, r2
 800775c:	4618      	mov	r0, r3
 800775e:	f7ff fe5a 	bl	8007416 <hadamard>
        // fix the first entry to get the half Hadamard transform
        transform[0] -= 64 * MULTIPLICITY;
 8007762:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007766:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	3bc0      	subs	r3, #192	@ 0xc0
 800776e:	b29a      	uxth	r2, r3
 8007770:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8007774:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007778:	801a      	strh	r2, [r3, #0]
        // finish the decoding
        msg[i] = find_peaks(transform);
 800777a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800777e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8007788:	18d4      	adds	r4, r2, r3
 800778a:	f107 030c 	add.w	r3, r7, #12
 800778e:	4618      	mov	r0, r3
 8007790:	f7ff ff16 	bl	80075c0 <find_peaks>
 8007794:	4603      	mov	r3, r0
 8007796:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < VEC_N1_SIZE_BYTES; ++i) {
 8007798:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800779c:	3301      	adds	r3, #1
 800779e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80077a2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80077a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80077a8:	d9c0      	bls.n	800772c <PQCLEAN_HQC128_CLEAN_reed_muller_decode+0x24>
    }
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd90      	pop	{r4, r7, pc}
	...

080077b8 <PQCLEAN_HQC128_CLEAN_reed_solomon_encode>:
 * with feedback connections based on the generator polynomial PARAM_RS_POLY of the Reed-Solomon code.
 *
 * @param[out] cdw Array of size VEC_N1_SIZE_64 receiving the encoded message
 * @param[in] msg Array of size VEC_K_SIZE_64 storing the message
 */
void PQCLEAN_HQC128_CLEAN_reed_solomon_encode(uint8_t *cdw, const uint8_t *msg) {
 80077b8:	b5b0      	push	{r4, r5, r7, lr}
 80077ba:	b0a6      	sub	sp, #152	@ 0x98
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
    uint8_t gate_value = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

    uint16_t tmp[PARAM_G] = {0};
 80077c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80077cc:	223e      	movs	r2, #62	@ 0x3e
 80077ce:	2100      	movs	r1, #0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f002 ff11 	bl	800a5f8 <memset>
    uint16_t PARAM_RS_POLY [] = {RS_POLY_COEFS};
 80077d6:	4b41      	ldr	r3, [pc, #260]	@ (80078dc <PQCLEAN_HQC128_CLEAN_reed_solomon_encode+0x124>)
 80077d8:	f107 040c 	add.w	r4, r7, #12
 80077dc:	461d      	mov	r5, r3
 80077de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80077ee:	c407      	stmia	r4!, {r0, r1, r2}
 80077f0:	8023      	strh	r3, [r4, #0]

    memset(cdw, 0, PARAM_N1);
 80077f2:	222e      	movs	r2, #46	@ 0x2e
 80077f4:	2100      	movs	r1, #0
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f002 fefe 	bl	800a5f8 <memset>

    for (size_t i = 0; i < PARAM_K; ++i) {
 80077fc:	2300      	movs	r3, #0
 80077fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007802:	e05c      	b.n	80078be <PQCLEAN_HQC128_CLEAN_reed_solomon_encode+0x106>
        gate_value = msg[PARAM_K - 1 - i] ^ cdw[PARAM_N1 - PARAM_K - 1];
 8007804:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007808:	f1c3 030f 	rsb	r3, r3, #15
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	4413      	add	r3, r2
 8007810:	781a      	ldrb	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	331d      	adds	r3, #29
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	4053      	eors	r3, r2
 800781a:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

        for (size_t j = 0; j < PARAM_G; ++j) {
 800781e:	2300      	movs	r3, #0
 8007820:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007824:	e01b      	b.n	800785e <PQCLEAN_HQC128_CLEAN_reed_solomon_encode+0xa6>
            tmp[j] = PQCLEAN_HQC128_CLEAN_gf_mul(gate_value, PARAM_RS_POLY[j]);
 8007826:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800782a:	b29a      	uxth	r2, r3
 800782c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	3398      	adds	r3, #152	@ 0x98
 8007834:	443b      	add	r3, r7
 8007836:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f7fd fd24 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007842:	4603      	mov	r3, r0
 8007844:	461a      	mov	r2, r3
 8007846:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	3398      	adds	r3, #152	@ 0x98
 800784e:	443b      	add	r3, r7
 8007850:	f823 2c4c 	strh.w	r2, [r3, #-76]
        for (size_t j = 0; j < PARAM_G; ++j) {
 8007854:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007858:	3301      	adds	r3, #1
 800785a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800785e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007862:	2b1e      	cmp	r3, #30
 8007864:	d9df      	bls.n	8007826 <PQCLEAN_HQC128_CLEAN_reed_solomon_encode+0x6e>
        }

        for (size_t k = PARAM_N1 - PARAM_K - 1; k; --k) {
 8007866:	231d      	movs	r3, #29
 8007868:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800786c:	e019      	b.n	80078a2 <PQCLEAN_HQC128_CLEAN_reed_solomon_encode+0xea>
            cdw[k] = (uint8_t)(cdw[k - 1] ^ tmp[k]);
 800786e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007872:	3b01      	subs	r3, #1
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	4413      	add	r3, r2
 8007878:	7819      	ldrb	r1, [r3, #0]
 800787a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	3398      	adds	r3, #152	@ 0x98
 8007882:	443b      	add	r3, r7
 8007884:	f833 3c4c 	ldrh.w	r3, [r3, #-76]
 8007888:	b2da      	uxtb	r2, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007890:	4403      	add	r3, r0
 8007892:	404a      	eors	r2, r1
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	701a      	strb	r2, [r3, #0]
        for (size_t k = PARAM_N1 - PARAM_K - 1; k; --k) {
 8007898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800789c:	3b01      	subs	r3, #1
 800789e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e1      	bne.n	800786e <PQCLEAN_HQC128_CLEAN_reed_solomon_encode+0xb6>
        }

        cdw[0] = (uint8_t)tmp[0];
 80078aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < PARAM_K; ++i) {
 80078b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078b8:	3301      	adds	r3, #1
 80078ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	d99e      	bls.n	8007804 <PQCLEAN_HQC128_CLEAN_reed_solomon_encode+0x4c>
    }

    memcpy(cdw + PARAM_N1 - PARAM_K, msg, PARAM_K);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	331e      	adds	r3, #30
 80078ca:	2210      	movs	r2, #16
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f002 fed7 	bl	800a682 <memcpy>
}
 80078d4:	bf00      	nop
 80078d6:	3798      	adds	r7, #152	@ 0x98
 80078d8:	46bd      	mov	sp, r7
 80078da:	bdb0      	pop	{r4, r5, r7, pc}
 80078dc:	0800b290 	.word	0x0800b290

080078e0 <compute_syndromes>:
 * @brief Computes 2 * PARAM_DELTA syndromes
 *
 * @param[out] syndromes Array of size 2 * PARAM_DELTA receiving the computed syndromes
 * @param[in] cdw Array of size PARAM_N1 storing the received vector
 */
static void compute_syndromes(uint16_t *syndromes, uint8_t *cdw) {
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < 2 * PARAM_DELTA; ++i) {
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	e03d      	b.n	800796c <compute_syndromes+0x8c>
        for (size_t j = 1; j < PARAM_N1; ++j) {
 80078f0:	2301      	movs	r3, #1
 80078f2:	60bb      	str	r3, [r7, #8]
 80078f4:	e025      	b.n	8007942 <compute_syndromes+0x62>
            syndromes[i] ^= PQCLEAN_HQC128_CLEAN_gf_mul(cdw[j], alpha_ij_pow[i][j - 1]);
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	4413      	add	r3, r2
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	461c      	mov	r4, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	1e59      	subs	r1, r3, #1
 8007904:	481d      	ldr	r0, [pc, #116]	@ (800797c <compute_syndromes+0x9c>)
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4613      	mov	r3, r2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	4413      	add	r3, r2
 800790e:	011a      	lsls	r2, r3, #4
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	1853      	adds	r3, r2, r1
 8007914:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007918:	4619      	mov	r1, r3
 800791a:	4620      	mov	r0, r4
 800791c:	f7fd fcb5 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007920:	4603      	mov	r3, r0
 8007922:	4618      	mov	r0, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	4413      	add	r3, r2
 800792c:	881a      	ldrh	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	440b      	add	r3, r1
 8007936:	4042      	eors	r2, r0
 8007938:	b292      	uxth	r2, r2
 800793a:	801a      	strh	r2, [r3, #0]
        for (size_t j = 1; j < PARAM_N1; ++j) {
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	3301      	adds	r3, #1
 8007940:	60bb      	str	r3, [r7, #8]
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b2d      	cmp	r3, #45	@ 0x2d
 8007946:	d9d6      	bls.n	80078f6 <compute_syndromes+0x16>
        }
        syndromes[i] ^= cdw[0];
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	4413      	add	r3, r2
 8007950:	881a      	ldrh	r2, [r3, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	440b      	add	r3, r1
 8007960:	4042      	eors	r2, r0
 8007962:	b292      	uxth	r2, r2
 8007964:	801a      	strh	r2, [r3, #0]
    for (size_t i = 0; i < 2 * PARAM_DELTA; ++i) {
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b1d      	cmp	r3, #29
 8007970:	d9be      	bls.n	80078f0 <compute_syndromes+0x10>
    }
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	bd90      	pop	{r4, r7, pc}
 800797c:	0800b794 	.word	0x0800b794

08007980 <compute_elp>:
 *
 * @returns the degree of the ELP sigma
 * @param[out] sigma Array of size (at least) PARAM_DELTA receiving the ELP
 * @param[in] syndromes Array of size (at least) 2*PARAM_DELTA storing the syndromes
 */
static uint16_t compute_elp(uint16_t *sigma, const uint16_t *syndromes) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b09a      	sub	sp, #104	@ 0x68
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
    uint16_t deg_sigma = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    uint16_t deg_sigma_p = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    uint16_t deg_sigma_copy = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    uint16_t sigma_copy[PARAM_DELTA + 1] = {0};
 800799c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80079a0:	2220      	movs	r2, #32
 80079a2:	2100      	movs	r1, #0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f002 fe27 	bl	800a5f8 <memset>
    uint16_t X_sigma_p[PARAM_DELTA + 1] = {0, 1};
 80079aa:	f107 030c 	add.w	r3, r7, #12
 80079ae:	2220      	movs	r2, #32
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f002 fe20 	bl	800a5f8 <memset>
 80079b8:	2301      	movs	r3, #1
 80079ba:	81fb      	strh	r3, [r7, #14]
    uint16_t pp = (uint16_t) -1; // 2*rho
 80079bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079c0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
    uint16_t d_p = 1;
 80079c4:	2301      	movs	r3, #1
 80079c6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    uint16_t d = syndromes[0];
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint16_t dd;
    uint16_t mu;

    uint16_t i;

    sigma[0] = 1;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	801a      	strh	r2, [r3, #0]
    for (mu = 0; (mu < (2 * PARAM_DELTA)); ++mu) {
 80079d8:	2300      	movs	r3, #0
 80079da:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80079de:	e124      	b.n	8007c2a <compute_elp+0x2aa>
        // Save sigma in case we need it to update X_sigma_p
        memcpy(sigma_copy, sigma, 2 * (PARAM_DELTA));
 80079e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80079e4:	221e      	movs	r2, #30
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f002 fe4a 	bl	800a682 <memcpy>
        deg_sigma_copy = deg_sigma;
 80079ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80079f2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

        dd = PQCLEAN_HQC128_CLEAN_gf_mul(d, PQCLEAN_HQC128_CLEAN_gf_inverse(d_p));
 80079f6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fd fc9e 	bl	800533c <PQCLEAN_HQC128_CLEAN_gf_inverse>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fd fc3d 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

        for (i = 1; (i <= mu + 1) && (i <= PARAM_DELTA); ++i) {
 8007a16:	2301      	movs	r3, #1
 8007a18:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007a1c:	e021      	b.n	8007a62 <compute_elp+0xe2>
            sigma[i] ^= PQCLEAN_HQC128_CLEAN_gf_mul(dd, X_sigma_p[i]);
 8007a1e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	3368      	adds	r3, #104	@ 0x68
 8007a26:	443b      	add	r3, r7
 8007a28:	f833 2c5c 	ldrh.w	r2, [r3, #-92]
 8007a2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fd fc29 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	4413      	add	r3, r2
 8007a46:	881a      	ldrh	r2, [r3, #0]
 8007a48:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	440b      	add	r3, r1
 8007a52:	4042      	eors	r2, r0
 8007a54:	b292      	uxth	r2, r2
 8007a56:	801a      	strh	r2, [r3, #0]
        for (i = 1; (i <= mu + 1) && (i <= PARAM_DELTA); ++i) {
 8007a58:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007a62:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8007a66:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	dc03      	bgt.n	8007a78 <compute_elp+0xf8>
 8007a70:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007a74:	2b0f      	cmp	r3, #15
 8007a76:	d9d2      	bls.n	8007a1e <compute_elp+0x9e>
        }

        deg_X = mu - pp;
 8007a78:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8007a7c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        deg_X_sigma_p = deg_X + deg_sigma_p;
 8007a86:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007a8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007a8e:	4413      	add	r3, r2
 8007a90:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

        // mask1 = 0xffff if(d != 0) and 0 otherwise
        mask1 = -((uint16_t) - d >> 15);
 8007a94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007a98:	425b      	negs	r3, r3
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	b21b      	sxth	r3, r3
 8007a9e:	13db      	asrs	r3, r3, #15
 8007aa0:	b21b      	sxth	r3, r3
 8007aa2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

        // mask2 = 0xffff if(deg_X_sigma_p > deg_sigma) and 0 otherwise
        mask2 = -((uint16_t) (deg_sigma - deg_X_sigma_p) >> 15);
 8007aa6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8007aaa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	b21b      	sxth	r3, r3
 8007ab4:	13db      	asrs	r3, r3, #15
 8007ab6:	b21b      	sxth	r3, r3
 8007ab8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

        // mask12 = 0xffff if the deg_sigma increased and 0 otherwise
        mask12 = mask1 & mask2;
 8007abc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8007ac0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
        deg_sigma ^= mask12 & (deg_X_sigma_p ^ deg_sigma);
 8007aca:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8007ace:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007ad2:	4053      	eors	r3, r2
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007ada:	4013      	ands	r3, r2
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007ae2:	4053      	eors	r3, r2
 8007ae4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

        if (mu == (2 * PARAM_DELTA - 1)) {
 8007ae8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007aec:	2b1d      	cmp	r3, #29
 8007aee:	f000 80a2 	beq.w	8007c36 <compute_elp+0x2b6>
            break;
        }

        pp ^= mask12 & (mu ^ pp);
 8007af2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8007af6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007afa:	4053      	eors	r3, r2
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b02:	4013      	ands	r3, r2
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007b0a:	4053      	eors	r3, r2
 8007b0c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        d_p ^= mask12 & (d ^ d_p);
 8007b10:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8007b14:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007b18:	4053      	eors	r3, r2
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b20:	4013      	ands	r3, r2
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8007b28:	4053      	eors	r3, r2
 8007b2a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        for (i = PARAM_DELTA; i; --i) {
 8007b2e:	230f      	movs	r3, #15
 8007b30:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007b34:	e02a      	b.n	8007b8c <compute_elp+0x20c>
            X_sigma_p[i] = (mask12 & sigma_copy[i - 1]) ^ (~mask12 & X_sigma_p[i - 1]);
 8007b36:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	3368      	adds	r3, #104	@ 0x68
 8007b40:	443b      	add	r3, r7
 8007b42:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007b46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	b21a      	sxth	r2, r3
 8007b50:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007b54:	43db      	mvns	r3, r3
 8007b56:	b219      	sxth	r1, r3
 8007b58:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	3368      	adds	r3, #104	@ 0x68
 8007b62:	443b      	add	r3, r7
 8007b64:	f833 3c5c 	ldrh.w	r3, [r3, #-92]
 8007b68:	b21b      	sxth	r3, r3
 8007b6a:	400b      	ands	r3, r1
 8007b6c:	b21b      	sxth	r3, r3
 8007b6e:	4053      	eors	r3, r2
 8007b70:	b21a      	sxth	r2, r3
 8007b72:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007b76:	b292      	uxth	r2, r2
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	3368      	adds	r3, #104	@ 0x68
 8007b7c:	443b      	add	r3, r7
 8007b7e:	f823 2c5c 	strh.w	r2, [r3, #-92]
        for (i = PARAM_DELTA; i; --i) {
 8007b82:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007b86:	3b01      	subs	r3, #1
 8007b88:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007b8c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1d0      	bne.n	8007b36 <compute_elp+0x1b6>
        }

        deg_sigma_p ^= mask12 & (deg_sigma_copy ^ deg_sigma_p);
 8007b94:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8007b98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007b9c:	4053      	eors	r3, r2
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007bac:	4053      	eors	r3, r2
 8007bae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
        d = syndromes[mu + 1];
 8007bb2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

        for (i = 1; (i <= mu + 1) && (i <= PARAM_DELTA); ++i) {
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007bca:	e01e      	b.n	8007c0a <compute_elp+0x28a>
            d ^= PQCLEAN_HQC128_CLEAN_gf_mul(sigma[i], syndromes[mu + 1 - i]);
 8007bcc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	8818      	ldrh	r0, [r3, #0]
 8007bd8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	4413      	add	r3, r2
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	4619      	mov	r1, r3
 8007bee:	f7fd fb4c 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007bfa:	4053      	eors	r3, r2
 8007bfc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        for (i = 1; (i <= mu + 1) && (i <= PARAM_DELTA); ++i) {
 8007c00:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007c04:	3301      	adds	r3, #1
 8007c06:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8007c0a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8007c0e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007c12:	3301      	adds	r3, #1
 8007c14:	429a      	cmp	r2, r3
 8007c16:	dc03      	bgt.n	8007c20 <compute_elp+0x2a0>
 8007c18:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007c1c:	2b0f      	cmp	r3, #15
 8007c1e:	d9d5      	bls.n	8007bcc <compute_elp+0x24c>
    for (mu = 0; (mu < (2 * PARAM_DELTA)); ++mu) {
 8007c20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007c24:	3301      	adds	r3, #1
 8007c26:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8007c2a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007c2e:	2b1d      	cmp	r3, #29
 8007c30:	f67f aed6 	bls.w	80079e0 <compute_elp+0x60>
 8007c34:	e000      	b.n	8007c38 <compute_elp+0x2b8>
            break;
 8007c36:	bf00      	nop
        }
    }

    return deg_sigma;
 8007c38:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3768      	adds	r7, #104	@ 0x68
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <compute_roots>:
 *
 * @param[out] error Array of 2^PARAM_M elements receiving the error polynomial
 * @param[out] error_compact Array of PARAM_DELTA + PARAM_N1 elements receiving a compact representation of the vector error
 * @param[in] sigma Array of 2^PARAM_FFT elements storing the error locator polynomial
 */
static void compute_roots(uint8_t *error, uint16_t *sigma) {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007c54:	6018      	str	r0, [r3, #0]
 8007c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c5a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8007c5e:	6019      	str	r1, [r3, #0]
    uint16_t w[1 << PARAM_M] = {0};
 8007c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c64:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c6e:	461a      	mov	r2, r3
 8007c70:	2100      	movs	r1, #0
 8007c72:	f002 fcc1 	bl	800a5f8 <memset>

    PQCLEAN_HQC128_CLEAN_fft(w, sigma, PARAM_DELTA + 1);
 8007c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c7a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8007c7e:	f107 0008 	add.w	r0, r7, #8
 8007c82:	2210      	movs	r2, #16
 8007c84:	6819      	ldr	r1, [r3, #0]
 8007c86:	f7f9 f9e3 	bl	8001050 <PQCLEAN_HQC128_CLEAN_fft>
    PQCLEAN_HQC128_CLEAN_fft_retrieve_error_poly(error, w);
 8007c8a:	f107 0208 	add.w	r2, r7, #8
 8007c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007c92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007c96:	4611      	mov	r1, r2
 8007c98:	6818      	ldr	r0, [r3, #0]
 8007c9a:	f7f9 fb3b 	bl	8001314 <PQCLEAN_HQC128_CLEAN_fft_retrieve_error_poly>
}
 8007c9e:	bf00      	nop
 8007ca0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <compute_z_poly>:
 * @param[out] z Array of PARAM_DELTA + 1 elements receiving the polynomial z(x)
 * @param[in] sigma Array of 2^PARAM_FFT elements storing the error locator polynomial
 * @param[in] degree Integer that is the degree of polynomial sigma
 * @param[in] syndromes Array of 2 * PARAM_DELTA storing the syndromes
 */
static void compute_z_poly(uint16_t *z, const uint16_t *sigma, uint16_t degree, const uint16_t *syndromes) {
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	80fb      	strh	r3, [r7, #6]
    size_t i, j;
    uint16_t mask;

    z[0] = 1;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	801a      	strh	r2, [r3, #0]

    for (i = 1; i < PARAM_DELTA + 1; ++i) {
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	e01a      	b.n	8007cfa <compute_z_poly+0x52>
        mask = -((uint16_t) (i - degree - 1) >> 15);
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	88fb      	ldrh	r3, [r7, #6]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	b21b      	sxth	r3, r3
 8007cd4:	13db      	asrs	r3, r3, #15
 8007cd6:	b21b      	sxth	r3, r3
 8007cd8:	82fb      	strh	r3, [r7, #22]
        z[i] = mask & sigma[i];
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	8819      	ldrh	r1, [r3, #0]
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4413      	add	r3, r2
 8007cec:	8afa      	ldrh	r2, [r7, #22]
 8007cee:	400a      	ands	r2, r1
 8007cf0:	b292      	uxth	r2, r2
 8007cf2:	801a      	strh	r2, [r3, #0]
    for (i = 1; i < PARAM_DELTA + 1; ++i) {
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	2b0f      	cmp	r3, #15
 8007cfe:	d9e1      	bls.n	8007cc4 <compute_z_poly+0x1c>
    }

    z[1] ^= syndromes[0];
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3302      	adds	r3, #2
 8007d04:	8819      	ldrh	r1, [r3, #0]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	881a      	ldrh	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	404a      	eors	r2, r1
 8007d10:	b292      	uxth	r2, r2
 8007d12:	801a      	strh	r2, [r3, #0]

    for (i = 2; i <= PARAM_DELTA; ++i) {
 8007d14:	2302      	movs	r3, #2
 8007d16:	61fb      	str	r3, [r7, #28]
 8007d18:	e055      	b.n	8007dc6 <compute_z_poly+0x11e>
        mask = -((uint16_t) (i - degree - 1) >> 15);
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	b21b      	sxth	r3, r3
 8007d2a:	13db      	asrs	r3, r3, #15
 8007d2c:	b21b      	sxth	r3, r3
 8007d2e:	82fb      	strh	r3, [r7, #22]
        z[i] ^= mask & syndromes[i - 1];
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4413      	add	r3, r2
 8007d38:	8819      	ldrh	r1, [r3, #0]
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007d40:	3b01      	subs	r3, #1
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	4413      	add	r3, r2
 8007d48:	881a      	ldrh	r2, [r3, #0]
 8007d4a:	8afb      	ldrh	r3, [r7, #22]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	4403      	add	r3, r0
 8007d58:	404a      	eors	r2, r1
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	801a      	strh	r2, [r3, #0]

        for (j = 1; j < i; ++j) {
 8007d5e:	2301      	movs	r3, #1
 8007d60:	61bb      	str	r3, [r7, #24]
 8007d62:	e029      	b.n	8007db8 <compute_z_poly+0x110>
            z[i] ^= mask & PQCLEAN_HQC128_CLEAN_gf_mul(sigma[j], syndromes[i - j - 1]);
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	8818      	ldrh	r0, [r3, #0]
 8007d6e:	69fa      	ldr	r2, [r7, #28]
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	4413      	add	r3, r2
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	4619      	mov	r1, r3
 8007d84:	f7fd fa81 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	8afb      	ldrh	r3, [r7, #22]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4619      	mov	r1, r3
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b21a      	sxth	r2, r3
 8007da0:	b20b      	sxth	r3, r1
 8007da2:	4053      	eors	r3, r2
 8007da4:	b219      	sxth	r1, r3
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	4413      	add	r3, r2
 8007dae:	b28a      	uxth	r2, r1
 8007db0:	801a      	strh	r2, [r3, #0]
        for (j = 1; j < i; ++j) {
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	3301      	adds	r3, #1
 8007db6:	61bb      	str	r3, [r7, #24]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d3d1      	bcc.n	8007d64 <compute_z_poly+0xbc>
    for (i = 2; i <= PARAM_DELTA; ++i) {
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2b0f      	cmp	r3, #15
 8007dca:	d9a6      	bls.n	8007d1a <compute_z_poly+0x72>
        }
    }
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	3720      	adds	r7, #32
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <compute_error_values>:
 * @param[out] error_values Array of PARAM_DELTA elements receiving the error values
 * @param[in] z Array of PARAM_DELTA + 1 elements storing the polynomial z(x)
 * @param[in] z_degree Integer that is the degree of polynomial z(x)
 * @param[in] error_compact Array of PARAM_DELTA + PARAM_N1 storing compact representation of the error
 */
static void compute_error_values(uint16_t *error_values, const uint16_t *z, const uint8_t *error) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b0a0      	sub	sp, #128	@ 0x80
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
    uint16_t beta_j[PARAM_DELTA] = {0};
 8007de4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007de8:	221e      	movs	r2, #30
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f002 fc03 	bl	800a5f8 <memset>
    uint16_t e_j[PARAM_DELTA] = {0};
 8007df2:	f107 0310 	add.w	r3, r7, #16
 8007df6:	221e      	movs	r2, #30
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f002 fbfc 	bl	800a5f8 <memset>
    uint16_t tmp2;
    uint16_t inverse;
    uint16_t inverse_power_j;

    // Compute the beta_{j_i} page 31 of the documentation
    delta_counter = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    for (size_t i = 0; i < PARAM_N1; i++) {
 8007e06:	2300      	movs	r3, #0
 8007e08:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e0a:	e04f      	b.n	8007eac <compute_error_values+0xd4>
        found = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        mask1 = (uint16_t) (-((int32_t)error[i]) >> 31); // error[i] != 0
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e16:	4413      	add	r3, r2
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	425b      	negs	r3, r3
 8007e1c:	17db      	asrs	r3, r3, #31
 8007e1e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        for (size_t j = 0; j < PARAM_DELTA; j++) {
 8007e22:	2300      	movs	r3, #0
 8007e24:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e26:	e034      	b.n	8007e92 <compute_error_values+0xba>
            mask2 = ~((uint16_t) (-((int32_t) j ^ delta_counter) >> 31)); // j == delta_counter
 8007e28:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8007e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e2e:	4053      	eors	r3, r2
 8007e30:	425b      	negs	r3, r3
 8007e32:	17db      	asrs	r3, r3, #31
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	43db      	mvns	r3, r3
 8007e38:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            beta_j[j] += mask1 & mask2 & gf_exp[i];
 8007e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	3380      	adds	r3, #128	@ 0x80
 8007e42:	443b      	add	r3, r7
 8007e44:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8007e48:	f8b7 1054 	ldrh.w	r1, [r7, #84]	@ 0x54
 8007e4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007e50:	400b      	ands	r3, r1
 8007e52:	b299      	uxth	r1, r3
 8007e54:	4891      	ldr	r0, [pc, #580]	@ (800809c <compute_error_values+0x2c4>)
 8007e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e58:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8007e5c:	400b      	ands	r3, r1
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	4413      	add	r3, r2
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	3380      	adds	r3, #128	@ 0x80
 8007e6a:	443b      	add	r3, r7
 8007e6c:	f823 2c50 	strh.w	r2, [r3, #-80]
            found += mask1 & mask2 & 1;
 8007e70:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007e74:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007e78:	4013      	ands	r3, r2
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8007e86:	4413      	add	r3, r2
 8007e88:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        for (size_t j = 0; j < PARAM_DELTA; j++) {
 8007e8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e8e:	3301      	adds	r3, #1
 8007e90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e94:	2b0e      	cmp	r3, #14
 8007e96:	d9c7      	bls.n	8007e28 <compute_error_values+0x50>
        }
        delta_counter += found;
 8007e98:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 8007e9c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    for (size_t i = 0; i < PARAM_N1; i++) {
 8007ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	673b      	str	r3, [r7, #112]	@ 0x70
 8007eac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007eae:	2b2d      	cmp	r3, #45	@ 0x2d
 8007eb0:	d9ac      	bls.n	8007e0c <compute_error_values+0x34>
    }
    delta_real_value = delta_counter;
 8007eb2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8007eb6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

    // Compute the e_{j_i} page 31 of the documentation
    for (size_t i = 0; i < PARAM_DELTA; ++i) {
 8007eba:	2300      	movs	r3, #0
 8007ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ebe:	e08b      	b.n	8007fd8 <compute_error_values+0x200>
        tmp1 = 1;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        tmp2 = 1;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
        inverse = PQCLEAN_HQC128_CLEAN_gf_inverse(beta_j[i]);
 8007ecc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	3380      	adds	r3, #128	@ 0x80
 8007ed2:	443b      	add	r3, r7
 8007ed4:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd fa2f 	bl	800533c <PQCLEAN_HQC128_CLEAN_gf_inverse>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        inverse_power_j = 1;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

        for (size_t j = 1; j <= PARAM_DELTA; ++j) {
 8007eea:	2301      	movs	r3, #1
 8007eec:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eee:	e01f      	b.n	8007f30 <compute_error_values+0x158>
            inverse_power_j = PQCLEAN_HQC128_CLEAN_gf_mul(inverse_power_j, inverse);
 8007ef0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8007ef4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fd f9c5 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
            tmp1 ^= PQCLEAN_HQC128_CLEAN_gf_mul(inverse_power_j, z[j]);
 8007f06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	881a      	ldrh	r2, [r3, #0]
 8007f10:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fd f9b7 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8007f24:	4053      	eors	r3, r2
 8007f26:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        for (size_t j = 1; j <= PARAM_DELTA; ++j) {
 8007f2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f32:	2b0f      	cmp	r3, #15
 8007f34:	d9dc      	bls.n	8007ef0 <compute_error_values+0x118>
        }
        for (size_t k = 1; k < PARAM_DELTA; ++k) {
 8007f36:	2301      	movs	r3, #1
 8007f38:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f3a:	e025      	b.n	8007f88 <compute_error_values+0x1b0>
            tmp2 = PQCLEAN_HQC128_CLEAN_gf_mul(tmp2, (1 ^ PQCLEAN_HQC128_CLEAN_gf_mul(inverse, beta_j[(i + k) % PARAM_DELTA])));
 8007f3c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007f3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f40:	18d1      	adds	r1, r2, r3
 8007f42:	4b57      	ldr	r3, [pc, #348]	@ (80080a0 <compute_error_values+0x2c8>)
 8007f44:	fba3 2301 	umull	r2, r3, r3, r1
 8007f48:	08da      	lsrs	r2, r3, #3
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	1aca      	subs	r2, r1, r3
 8007f52:	0053      	lsls	r3, r2, #1
 8007f54:	3380      	adds	r3, #128	@ 0x80
 8007f56:	443b      	add	r3, r7
 8007f58:	f833 2c50 	ldrh.w	r2, [r3, #-80]
 8007f5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007f60:	4611      	mov	r1, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fd f991 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f083 0301 	eor.w	r3, r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8007f74:	4611      	mov	r1, r2
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7fd f987 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
        for (size_t k = 1; k < PARAM_DELTA; ++k) {
 8007f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f84:	3301      	adds	r3, #1
 8007f86:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f8a:	2b0e      	cmp	r3, #14
 8007f8c:	d9d6      	bls.n	8007f3c <compute_error_values+0x164>
        }
        mask1 = (uint16_t) (((int16_t) i - delta_real_value) >> 15); // i < delta_real_value
 8007f8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f90:	b21b      	sxth	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	13db      	asrs	r3, r3, #15
 8007f9c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        e_j[i] = mask1 & PQCLEAN_HQC128_CLEAN_gf_mul(tmp1, PQCLEAN_HQC128_CLEAN_gf_inverse(tmp2));
 8007fa0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fd f9c9 	bl	800533c <PQCLEAN_HQC128_CLEAN_gf_inverse>
 8007faa:	4603      	mov	r3, r0
 8007fac:	461a      	mov	r2, r3
 8007fae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fd f968 	bl	800528a <PQCLEAN_HQC128_CLEAN_gf_mul>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	3380      	adds	r3, #128	@ 0x80
 8007fcc:	443b      	add	r3, r7
 8007fce:	f823 2c70 	strh.w	r2, [r3, #-112]
    for (size_t i = 0; i < PARAM_DELTA; ++i) {
 8007fd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007fda:	2b0e      	cmp	r3, #14
 8007fdc:	f67f af70 	bls.w	8007ec0 <compute_error_values+0xe8>
    }

    // Place the delta e_{j_i} values at the right coordinates of the output vector
    delta_counter = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    for (size_t i = 0; i < PARAM_N1; ++i) {
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fea:	e04f      	b.n	800808c <compute_error_values+0x2b4>
        found = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        mask1 = (uint16_t) (-((int32_t)error[i]) >> 31); // error[i] != 0
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ff6:	4413      	add	r3, r2
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	425b      	negs	r3, r3
 8007ffc:	17db      	asrs	r3, r3, #31
 8007ffe:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        for (size_t j = 0; j < PARAM_DELTA; j++) {
 8008002:	2300      	movs	r3, #0
 8008004:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008006:	e034      	b.n	8008072 <compute_error_values+0x29a>
            mask2 = ~((uint16_t) (-((int32_t) j ^ delta_counter) >> 31)); // j == delta_counter
 8008008:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 800800c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800800e:	4053      	eors	r3, r2
 8008010:	425b      	negs	r3, r3
 8008012:	17db      	asrs	r3, r3, #31
 8008014:	b29b      	uxth	r3, r3
 8008016:	43db      	mvns	r3, r3
 8008018:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            error_values[i] += mask1 & mask2 & e_j[j];
 800801c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800801e:	005b      	lsls	r3, r3, #1
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	8819      	ldrh	r1, [r3, #0]
 8008026:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800802a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800802e:	4013      	ands	r3, r2
 8008030:	b29a      	uxth	r2, r3
 8008032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	3380      	adds	r3, #128	@ 0x80
 8008038:	443b      	add	r3, r7
 800803a:	f833 3c70 	ldrh.w	r3, [r3, #-112]
 800803e:	4013      	ands	r3, r2
 8008040:	b29a      	uxth	r2, r3
 8008042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	4403      	add	r3, r0
 800804a:	440a      	add	r2, r1
 800804c:	b292      	uxth	r2, r2
 800804e:	801a      	strh	r2, [r3, #0]
            found += mask1 & mask2 & 1;
 8008050:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008054:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8008058:	4013      	ands	r3, r2
 800805a:	b29b      	uxth	r3, r3
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8008066:	4413      	add	r3, r2
 8008068:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        for (size_t j = 0; j < PARAM_DELTA; j++) {
 800806c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800806e:	3301      	adds	r3, #1
 8008070:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008072:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008074:	2b0e      	cmp	r3, #14
 8008076:	d9c7      	bls.n	8008008 <compute_error_values+0x230>
        }
        delta_counter += found;
 8008078:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 800807c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8008080:	4413      	add	r3, r2
 8008082:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    for (size_t i = 0; i < PARAM_N1; ++i) {
 8008086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008088:	3301      	adds	r3, #1
 800808a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800808c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800808e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008090:	d9ac      	bls.n	8007fec <compute_error_values+0x214>
    }
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	3780      	adds	r7, #128	@ 0x80
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	0800b590 	.word	0x0800b590
 80080a0:	88888889 	.word	0x88888889

080080a4 <correct_errors>:
 *
 * @param[out] cdw Array of PARAM_N1 elements receiving the corrected vector
 * @param[in] error Array of the error vector
 * @param[in] error_values Array of PARAM_DELTA elements storing the error values
 */
static void correct_errors(uint8_t *cdw, const uint16_t *error_values) {
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < PARAM_N1; ++i) {
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	e012      	b.n	80080da <correct_errors+0x36>
        cdw[i] ^= error_values[i];
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	7819      	ldrb	r1, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	4413      	add	r3, r2
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	4403      	add	r3, r0
 80080ce:	404a      	eors	r2, r1
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < PARAM_N1; ++i) {
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3301      	adds	r3, #1
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80080de:	d9e9      	bls.n	80080b4 <correct_errors+0x10>
    }
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <PQCLEAN_HQC128_CLEAN_reed_solomon_decode>:
 * For a more complete picture on Reed-Solomon decoding, see Shu. Lin and Daniel J. Costello in Error Control Coding: Fundamentals and Applications @cite lin1983error
 *
 * @param[out] msg Array of size VEC_K_SIZE_64 receiving the decoded message
 * @param[in] cdw Array of size VEC_N1_SIZE_64 storing the received word
 */
void PQCLEAN_HQC128_CLEAN_reed_solomon_decode(uint8_t *msg, uint8_t *cdw) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80080f8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80080fc:	6018      	str	r0, [r3, #0]
 80080fe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8008102:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8008106:	6019      	str	r1, [r3, #0]
    uint16_t syndromes[2 * PARAM_DELTA] = {0};
 8008108:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800810c:	223c      	movs	r2, #60	@ 0x3c
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f002 fa71 	bl	800a5f8 <memset>
    uint16_t sigma[1 << PARAM_FFT] = {0};
 8008116:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800811a:	2220      	movs	r2, #32
 800811c:	2100      	movs	r1, #0
 800811e:	4618      	mov	r0, r3
 8008120:	f002 fa6a 	bl	800a5f8 <memset>
    uint8_t error[1 << PARAM_M] = {0};
 8008124:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8008128:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	3304      	adds	r3, #4
 8008132:	22fc      	movs	r2, #252	@ 0xfc
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f002 fa5e 	bl	800a5f8 <memset>
    uint16_t z[PARAM_N1] = {0};
 800813c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8008140:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8008144:	4618      	mov	r0, r3
 8008146:	235c      	movs	r3, #92	@ 0x5c
 8008148:	461a      	mov	r2, r3
 800814a:	2100      	movs	r1, #0
 800814c:	f002 fa54 	bl	800a5f8 <memset>
    uint16_t error_values[PARAM_N1] = {0};
 8008150:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8008154:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8008158:	4618      	mov	r0, r3
 800815a:	235c      	movs	r3, #92	@ 0x5c
 800815c:	461a      	mov	r2, r3
 800815e:	2100      	movs	r1, #0
 8008160:	f002 fa4a 	bl	800a5f8 <memset>
    uint16_t deg;

    // Calculate the 2*PARAM_DELTA syndromes
    compute_syndromes(syndromes, cdw);
 8008164:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8008168:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800816c:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 8008170:	6819      	ldr	r1, [r3, #0]
 8008172:	4610      	mov	r0, r2
 8008174:	f7ff fbb4 	bl	80078e0 <compute_syndromes>

    // Compute the error locator polynomial sigma
    // Sigma's degree is at most PARAM_DELTA but the FFT requires the extra room
    deg = compute_elp(sigma, syndromes);
 8008178:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 800817c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff fbfc 	bl	8007980 <compute_elp>
 8008188:	4603      	mov	r3, r0
 800818a:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e

    // Compute the error polynomial error
    compute_roots(error, sigma);
 800818e:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8008192:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8008196:	4611      	mov	r1, r2
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff fd53 	bl	8007c44 <compute_roots>

    // Compute the polynomial z(x)
    compute_z_poly(z, sigma, deg, syndromes);
 800819e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80081a2:	f8b7 221e 	ldrh.w	r2, [r7, #542]	@ 0x21e
 80081a6:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80081aa:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 80081ae:	f7ff fd7b 	bl	8007ca8 <compute_z_poly>

    // Compute the error values
    compute_error_values(error_values, z, error);
 80081b2:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 80081b6:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80081ba:	f107 0308 	add.w	r3, r7, #8
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff fe0a 	bl	8007dd8 <compute_error_values>

    // Correct the errors
    correct_errors(cdw, error_values);
 80081c4:	f107 0208 	add.w	r2, r7, #8
 80081c8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80081cc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80081d0:	4611      	mov	r1, r2
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	f7ff ff66 	bl	80080a4 <correct_errors>

    // Retrieve the message from the decoded codeword
    memcpy(msg, cdw + (PARAM_G - 1), PARAM_K);
 80081d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80081dc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f103 011e 	add.w	r1, r3, #30
 80081e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80081ea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80081ee:	2210      	movs	r2, #16
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	f002 fa46 	bl	800a682 <memcpy>

}
 80081f6:	bf00      	nop
 80081f8:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <PQCLEAN_HQC128_CLEAN_shake256_512_ds>:
 * @param[in] output Pointer to output
 * @param[in] input Pointer to input
 * @param[in] inlen length of input in bytes
 * @param[in] domain byte for domain separation
 */
void PQCLEAN_HQC128_CLEAN_shake256_512_ds(shake256incctx *state, uint8_t *output, const uint8_t *input, size_t inlen, uint8_t domain) {
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
    /* Init state */
    shake256_inc_init(state);
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7fc fe67 	bl	8004ee2 <shake256_inc_init>

    /* Absorb input */
    shake256_inc_absorb(state, input, inlen);
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7fc fe7d 	bl	8004f18 <shake256_inc_absorb>

    /* Absorb domain separation byte */
    shake256_inc_absorb(state, &domain, 1);
 800821e:	2201      	movs	r2, #1
 8008220:	f107 0118 	add.w	r1, r7, #24
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7fc fe77 	bl	8004f18 <shake256_inc_absorb>

    /* Finalize */
    shake256_inc_finalize(state);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7fc fe85 	bl	8004f3a <shake256_inc_finalize>

    /* Squeeze output */
    shake256_inc_squeeze(output, 512 / 8, state);
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	2140      	movs	r1, #64	@ 0x40
 8008234:	68b8      	ldr	r0, [r7, #8]
 8008236:	f7fc fe8f 	bl	8004f58 <shake256_inc_squeeze>

    /* Release ctx */
    shake256_inc_ctx_release(state);
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f7fc fe9d 	bl	8004f7a <shake256_inc_ctx_release>
}
 8008240:	bf00      	nop
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <PQCLEAN_HQC128_CLEAN_seedexpander_init>:
 *
 * @param[out] state Keccak internal state and a counter
 * @param[in] seed A seed
 * @param[in] seedlen The seed bytes length
 */
void PQCLEAN_HQC128_CLEAN_seedexpander_init(seedexpander_state *state, const uint8_t *seed, size_t seedlen) {
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
    uint8_t domain = SEEDEXPANDER_DOMAIN;
 8008254:	2302      	movs	r3, #2
 8008256:	75fb      	strb	r3, [r7, #23]
    shake256_inc_init(state);
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7fc fe42 	bl	8004ee2 <shake256_inc_init>
    shake256_inc_absorb(state, seed, seedlen);
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7fc fe58 	bl	8004f18 <shake256_inc_absorb>
    shake256_inc_absorb(state, &domain, 1);
 8008268:	f107 0317 	add.w	r3, r7, #23
 800826c:	2201      	movs	r2, #1
 800826e:	4619      	mov	r1, r3
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7fc fe51 	bl	8004f18 <shake256_inc_absorb>
    shake256_inc_finalize(state);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7fc fe5f 	bl	8004f3a <shake256_inc_finalize>
}
 800827c:	bf00      	nop
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <PQCLEAN_HQC128_CLEAN_seedexpander>:
 *
 * @param[out] state Internal state of SHAKE
 * @param[out] output The XOF data
 * @param[in] outlen Number of bytes to return
 */
void PQCLEAN_HQC128_CLEAN_seedexpander(seedexpander_state *state, uint8_t *output, size_t outlen) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b08a      	sub	sp, #40	@ 0x28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
    const size_t bsize = sizeof(uint64_t);
 8008290:	2308      	movs	r3, #8
 8008292:	623b      	str	r3, [r7, #32]
    const size_t remainder = outlen % bsize;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	fbb3 f2f2 	udiv	r2, r3, r2
 800829c:	6a39      	ldr	r1, [r7, #32]
 800829e:	fb01 f202 	mul.w	r2, r1, r2
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	61fb      	str	r3, [r7, #28]
    uint8_t tmp[sizeof(uint64_t)];
    shake256_inc_squeeze(output, outlen - remainder, state);
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4619      	mov	r1, r3
 80082b0:	68b8      	ldr	r0, [r7, #8]
 80082b2:	f7fc fe51 	bl	8004f58 <shake256_inc_squeeze>
    if (remainder != 0) {
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d01f      	beq.n	80082fc <PQCLEAN_HQC128_CLEAN_seedexpander+0x78>
        shake256_inc_squeeze(tmp, bsize, state);
 80082bc:	f107 0314 	add.w	r3, r7, #20
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	6a39      	ldr	r1, [r7, #32]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fc fe47 	bl	8004f58 <shake256_inc_squeeze>
        output += outlen - remainder;
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	4413      	add	r3, r2
 80082d4:	60bb      	str	r3, [r7, #8]
        for (size_t i = 0; i < remainder; ++i) {
 80082d6:	2300      	movs	r3, #0
 80082d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80082da:	e00b      	b.n	80082f4 <PQCLEAN_HQC128_CLEAN_seedexpander+0x70>
            output[i] = tmp[i];
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	4413      	add	r3, r2
 80082e2:	f107 0114 	add.w	r1, r7, #20
 80082e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082e8:	440a      	add	r2, r1
 80082ea:	7812      	ldrb	r2, [r2, #0]
 80082ec:	701a      	strb	r2, [r3, #0]
        for (size_t i = 0; i < remainder; ++i) {
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	3301      	adds	r3, #1
 80082f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d3ef      	bcc.n	80082dc <PQCLEAN_HQC128_CLEAN_seedexpander+0x58>
        }
    }
}
 80082fc:	bf00      	nop
 80082fe:	3728      	adds	r7, #40	@ 0x28
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <PQCLEAN_HQC128_CLEAN_seedexpander_release>:

/**
 * @brief Release the seed expander context
 * @param[in] state Internal state of the seed expander
 */
void PQCLEAN_HQC128_CLEAN_seedexpander_release(seedexpander_state *state) {
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
    shake256_inc_ctx_release(state);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7fc fe34 	bl	8004f7a <shake256_inc_ctx_release>
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8008322:	4b15      	ldr	r3, [pc, #84]	@ (8008378 <HAL_MspInit+0x5c>)
 8008324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008326:	4a14      	ldr	r2, [pc, #80]	@ (8008378 <HAL_MspInit+0x5c>)
 8008328:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800832c:	6253      	str	r3, [r2, #36]	@ 0x24
 800832e:	4b12      	ldr	r3, [pc, #72]	@ (8008378 <HAL_MspInit+0x5c>)
 8008330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008332:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800833a:	4b0f      	ldr	r3, [pc, #60]	@ (8008378 <HAL_MspInit+0x5c>)
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	4a0e      	ldr	r2, [pc, #56]	@ (8008378 <HAL_MspInit+0x5c>)
 8008340:	f043 0301 	orr.w	r3, r3, #1
 8008344:	6213      	str	r3, [r2, #32]
 8008346:	4b0c      	ldr	r3, [pc, #48]	@ (8008378 <HAL_MspInit+0x5c>)
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	60bb      	str	r3, [r7, #8]
 8008350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008352:	4b09      	ldr	r3, [pc, #36]	@ (8008378 <HAL_MspInit+0x5c>)
 8008354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008356:	4a08      	ldr	r2, [pc, #32]	@ (8008378 <HAL_MspInit+0x5c>)
 8008358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800835c:	6253      	str	r3, [r2, #36]	@ 0x24
 800835e:	4b06      	ldr	r3, [pc, #24]	@ (8008378 <HAL_MspInit+0x5c>)
 8008360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008366:	607b      	str	r3, [r7, #4]
 8008368:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800836a:	2007      	movs	r0, #7
 800836c:	f000 fe6e 	bl	800904c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008370:	bf00      	nop
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	40023800 	.word	0x40023800

0800837c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08a      	sub	sp, #40	@ 0x28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008384:	f107 0314 	add.w	r3, r7, #20
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	605a      	str	r2, [r3, #4]
 800838e:	609a      	str	r2, [r3, #8]
 8008390:	60da      	str	r2, [r3, #12]
 8008392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a17      	ldr	r2, [pc, #92]	@ (80083f8 <HAL_UART_MspInit+0x7c>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d127      	bne.n	80083ee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800839e:	4b17      	ldr	r3, [pc, #92]	@ (80083fc <HAL_UART_MspInit+0x80>)
 80083a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a2:	4a16      	ldr	r2, [pc, #88]	@ (80083fc <HAL_UART_MspInit+0x80>)
 80083a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083a8:	6253      	str	r3, [r2, #36]	@ 0x24
 80083aa:	4b14      	ldr	r3, [pc, #80]	@ (80083fc <HAL_UART_MspInit+0x80>)
 80083ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083b6:	4b11      	ldr	r3, [pc, #68]	@ (80083fc <HAL_UART_MspInit+0x80>)
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	4a10      	ldr	r2, [pc, #64]	@ (80083fc <HAL_UART_MspInit+0x80>)
 80083bc:	f043 0301 	orr.w	r3, r3, #1
 80083c0:	61d3      	str	r3, [r2, #28]
 80083c2:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <HAL_UART_MspInit+0x80>)
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80083ce:	230c      	movs	r3, #12
 80083d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083d2:	2302      	movs	r3, #2
 80083d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083da:	2303      	movs	r3, #3
 80083dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80083de:	2307      	movs	r3, #7
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083e2:	f107 0314 	add.w	r3, r7, #20
 80083e6:	4619      	mov	r1, r3
 80083e8:	4805      	ldr	r0, [pc, #20]	@ (8008400 <HAL_UART_MspInit+0x84>)
 80083ea:	f000 fe63 	bl	80090b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80083ee:	bf00      	nop
 80083f0:	3728      	adds	r7, #40	@ 0x28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	40004400 	.word	0x40004400
 80083fc:	40023800 	.word	0x40023800
 8008400:	40020000 	.word	0x40020000

08008404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008408:	bf00      	nop
 800840a:	e7fd      	b.n	8008408 <NMI_Handler+0x4>

0800840c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008410:	bf00      	nop
 8008412:	e7fd      	b.n	8008410 <HardFault_Handler+0x4>

08008414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008418:	bf00      	nop
 800841a:	e7fd      	b.n	8008418 <MemManage_Handler+0x4>

0800841c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008420:	bf00      	nop
 8008422:	e7fd      	b.n	8008420 <BusFault_Handler+0x4>

08008424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008428:	bf00      	nop
 800842a:	e7fd      	b.n	8008428 <UsageFault_Handler+0x4>

0800842c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008430:	bf00      	nop
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr

08008438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008438:	b480      	push	{r7}
 800843a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800843c:	bf00      	nop
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr

08008444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008448:	bf00      	nop
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr

08008450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008454:	f000 fd2e 	bl	8008eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008458:	bf00      	nop
 800845a:	bd80      	pop	{r7, pc}

0800845c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  return 1;
 8008460:	2301      	movs	r3, #1
}
 8008462:	4618      	mov	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr

0800846a <_kill>:

int _kill(int pid, int sig)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b082      	sub	sp, #8
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008474:	f002 f8d8 	bl	800a628 <__errno>
 8008478:	4603      	mov	r3, r0
 800847a:	2216      	movs	r2, #22
 800847c:	601a      	str	r2, [r3, #0]
  return -1;
 800847e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <_exit>:

void _exit (int status)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008492:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff ffe7 	bl	800846a <_kill>
  while (1) {}    /* Make sure we hang here */
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <_exit+0x12>

080084a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084ac:	2300      	movs	r3, #0
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	e00a      	b.n	80084c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80084b2:	f3af 8000 	nop.w
 80084b6:	4601      	mov	r1, r0
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	60ba      	str	r2, [r7, #8]
 80084be:	b2ca      	uxtb	r2, r1
 80084c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	3301      	adds	r3, #1
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	dbf0      	blt.n	80084b2 <_read+0x12>
  }

  return len;
 80084d0:	687b      	ldr	r3, [r7, #4]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b086      	sub	sp, #24
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084e6:	2300      	movs	r3, #0
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	e009      	b.n	8008500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	60ba      	str	r2, [r7, #8]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	3301      	adds	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	dbf1      	blt.n	80084ec <_write+0x12>
  }
  return len;
 8008508:	687b      	ldr	r3, [r7, #4]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <_close>:

int _close(int file)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800851a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008538:	605a      	str	r2, [r3, #4]
  return 0;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	bc80      	pop	{r7}
 8008544:	4770      	bx	lr

08008546 <_isatty>:

int _isatty(int file)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800854e:	2301      	movs	r3, #1
}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	bc80      	pop	{r7}
 8008558:	4770      	bx	lr

0800855a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800855a:	b480      	push	{r7}
 800855c:	b085      	sub	sp, #20
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr
	...

08008574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800857c:	4a14      	ldr	r2, [pc, #80]	@ (80085d0 <_sbrk+0x5c>)
 800857e:	4b15      	ldr	r3, [pc, #84]	@ (80085d4 <_sbrk+0x60>)
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008588:	4b13      	ldr	r3, [pc, #76]	@ (80085d8 <_sbrk+0x64>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008590:	4b11      	ldr	r3, [pc, #68]	@ (80085d8 <_sbrk+0x64>)
 8008592:	4a12      	ldr	r2, [pc, #72]	@ (80085dc <_sbrk+0x68>)
 8008594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008596:	4b10      	ldr	r3, [pc, #64]	@ (80085d8 <_sbrk+0x64>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d207      	bcs.n	80085b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085a4:	f002 f840 	bl	800a628 <__errno>
 80085a8:	4603      	mov	r3, r0
 80085aa:	220c      	movs	r2, #12
 80085ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085b2:	e009      	b.n	80085c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085b4:	4b08      	ldr	r3, [pc, #32]	@ (80085d8 <_sbrk+0x64>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085ba:	4b07      	ldr	r3, [pc, #28]	@ (80085d8 <_sbrk+0x64>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	4a05      	ldr	r2, [pc, #20]	@ (80085d8 <_sbrk+0x64>)
 80085c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80085c6:	68fb      	ldr	r3, [r7, #12]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20014000 	.word	0x20014000
 80085d4:	00000400 	.word	0x00000400
 80085d8:	200001f8 	.word	0x200001f8
 80085dc:	20000350 	.word	0x20000350

080085e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80085e0:	b480      	push	{r7}
 80085e2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80085e4:	bf00      	nop
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bc80      	pop	{r7}
 80085ea:	4770      	bx	lr

080085ec <compare_u32>:
 * https://gist.github.com/sneves/10845247
 *
 * @param[in] v1
 * @param[in] v2
 */
static inline uint32_t compare_u32(uint32_t v1, uint32_t v2) {
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
    return 1 ^ ((uint32_t)((v1 - v2) | (v2 - v1)) >> 31);
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	1acb      	subs	r3, r1, r3
 8008602:	4313      	orrs	r3, r2
 8008604:	0fdb      	lsrs	r3, r3, #31
 8008606:	f083 0301 	eor.w	r3, r3, #1
}
 800860a:	4618      	mov	r0, r3
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	bc80      	pop	{r7}
 8008612:	4770      	bx	lr

08008614 <single_bit_mask>:

static uint64_t single_bit_mask(uint32_t pos) {
 8008614:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008618:	b093      	sub	sp, #76	@ 0x4c
 800861a:	af00      	add	r7, sp, #0
 800861c:	6278      	str	r0, [r7, #36]	@ 0x24
    uint64_t ret = 0;
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    uint64_t mask = 1;
 800862a:	f04f 0201 	mov.w	r2, #1
 800862e:	f04f 0300 	mov.w	r3, #0
 8008632:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    uint64_t tmp;

    for (size_t i = 0; i < 64; ++i) {
 8008636:	2300      	movs	r3, #0
 8008638:	637b      	str	r3, [r7, #52]	@ 0x34
 800863a:	e047      	b.n	80086cc <single_bit_mask+0xb8>
        tmp = pos - i;
 800863c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2200      	movs	r2, #0
 8008644:	613b      	str	r3, [r7, #16]
 8008646:	617a      	str	r2, [r7, #20]
 8008648:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800864c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        tmp = 0 - (1 - ((uint64_t)(tmp | (0 - tmp)) >> 63));
 8008650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008654:	2100      	movs	r1, #0
 8008656:	4254      	negs	r4, r2
 8008658:	eb61 0503 	sbc.w	r5, r1, r3
 800865c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008660:	ea44 0102 	orr.w	r1, r4, r2
 8008664:	61b9      	str	r1, [r7, #24]
 8008666:	432b      	orrs	r3, r5
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800866e:	f04f 0000 	mov.w	r0, #0
 8008672:	f04f 0100 	mov.w	r1, #0
 8008676:	17d8      	asrs	r0, r3, #31
 8008678:	17d9      	asrs	r1, r3, #31
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	ea6f 0a02 	mvn.w	sl, r2
 8008682:	ea6f 0b03 	mvn.w	fp, r3
 8008686:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
        ret |= mask & tmp;
 800868a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800868e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008692:	ea00 0802 	and.w	r8, r0, r2
 8008696:	ea01 0903 	and.w	r9, r1, r3
 800869a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800869e:	ea42 0108 	orr.w	r1, r2, r8
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	ea43 0309 	orr.w	r3, r3, r9
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
        mask <<= 1;
 80086b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80086b6:	1891      	adds	r1, r2, r2
 80086b8:	6039      	str	r1, [r7, #0]
 80086ba:	415b      	adcs	r3, r3
 80086bc:	607b      	str	r3, [r7, #4]
 80086be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    for (size_t i = 0; i < 64; ++i) {
 80086c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c8:	3301      	adds	r3, #1
 80086ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80086cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80086d0:	d9b4      	bls.n	800863c <single_bit_mask+0x28>
    }

    return ret;
 80086d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
}
 80086d6:	4610      	mov	r0, r2
 80086d8:	4619      	mov	r1, r3
 80086da:	374c      	adds	r7, #76	@ 0x4c
 80086dc:	46bd      	mov	sp, r7
 80086de:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80086e2:	4770      	bx	lr

080086e4 <cond_sub>:

static inline uint32_t cond_sub(uint32_t r, uint32_t n) {
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
    uint32_t mask;
    r -= n;
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	607b      	str	r3, [r7, #4]
    mask = 0 - (r >> 31);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	17db      	asrs	r3, r3, #31
 80086fa:	60fb      	str	r3, [r7, #12]
    return r + (n & mask);
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	401a      	ands	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4413      	add	r3, r2
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <reduce>:

static inline uint32_t reduce(uint32_t a, size_t i) {
 8008710:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008714:	b086      	sub	sp, #24
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
    uint32_t q, n, r;
    q = ((uint64_t) a * m_val[i]) >> 32;
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	2000      	movs	r0, #0
 8008720:	4688      	mov	r8, r1
 8008722:	4681      	mov	r9, r0
 8008724:	4816      	ldr	r0, [pc, #88]	@ (8008780 <reduce+0x70>)
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800872c:	2000      	movs	r0, #0
 800872e:	460c      	mov	r4, r1
 8008730:	4605      	mov	r5, r0
 8008732:	fb04 f009 	mul.w	r0, r4, r9
 8008736:	fb08 f105 	mul.w	r1, r8, r5
 800873a:	4401      	add	r1, r0
 800873c:	fba8 2304 	umull	r2, r3, r8, r4
 8008740:	4419      	add	r1, r3
 8008742:	460b      	mov	r3, r1
 8008744:	f04f 0000 	mov.w	r0, #0
 8008748:	f04f 0100 	mov.w	r1, #0
 800874c:	0018      	movs	r0, r3
 800874e:	2100      	movs	r1, #0
 8008750:	4603      	mov	r3, r0
 8008752:	617b      	str	r3, [r7, #20]
    n = (uint32_t)(PARAM_N - i);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	f5c3 438a 	rsb	r3, r3, #17664	@ 0x4500
 800875a:	3305      	adds	r3, #5
 800875c:	613b      	str	r3, [r7, #16]
    r = a - q * n;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	fb02 f303 	mul.w	r3, r2, r3
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	60fb      	str	r3, [r7, #12]
    return cond_sub(r, n);
 800876c:	6939      	ldr	r1, [r7, #16]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff ffb8 	bl	80086e4 <cond_sub>
 8008774:	4603      	mov	r3, r0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3718      	adds	r7, #24
 800877a:	46bd      	mov	sp, r7
 800877c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008780:	20000004 	.word	0x20000004

08008784 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight>:
 *
 * @param[in] ctx Pointer to the context of the seed expander
 * @param[in] v Pointer to an array
 * @param[in] weight Integer that is the Hamming weight
 */
void PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight(seedexpander_state *ctx, uint64_t *v, uint16_t weight) {
 8008784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008788:	f5ad 6dc9 	sub.w	sp, sp, #1608	@ 0x648
 800878c:	af00      	add	r7, sp, #0
 800878e:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008792:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8008796:	6018      	str	r0, [r3, #0]
 8008798:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 800879c:	f5a3 63c5 	sub.w	r3, r3, #1576	@ 0x628
 80087a0:	6019      	str	r1, [r3, #0]
 80087a2:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80087a6:	f2a3 632a 	subw	r3, r3, #1578	@ 0x62a
 80087aa:	801a      	strh	r2, [r3, #0]
    uint8_t rand_bytes[4 * PARAM_OMEGA_R] = {0}; // to be interpreted as PARAM_OMEGA_R 32-bit unsigned ints
 80087ac:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80087b0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	3304      	adds	r3, #4
 80087ba:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80087be:	2100      	movs	r1, #0
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 ff19 	bl	800a5f8 <memset>
    uint32_t support[PARAM_OMEGA_R] = {0};
 80087c6:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80087ca:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80087ce:	4618      	mov	r0, r3
 80087d0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80087d4:	461a      	mov	r2, r3
 80087d6:	2100      	movs	r1, #0
 80087d8:	f001 ff0e 	bl	800a5f8 <memset>
    uint32_t index_tab [PARAM_OMEGA_R] = {0};
 80087dc:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80087e0:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80087e4:	4618      	mov	r0, r3
 80087e6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80087ea:	461a      	mov	r2, r3
 80087ec:	2100      	movs	r1, #0
 80087ee:	f001 ff03 	bl	800a5f8 <memset>
    uint64_t bit_tab [PARAM_OMEGA_R] = {0};
 80087f2:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80087f6:	f5a3 63c4 	sub.w	r3, r3, #1568	@ 0x620
 80087fa:	4618      	mov	r0, r3
 80087fc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8008800:	461a      	mov	r2, r3
 8008802:	2100      	movs	r1, #0
 8008804:	f001 fef8 	bl	800a5f8 <memset>
    uint32_t pos, found, mask32, tmp;
    uint64_t mask64, val;

    PQCLEAN_HQC128_CLEAN_seedexpander(ctx, rand_bytes, 4 * weight);
 8008808:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 800880c:	f2a3 632a 	subw	r3, r3, #1578	@ 0x62a
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	461a      	mov	r2, r3
 8008816:	f207 41dc 	addw	r1, r7, #1244	@ 0x4dc
 800881a:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 800881e:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8008822:	6818      	ldr	r0, [r3, #0]
 8008824:	f7ff fd2e 	bl	8008284 <PQCLEAN_HQC128_CLEAN_seedexpander>

    for (size_t i = 0; i < weight; ++i) {
 8008828:	2300      	movs	r3, #0
 800882a:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 800882e:	e082      	b.n	8008936 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x1b2>
        support[i] = rand_bytes[4 * i];
 8008830:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	f507 62c9 	add.w	r2, r7, #1608	@ 0x648
 800883a:	f5a2 72b6 	sub.w	r2, r2, #364	@ 0x16c
 800883e:	5cd3      	ldrb	r3, [r2, r3]
 8008840:	4619      	mov	r1, r3
 8008842:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008846:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800884a:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 800884e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        support[i] |= rand_bytes[4 * i + 1] << 8;
 8008852:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008856:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 800885a:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 800885e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008862:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	3301      	adds	r3, #1
 800886a:	f507 61c9 	add.w	r1, r7, #1608	@ 0x648
 800886e:	f5a1 71b6 	sub.w	r1, r1, #364	@ 0x16c
 8008872:	5ccb      	ldrb	r3, [r1, r3]
 8008874:	021b      	lsls	r3, r3, #8
 8008876:	ea42 0103 	orr.w	r1, r2, r3
 800887a:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 800887e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8008882:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 8008886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        support[i] |= (uint32_t)rand_bytes[4 * i + 2] << 16;
 800888a:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 800888e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8008892:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 8008896:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800889a:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	3302      	adds	r3, #2
 80088a2:	f507 61c9 	add.w	r1, r7, #1608	@ 0x648
 80088a6:	f5a1 71b6 	sub.w	r1, r1, #364	@ 0x16c
 80088aa:	5ccb      	ldrb	r3, [r1, r3]
 80088ac:	041b      	lsls	r3, r3, #16
 80088ae:	ea42 0103 	orr.w	r1, r2, r3
 80088b2:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80088b6:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80088ba:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 80088be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        support[i] |= (uint32_t)rand_bytes[4 * i + 3] << 24;
 80088c2:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80088c6:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80088ca:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 80088ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088d2:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	3303      	adds	r3, #3
 80088da:	f507 61c9 	add.w	r1, r7, #1608	@ 0x648
 80088de:	f5a1 71b6 	sub.w	r1, r1, #364	@ 0x16c
 80088e2:	5ccb      	ldrb	r3, [r1, r3]
 80088e4:	061b      	lsls	r3, r3, #24
 80088e6:	ea42 0103 	orr.w	r1, r2, r3
 80088ea:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80088ee:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80088f2:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 80088f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        support[i] = (uint32_t)(i + reduce(support[i], i)); // use constant-tme reduction
 80088fa:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80088fe:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8008902:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 8008906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890a:	f8d7 1634 	ldr.w	r1, [r7, #1588]	@ 0x634
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff fefe 	bl	8008710 <reduce>
 8008914:	4602      	mov	r2, r0
 8008916:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 800891a:	18d1      	adds	r1, r2, r3
 800891c:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008920:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8008924:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 8008928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = 0; i < weight; ++i) {
 800892c:	f8d7 3634 	ldr.w	r3, [r7, #1588]	@ 0x634
 8008930:	3301      	adds	r3, #1
 8008932:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 8008936:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 800893a:	f2a3 632a 	subw	r3, r3, #1578	@ 0x62a
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	f8d7 2634 	ldr.w	r2, [r7, #1588]	@ 0x634
 8008944:	429a      	cmp	r2, r3
 8008946:	f4ff af73 	bcc.w	8008830 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0xac>
    }

    for (size_t i = (weight - 1); i-- > 0;) {
 800894a:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 800894e:	f2a3 632a 	subw	r3, r3, #1578	@ 0x62a
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	3b01      	subs	r3, #1
 8008956:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 800895a:	e04f      	b.n	80089fc <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x278>
        found = 0;
 800895c:	2300      	movs	r3, #0
 800895e:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644

        for (size_t j = i + 1; j < weight; ++j) {
 8008962:	f8d7 3630 	ldr.w	r3, [r7, #1584]	@ 0x630
 8008966:	3301      	adds	r3, #1
 8008968:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 800896c:	e01d      	b.n	80089aa <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x226>
            found |= compare_u32(support[j], support[i]);
 800896e:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008972:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8008976:	f8d7 262c 	ldr.w	r2, [r7, #1580]	@ 0x62c
 800897a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800897e:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008982:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8008986:	f8d7 2630 	ldr.w	r2, [r7, #1584]	@ 0x630
 800898a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898e:	4619      	mov	r1, r3
 8008990:	f7ff fe2c 	bl	80085ec <compare_u32>
 8008994:	4602      	mov	r2, r0
 8008996:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 800899a:	4313      	orrs	r3, r2
 800899c:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
        for (size_t j = i + 1; j < weight; ++j) {
 80089a0:	f8d7 362c 	ldr.w	r3, [r7, #1580]	@ 0x62c
 80089a4:	3301      	adds	r3, #1
 80089a6:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 80089aa:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80089ae:	f2a3 632a 	subw	r3, r3, #1578	@ 0x62a
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	f8d7 262c 	ldr.w	r2, [r7, #1580]	@ 0x62c
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d3d8      	bcc.n	800896e <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x1ea>
        }

        mask32 = 0 - found;
 80089bc:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 80089c0:	425b      	negs	r3, r3
 80089c2:	f8c7 3608 	str.w	r3, [r7, #1544]	@ 0x608
        support[i] = (mask32 & i) ^ (~mask32 & support[i]);
 80089c6:	f8d7 2608 	ldr.w	r2, [r7, #1544]	@ 0x608
 80089ca:	f8d7 3630 	ldr.w	r3, [r7, #1584]	@ 0x630
 80089ce:	401a      	ands	r2, r3
 80089d0:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 80089d4:	43d9      	mvns	r1, r3
 80089d6:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80089da:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80089de:	f8d7 0630 	ldr.w	r0, [r7, #1584]	@ 0x630
 80089e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80089e6:	400b      	ands	r3, r1
 80089e8:	ea82 0103 	eor.w	r1, r2, r3
 80089ec:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 80089f0:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 80089f4:	f8d7 2630 	ldr.w	r2, [r7, #1584]	@ 0x630
 80089f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (size_t i = (weight - 1); i-- > 0;) {
 80089fc:	f8d7 3630 	ldr.w	r3, [r7, #1584]	@ 0x630
 8008a00:	1e5a      	subs	r2, r3, #1
 8008a02:	f8c7 2630 	str.w	r2, [r7, #1584]	@ 0x630
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1a8      	bne.n	800895c <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x1d8>
    }

    for (size_t i = 0; i < weight; ++i) {
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 8008a10:	e02f      	b.n	8008a72 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x2ee>
        index_tab[i] = support[i] >> 6;
 8008a12:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008a16:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8008a1a:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 8008a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a22:	0999      	lsrs	r1, r3, #6
 8008a24:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008a28:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8008a2c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 8008a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pos = support[i] & 0x3f;
 8008a34:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008a38:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8008a3c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 8008a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a48:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
        bit_tab[i] = single_bit_mask(pos); // avoid secret shift
 8008a4c:	f8d7 060c 	ldr.w	r0, [r7, #1548]	@ 0x60c
 8008a50:	f7ff fde0 	bl	8008614 <single_bit_mask>
 8008a54:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008a58:	f5a3 62c4 	sub.w	r2, r3, #1568	@ 0x620
 8008a5c:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 8008a60:	00db      	lsls	r3, r3, #3
 8008a62:	4413      	add	r3, r2
 8008a64:	e9c3 0100 	strd	r0, r1, [r3]
    for (size_t i = 0; i < weight; ++i) {
 8008a68:	f8d7 3628 	ldr.w	r3, [r7, #1576]	@ 0x628
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 8008a72:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008a76:	f2a3 632a 	subw	r3, r3, #1578	@ 0x62a
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	f8d7 2628 	ldr.w	r2, [r7, #1576]	@ 0x628
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d3c6      	bcc.n	8008a12 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x28e>
    }

    for (size_t i = 0; i < VEC_N_SIZE_64; ++i) {
 8008a84:	2300      	movs	r3, #0
 8008a86:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8008a8a:	e08b      	b.n	8008ba4 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x420>
        val = 0;
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	f507 61c7 	add.w	r1, r7, #1592	@ 0x638
 8008a98:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = 0; j < weight; ++j) {
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 8008aa2:	e050      	b.n	8008b46 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x3c2>
            tmp = (uint32_t)(i - index_tab[j]);
 8008aa4:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008aa8:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8008aac:	f8d7 2620 	ldr.w	r2, [r7, #1568]	@ 0x620
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	f8d7 2624 	ldr.w	r2, [r7, #1572]	@ 0x624
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
            tmp = 1 ^ ((uint32_t)(tmp | (0 - tmp)) >> 31);
 8008abe:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8008ac2:	425a      	negs	r2, r3
 8008ac4:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	0fdb      	lsrs	r3, r3, #31
 8008acc:	f083 0301 	eor.w	r3, r3, #1
 8008ad0:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
            mask64 = 0 - (uint64_t)tmp;
 8008ad4:	f8d7 361c 	ldr.w	r3, [r7, #1564]	@ 0x61c
 8008ad8:	2200      	movs	r2, #0
 8008ada:	469a      	mov	sl, r3
 8008adc:	4693      	mov	fp, r2
 8008ade:	2300      	movs	r3, #0
 8008ae0:	f1da 0200 	rsbs	r2, sl, #0
 8008ae4:	60ba      	str	r2, [r7, #8]
 8008ae6:	eb63 030b 	sbc.w	r3, r3, fp
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8008af0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008af4:	e9c2 3400 	strd	r3, r4, [r2]
            val |= (bit_tab[j] & mask64);
 8008af8:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008afc:	f5a3 62c4 	sub.w	r2, r3, #1568	@ 0x620
 8008b00:	f8d7 3620 	ldr.w	r3, [r7, #1568]	@ 0x620
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	4413      	add	r3, r2
 8008b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b0c:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	ea00 0802 	and.w	r8, r0, r2
 8008b18:	ea01 0903 	and.w	r9, r1, r3
 8008b1c:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	ea42 0108 	orr.w	r1, r2, r8
 8008b28:	6039      	str	r1, [r7, #0]
 8008b2a:	ea43 0309 	orr.w	r3, r3, r9
 8008b2e:	607b      	str	r3, [r7, #4]
 8008b30:	f507 62c7 	add.w	r2, r7, #1592	@ 0x638
 8008b34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008b38:	e9c2 3400 	strd	r3, r4, [r2]
        for (size_t j = 0; j < weight; ++j) {
 8008b3c:	f8d7 3620 	ldr.w	r3, [r7, #1568]	@ 0x620
 8008b40:	3301      	adds	r3, #1
 8008b42:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 8008b46:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008b4a:	f2a3 632a 	subw	r3, r3, #1578	@ 0x62a
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	f8d7 2620 	ldr.w	r2, [r7, #1568]	@ 0x620
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d3a5      	bcc.n	8008aa4 <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x320>
        }
        v[i] |= val;
 8008b58:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	f507 62c9 	add.w	r2, r7, #1608	@ 0x648
 8008b62:	f5a2 62c5 	sub.w	r2, r2, #1576	@ 0x628
 8008b66:	6812      	ldr	r2, [r2, #0]
 8008b68:	4413      	add	r3, r2
 8008b6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008b6e:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 8008b72:	00da      	lsls	r2, r3, #3
 8008b74:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8008b78:	f5a3 63c5 	sub.w	r3, r3, #1576	@ 0x628
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	1899      	adds	r1, r3, r2
 8008b80:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	ea44 0002 	orr.w	r0, r4, r2
 8008b8c:	6138      	str	r0, [r7, #16]
 8008b8e:	432b      	orrs	r3, r5
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008b96:	e9c1 3400 	strd	r3, r4, [r1]
    for (size_t i = 0; i < VEC_N_SIZE_64; ++i) {
 8008b9a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8008ba4:	f8d7 3624 	ldr.w	r3, [r7, #1572]	@ 0x624
 8008ba8:	f5b3 7f8a 	cmp.w	r3, #276	@ 0x114
 8008bac:	f67f af6e 	bls.w	8008a8c <PQCLEAN_HQC128_CLEAN_vect_set_random_fixed_weight+0x308>
    }
}
 8008bb0:	bf00      	nop
 8008bb2:	bf00      	nop
 8008bb4:	f507 67c9 	add.w	r7, r7, #1608	@ 0x648
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008bbe <PQCLEAN_HQC128_CLEAN_vect_set_random>:
 * array of bytes using the PQCLEAN_HQC128_CLEAN_seedexpander function, and drop the extra bits using a mask.
 *
 * @param[in] v Pointer to an array
 * @param[in] ctx Pointer to the context of the seed expander
 */
void PQCLEAN_HQC128_CLEAN_vect_set_random(seedexpander_state *ctx, uint64_t *v) {
 8008bbe:	b5b0      	push	{r4, r5, r7, lr}
 8008bc0:	f5ad 6d0b 	sub.w	sp, sp, #2224	@ 0x8b0
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8008bca:	f6a3 03ac 	subw	r3, r3, #2220	@ 0x8ac
 8008bce:	6018      	str	r0, [r3, #0]
 8008bd0:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8008bd4:	f5a3 630b 	sub.w	r3, r3, #2224	@ 0x8b0
 8008bd8:	6019      	str	r1, [r3, #0]
    uint8_t rand_bytes[VEC_N_SIZE_BYTES] = {0};
 8008bda:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8008bde:	f6a3 03a4 	subw	r3, r3, #2212	@ 0x8a4
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	3304      	adds	r3, #4
 8008be8:	f640 029d 	movw	r2, #2205	@ 0x89d
 8008bec:	2100      	movs	r1, #0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f001 fd02 	bl	800a5f8 <memset>

    PQCLEAN_HQC128_CLEAN_seedexpander(ctx, rand_bytes, VEC_N_SIZE_BYTES);
 8008bf4:	f107 010c 	add.w	r1, r7, #12
 8008bf8:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8008bfc:	f6a3 03ac 	subw	r3, r3, #2220	@ 0x8ac
 8008c00:	f640 02a1 	movw	r2, #2209	@ 0x8a1
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	f7ff fb3d 	bl	8008284 <PQCLEAN_HQC128_CLEAN_seedexpander>

    PQCLEAN_HQC128_CLEAN_load8_arr(v, VEC_N_SIZE_64, rand_bytes, VEC_N_SIZE_BYTES);
 8008c0a:	f107 020c 	add.w	r2, r7, #12
 8008c0e:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8008c12:	f5a3 600b 	sub.w	r0, r3, #2224	@ 0x8b0
 8008c16:	f640 03a1 	movw	r3, #2209	@ 0x8a1
 8008c1a:	f240 1115 	movw	r1, #277	@ 0x115
 8008c1e:	6800      	ldr	r0, [r0, #0]
 8008c20:	f7fe f97b 	bl	8006f1a <PQCLEAN_HQC128_CLEAN_load8_arr>
    v[VEC_N_SIZE_64 - 1] &= RED_MASK;
 8008c24:	f507 630b 	add.w	r3, r7, #2224	@ 0x8b0
 8008c28:	f5a3 630b 	sub.w	r3, r3, #2224	@ 0x8b0
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	f507 610b 	add.w	r1, r7, #2224	@ 0x8b0
 8008c3a:	f5a1 610b 	sub.w	r1, r1, #2224	@ 0x8b0
 8008c3e:	6809      	ldr	r1, [r1, #0]
 8008c40:	f501 610a 	add.w	r1, r1, #2208	@ 0x8a0
 8008c44:	f002 041f 	and.w	r4, r2, #31
 8008c48:	2500      	movs	r5, #0
 8008c4a:	e9c1 4500 	strd	r4, r5, [r1]
}
 8008c4e:	bf00      	nop
 8008c50:	f507 670b 	add.w	r7, r7, #2224	@ 0x8b0
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bdb0      	pop	{r4, r5, r7, pc}

08008c58 <PQCLEAN_HQC128_CLEAN_vect_add>:
 * @param[out] o Pointer to an array that is the result
 * @param[in] v1 Pointer to an array that is the first vector
 * @param[in] v2 Pointer to an array that is the second vector
 * @param[in] size Integer that is the size of the vectors
 */
void PQCLEAN_HQC128_CLEAN_vect_add(uint64_t *o, const uint64_t *v1, const uint64_t *v2, size_t size) {
 8008c58:	b4f0      	push	{r4, r5, r6, r7}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < size; ++i) {
 8008c66:	2300      	movs	r3, #0
 8008c68:	617b      	str	r3, [r7, #20]
 8008c6a:	e019      	b.n	8008ca0 <PQCLEAN_HQC128_CLEAN_vect_add+0x48>
        o[i] = v1[i] ^ v2[i];
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	4413      	add	r3, r2
 8008c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	00db      	lsls	r3, r3, #3
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	4413      	add	r3, r2
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	697e      	ldr	r6, [r7, #20]
 8008c86:	00f6      	lsls	r6, r6, #3
 8008c88:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8008c8c:	4466      	add	r6, ip
 8008c8e:	ea80 0402 	eor.w	r4, r0, r2
 8008c92:	ea81 0503 	eor.w	r5, r1, r3
 8008c96:	e9c6 4500 	strd	r4, r5, [r6]
    for (size_t i = 0; i < size; ++i) {
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	617b      	str	r3, [r7, #20]
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d3e1      	bcc.n	8008c6c <PQCLEAN_HQC128_CLEAN_vect_add+0x14>
    }
}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bcf0      	pop	{r4, r5, r6, r7}
 8008cb2:	4770      	bx	lr

08008cb4 <PQCLEAN_HQC128_CLEAN_vect_compare>:
 * @param[in] v1 Pointer to an array that is first vector
 * @param[in] v2 Pointer to an array that is second vector
 * @param[in] size Integer that is the size of the vectors
 * @returns 0 if the vectors are equal and 1 otherwise
 */
uint8_t PQCLEAN_HQC128_CLEAN_vect_compare(const uint8_t *v1, const uint8_t *v2, size_t size) {
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
    uint16_t r = 0x0100;
 8008cc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008cc4:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < size; i++) {
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	613b      	str	r3, [r7, #16]
 8008cca:	e010      	b.n	8008cee <PQCLEAN_HQC128_CLEAN_vect_compare+0x3a>
        r |= v1[i] ^ v2[i];
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	781a      	ldrb	r2, [r3, #0]
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	440b      	add	r3, r1
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	4053      	eors	r3, r2
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	8afb      	ldrh	r3, [r7, #22]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < size; i++) {
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	3301      	adds	r3, #1
 8008cec:	613b      	str	r3, [r7, #16]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d3ea      	bcc.n	8008ccc <PQCLEAN_HQC128_CLEAN_vect_compare+0x18>
    }

    return (r - 1) >> 8;
 8008cf6:	8afb      	ldrh	r3, [r7, #22]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	121b      	asrs	r3, r3, #8
 8008cfc:	b2db      	uxtb	r3, r3
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bc80      	pop	{r7}
 8008d06:	4770      	bx	lr

08008d08 <PQCLEAN_HQC128_CLEAN_vect_resize>:
 * @param[out] o Pointer to the output vector
 * @param[in] size_o Integer that is the size of the output vector in bits
 * @param[in] v Pointer to the input vector
 * @param[in] size_v Integer that is the size of the input vector in bits
 */
void PQCLEAN_HQC128_CLEAN_vect_resize(uint64_t *o, uint32_t size_o, const uint64_t *v, uint32_t size_v) {
 8008d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d0c:	b089      	sub	sp, #36	@ 0x24
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	60f8      	str	r0, [r7, #12]
 8008d12:	60b9      	str	r1, [r7, #8]
 8008d14:	607a      	str	r2, [r7, #4]
 8008d16:	603b      	str	r3, [r7, #0]
    uint64_t mask = 0x7FFFFFFFFFFFFFFF;
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d1c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    size_t val = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	61fb      	str	r3, [r7, #28]
    if (size_o < size_v) {
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d23a      	bcs.n	8008da6 <PQCLEAN_HQC128_CLEAN_vect_resize+0x9e>

        if (size_o % 64) {
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <PQCLEAN_HQC128_CLEAN_vect_resize+0x3e>
            val = 64 - (size_o % 64);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d40:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8008d44:	61fb      	str	r3, [r7, #28]
        }

        memcpy(o, v, VEC_N1N2_SIZE_BYTES);
 8008d46:	f44f 620a 	mov.w	r2, #2208	@ 0x8a0
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f001 fc98 	bl	800a682 <memcpy>

        for (size_t i = 0; i < val; ++i) {
 8008d52:	2300      	movs	r3, #0
 8008d54:	61bb      	str	r3, [r7, #24]
 8008d56:	e021      	b.n	8008d9c <PQCLEAN_HQC128_CLEAN_vect_resize+0x94>
            o[VEC_N1N2_SIZE_64 - 1] &= (mask >> i);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 8008d5e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8008d62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d66:	69b9      	ldr	r1, [r7, #24]
 8008d68:	f1c1 0620 	rsb	r6, r1, #32
 8008d6c:	f1a1 0020 	sub.w	r0, r1, #32
 8008d70:	fa22 f401 	lsr.w	r4, r2, r1
 8008d74:	fa03 f606 	lsl.w	r6, r3, r6
 8008d78:	4334      	orrs	r4, r6
 8008d7a:	fa23 f000 	lsr.w	r0, r3, r0
 8008d7e:	4304      	orrs	r4, r0
 8008d80:	fa23 f501 	lsr.w	r5, r3, r1
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 8008d8a:	ea0a 0804 	and.w	r8, sl, r4
 8008d8e:	ea0b 0905 	and.w	r9, fp, r5
 8008d92:	e9c3 8900 	strd	r8, r9, [r3]
        for (size_t i = 0; i < val; ++i) {
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	61bb      	str	r3, [r7, #24]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d3d9      	bcc.n	8008d58 <PQCLEAN_HQC128_CLEAN_vect_resize+0x50>
        }
    } else {
        memcpy(o, v, 8 * CEIL_DIVIDE(size_v, 64));
    }
}
 8008da4:	e008      	b.n	8008db8 <PQCLEAN_HQC128_CLEAN_vect_resize+0xb0>
        memcpy(o, v, 8 * CEIL_DIVIDE(size_v, 64));
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	333f      	adds	r3, #63	@ 0x3f
 8008daa:	099b      	lsrs	r3, r3, #6
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	461a      	mov	r2, r3
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f001 fc65 	bl	800a682 <memcpy>
}
 8008db8:	bf00      	nop
 8008dba:	3724      	adds	r7, #36	@ 0x24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008dc4 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8008dc4:	f7ff fc0c 	bl	80085e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008dc8:	480b      	ldr	r0, [pc, #44]	@ (8008df8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8008dca:	490c      	ldr	r1, [pc, #48]	@ (8008dfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8008dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8008e00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8008dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008dd0:	e002      	b.n	8008dd8 <LoopCopyDataInit>

08008dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008dd6:	3304      	adds	r3, #4

08008dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ddc:	d3f9      	bcc.n	8008dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008dde:	4a09      	ldr	r2, [pc, #36]	@ (8008e04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8008de0:	4c09      	ldr	r4, [pc, #36]	@ (8008e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008de4:	e001      	b.n	8008dea <LoopFillZerobss>

08008de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008de8:	3204      	adds	r2, #4

08008dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008dec:	d3fb      	bcc.n	8008de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008dee:	f001 fc21 	bl	800a634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008df2:	f7fd fea8 	bl	8006b46 <main>
  bx lr
 8008df6:	4770      	bx	lr
  ldr r0, =_sdata
 8008df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008dfc:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8008e00:	0800c334 	.word	0x0800c334
  ldr r2, =_sbss
 8008e04:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8008e08:	2000034c 	.word	0x2000034c

08008e0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008e0c:	e7fe      	b.n	8008e0c <ADC1_IRQHandler>

08008e0e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e18:	2003      	movs	r0, #3
 8008e1a:	f000 f917 	bl	800904c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008e1e:	2000      	movs	r0, #0
 8008e20:	f000 f80e 	bl	8008e40 <HAL_InitTick>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	71fb      	strb	r3, [r7, #7]
 8008e2e:	e001      	b.n	8008e34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008e30:	f7ff fa74 	bl	800831c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008e34:	79fb      	ldrb	r3, [r7, #7]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008e4c:	4b16      	ldr	r3, [pc, #88]	@ (8008ea8 <HAL_InitTick+0x68>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d022      	beq.n	8008e9a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008e54:	4b15      	ldr	r3, [pc, #84]	@ (8008eac <HAL_InitTick+0x6c>)
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	4b13      	ldr	r3, [pc, #76]	@ (8008ea8 <HAL_InitTick+0x68>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8008e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f916 	bl	800909a <HAL_SYSTICK_Config>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10f      	bne.n	8008e94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b0f      	cmp	r3, #15
 8008e78:	d809      	bhi.n	8008e8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	6879      	ldr	r1, [r7, #4]
 8008e7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e82:	f000 f8ee 	bl	8009062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008e86:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb0 <HAL_InitTick+0x70>)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	e007      	b.n	8008e9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	73fb      	strb	r3, [r7, #15]
 8008e92:	e004      	b.n	8008e9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	73fb      	strb	r3, [r7, #15]
 8008e98:	e001      	b.n	8008e9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	20000134 	.word	0x20000134
 8008eac:	20000000 	.word	0x20000000
 8008eb0:	20000130 	.word	0x20000130

08008eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008eb8:	4b05      	ldr	r3, [pc, #20]	@ (8008ed0 <HAL_IncTick+0x1c>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	4b05      	ldr	r3, [pc, #20]	@ (8008ed4 <HAL_IncTick+0x20>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	4a03      	ldr	r2, [pc, #12]	@ (8008ed0 <HAL_IncTick+0x1c>)
 8008ec4:	6013      	str	r3, [r2, #0]
}
 8008ec6:	bf00      	nop
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bc80      	pop	{r7}
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	200001fc 	.word	0x200001fc
 8008ed4:	20000134 	.word	0x20000134

08008ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  return uwTick;
 8008edc:	4b02      	ldr	r3, [pc, #8]	@ (8008ee8 <HAL_GetTick+0x10>)
 8008ede:	681b      	ldr	r3, [r3, #0]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr
 8008ee8:	200001fc 	.word	0x200001fc

08008eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f003 0307 	and.w	r3, r3, #7
 8008efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008efc:	4b0c      	ldr	r3, [pc, #48]	@ (8008f30 <__NVIC_SetPriorityGrouping+0x44>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f08:	4013      	ands	r3, r2
 8008f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f1e:	4a04      	ldr	r2, [pc, #16]	@ (8008f30 <__NVIC_SetPriorityGrouping+0x44>)
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	60d3      	str	r3, [r2, #12]
}
 8008f24:	bf00      	nop
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	e000ed00 	.word	0xe000ed00

08008f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f38:	4b04      	ldr	r3, [pc, #16]	@ (8008f4c <__NVIC_GetPriorityGrouping+0x18>)
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	0a1b      	lsrs	r3, r3, #8
 8008f3e:	f003 0307 	and.w	r3, r3, #7
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bc80      	pop	{r7}
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	e000ed00 	.word	0xe000ed00

08008f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	6039      	str	r1, [r7, #0]
 8008f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	db0a      	blt.n	8008f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	490c      	ldr	r1, [pc, #48]	@ (8008f9c <__NVIC_SetPriority+0x4c>)
 8008f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f6e:	0112      	lsls	r2, r2, #4
 8008f70:	b2d2      	uxtb	r2, r2
 8008f72:	440b      	add	r3, r1
 8008f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008f78:	e00a      	b.n	8008f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	4908      	ldr	r1, [pc, #32]	@ (8008fa0 <__NVIC_SetPriority+0x50>)
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	f003 030f 	and.w	r3, r3, #15
 8008f86:	3b04      	subs	r3, #4
 8008f88:	0112      	lsls	r2, r2, #4
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	440b      	add	r3, r1
 8008f8e:	761a      	strb	r2, [r3, #24]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bc80      	pop	{r7}
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	e000e100 	.word	0xe000e100
 8008fa0:	e000ed00 	.word	0xe000ed00

08008fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b089      	sub	sp, #36	@ 0x24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f1c3 0307 	rsb	r3, r3, #7
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	bf28      	it	cs
 8008fc2:	2304      	movcs	r3, #4
 8008fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	2b06      	cmp	r3, #6
 8008fcc:	d902      	bls.n	8008fd4 <NVIC_EncodePriority+0x30>
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	3b03      	subs	r3, #3
 8008fd2:	e000      	b.n	8008fd6 <NVIC_EncodePriority+0x32>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008fd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe2:	43da      	mvns	r2, r3
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	401a      	ands	r2, r3
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008fec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff6:	43d9      	mvns	r1, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ffc:	4313      	orrs	r3, r2
         );
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3724      	adds	r7, #36	@ 0x24
 8009002:	46bd      	mov	sp, r7
 8009004:	bc80      	pop	{r7}
 8009006:	4770      	bx	lr

08009008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3b01      	subs	r3, #1
 8009014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009018:	d301      	bcc.n	800901e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800901a:	2301      	movs	r3, #1
 800901c:	e00f      	b.n	800903e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800901e:	4a0a      	ldr	r2, [pc, #40]	@ (8009048 <SysTick_Config+0x40>)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3b01      	subs	r3, #1
 8009024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009026:	210f      	movs	r1, #15
 8009028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800902c:	f7ff ff90 	bl	8008f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009030:	4b05      	ldr	r3, [pc, #20]	@ (8009048 <SysTick_Config+0x40>)
 8009032:	2200      	movs	r2, #0
 8009034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009036:	4b04      	ldr	r3, [pc, #16]	@ (8009048 <SysTick_Config+0x40>)
 8009038:	2207      	movs	r2, #7
 800903a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	e000e010 	.word	0xe000e010

0800904c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff ff49 	bl	8008eec <__NVIC_SetPriorityGrouping>
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b086      	sub	sp, #24
 8009066:	af00      	add	r7, sp, #0
 8009068:	4603      	mov	r3, r0
 800906a:	60b9      	str	r1, [r7, #8]
 800906c:	607a      	str	r2, [r7, #4]
 800906e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009070:	2300      	movs	r3, #0
 8009072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009074:	f7ff ff5e 	bl	8008f34 <__NVIC_GetPriorityGrouping>
 8009078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	68b9      	ldr	r1, [r7, #8]
 800907e:	6978      	ldr	r0, [r7, #20]
 8009080:	f7ff ff90 	bl	8008fa4 <NVIC_EncodePriority>
 8009084:	4602      	mov	r2, r0
 8009086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff ff5f 	bl	8008f50 <__NVIC_SetPriority>
}
 8009092:	bf00      	nop
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b082      	sub	sp, #8
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f7ff ffb0 	bl	8009008 <SysTick_Config>
 80090a8:	4603      	mov	r3, r0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80090be:	2300      	movs	r3, #0
 80090c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80090c6:	2300      	movs	r3, #0
 80090c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80090ca:	e160      	b.n	800938e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	2101      	movs	r1, #1
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	fa01 f303 	lsl.w	r3, r1, r3
 80090d8:	4013      	ands	r3, r2
 80090da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 8152 	beq.w	8009388 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	f003 0303 	and.w	r3, r3, #3
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d005      	beq.n	80090fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d130      	bne.n	800915e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	2203      	movs	r2, #3
 8009108:	fa02 f303 	lsl.w	r3, r2, r3
 800910c:	43db      	mvns	r3, r3
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	4013      	ands	r3, r2
 8009112:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	fa02 f303 	lsl.w	r3, r2, r3
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	4313      	orrs	r3, r2
 8009124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8009132:	2201      	movs	r2, #1
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	fa02 f303 	lsl.w	r3, r2, r3
 800913a:	43db      	mvns	r3, r3
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	4013      	ands	r3, r2
 8009140:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	091b      	lsrs	r3, r3, #4
 8009148:	f003 0201 	and.w	r2, r3, #1
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	fa02 f303 	lsl.w	r3, r2, r3
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4313      	orrs	r3, r2
 8009156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	2b03      	cmp	r3, #3
 8009168:	d017      	beq.n	800919a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	2203      	movs	r2, #3
 8009176:	fa02 f303 	lsl.w	r3, r2, r3
 800917a:	43db      	mvns	r3, r3
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	4013      	ands	r3, r2
 8009180:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	fa02 f303 	lsl.w	r3, r2, r3
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	4313      	orrs	r3, r2
 8009192:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d123      	bne.n	80091ee <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	08da      	lsrs	r2, r3, #3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3208      	adds	r2, #8
 80091ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	f003 0307 	and.w	r3, r3, #7
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	220f      	movs	r2, #15
 80091be:	fa02 f303 	lsl.w	r3, r2, r3
 80091c2:	43db      	mvns	r3, r3
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	4013      	ands	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	691a      	ldr	r2, [r3, #16]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	4313      	orrs	r3, r2
 80091de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	08da      	lsrs	r2, r3, #3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3208      	adds	r2, #8
 80091e8:	6939      	ldr	r1, [r7, #16]
 80091ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	2203      	movs	r2, #3
 80091fa:	fa02 f303 	lsl.w	r3, r2, r3
 80091fe:	43db      	mvns	r3, r3
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	4013      	ands	r3, r2
 8009204:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f003 0203 	and.w	r2, r3, #3
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	fa02 f303 	lsl.w	r3, r2, r3
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	4313      	orrs	r3, r2
 800921a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 80ac 	beq.w	8009388 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009230:	4b5e      	ldr	r3, [pc, #376]	@ (80093ac <HAL_GPIO_Init+0x2f8>)
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	4a5d      	ldr	r2, [pc, #372]	@ (80093ac <HAL_GPIO_Init+0x2f8>)
 8009236:	f043 0301 	orr.w	r3, r3, #1
 800923a:	6213      	str	r3, [r2, #32]
 800923c:	4b5b      	ldr	r3, [pc, #364]	@ (80093ac <HAL_GPIO_Init+0x2f8>)
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	60bb      	str	r3, [r7, #8]
 8009246:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8009248:	4a59      	ldr	r2, [pc, #356]	@ (80093b0 <HAL_GPIO_Init+0x2fc>)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	089b      	lsrs	r3, r3, #2
 800924e:	3302      	adds	r3, #2
 8009250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009254:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f003 0303 	and.w	r3, r3, #3
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	220f      	movs	r2, #15
 8009260:	fa02 f303 	lsl.w	r3, r2, r3
 8009264:	43db      	mvns	r3, r3
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	4013      	ands	r3, r2
 800926a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a51      	ldr	r2, [pc, #324]	@ (80093b4 <HAL_GPIO_Init+0x300>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d025      	beq.n	80092c0 <HAL_GPIO_Init+0x20c>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a50      	ldr	r2, [pc, #320]	@ (80093b8 <HAL_GPIO_Init+0x304>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d01f      	beq.n	80092bc <HAL_GPIO_Init+0x208>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a4f      	ldr	r2, [pc, #316]	@ (80093bc <HAL_GPIO_Init+0x308>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d019      	beq.n	80092b8 <HAL_GPIO_Init+0x204>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a4e      	ldr	r2, [pc, #312]	@ (80093c0 <HAL_GPIO_Init+0x30c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d013      	beq.n	80092b4 <HAL_GPIO_Init+0x200>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a4d      	ldr	r2, [pc, #308]	@ (80093c4 <HAL_GPIO_Init+0x310>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00d      	beq.n	80092b0 <HAL_GPIO_Init+0x1fc>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a4c      	ldr	r2, [pc, #304]	@ (80093c8 <HAL_GPIO_Init+0x314>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d007      	beq.n	80092ac <HAL_GPIO_Init+0x1f8>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a4b      	ldr	r2, [pc, #300]	@ (80093cc <HAL_GPIO_Init+0x318>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d101      	bne.n	80092a8 <HAL_GPIO_Init+0x1f4>
 80092a4:	2306      	movs	r3, #6
 80092a6:	e00c      	b.n	80092c2 <HAL_GPIO_Init+0x20e>
 80092a8:	2307      	movs	r3, #7
 80092aa:	e00a      	b.n	80092c2 <HAL_GPIO_Init+0x20e>
 80092ac:	2305      	movs	r3, #5
 80092ae:	e008      	b.n	80092c2 <HAL_GPIO_Init+0x20e>
 80092b0:	2304      	movs	r3, #4
 80092b2:	e006      	b.n	80092c2 <HAL_GPIO_Init+0x20e>
 80092b4:	2303      	movs	r3, #3
 80092b6:	e004      	b.n	80092c2 <HAL_GPIO_Init+0x20e>
 80092b8:	2302      	movs	r3, #2
 80092ba:	e002      	b.n	80092c2 <HAL_GPIO_Init+0x20e>
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <HAL_GPIO_Init+0x20e>
 80092c0:	2300      	movs	r3, #0
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	f002 0203 	and.w	r2, r2, #3
 80092c8:	0092      	lsls	r2, r2, #2
 80092ca:	4093      	lsls	r3, r2
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80092d2:	4937      	ldr	r1, [pc, #220]	@ (80093b0 <HAL_GPIO_Init+0x2fc>)
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	089b      	lsrs	r3, r3, #2
 80092d8:	3302      	adds	r3, #2
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80092e0:	4b3b      	ldr	r3, [pc, #236]	@ (80093d0 <HAL_GPIO_Init+0x31c>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	43db      	mvns	r3, r3
 80092ea:	693a      	ldr	r2, [r7, #16]
 80092ec:	4013      	ands	r3, r2
 80092ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4313      	orrs	r3, r2
 8009302:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009304:	4a32      	ldr	r2, [pc, #200]	@ (80093d0 <HAL_GPIO_Init+0x31c>)
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800930a:	4b31      	ldr	r3, [pc, #196]	@ (80093d0 <HAL_GPIO_Init+0x31c>)
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	43db      	mvns	r3, r3
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4013      	ands	r3, r2
 8009318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4313      	orrs	r3, r2
 800932c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800932e:	4a28      	ldr	r2, [pc, #160]	@ (80093d0 <HAL_GPIO_Init+0x31c>)
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009334:	4b26      	ldr	r3, [pc, #152]	@ (80093d0 <HAL_GPIO_Init+0x31c>)
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	43db      	mvns	r3, r3
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	4013      	ands	r3, r2
 8009342:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4313      	orrs	r3, r2
 8009356:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009358:	4a1d      	ldr	r2, [pc, #116]	@ (80093d0 <HAL_GPIO_Init+0x31c>)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800935e:	4b1c      	ldr	r3, [pc, #112]	@ (80093d0 <HAL_GPIO_Init+0x31c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	43db      	mvns	r3, r3
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4013      	ands	r3, r2
 800936c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4313      	orrs	r3, r2
 8009380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009382:	4a13      	ldr	r2, [pc, #76]	@ (80093d0 <HAL_GPIO_Init+0x31c>)
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	3301      	adds	r3, #1
 800938c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	fa22 f303 	lsr.w	r3, r2, r3
 8009398:	2b00      	cmp	r3, #0
 800939a:	f47f ae97 	bne.w	80090cc <HAL_GPIO_Init+0x18>
  }
}
 800939e:	bf00      	nop
 80093a0:	bf00      	nop
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	40023800 	.word	0x40023800
 80093b0:	40010000 	.word	0x40010000
 80093b4:	40020000 	.word	0x40020000
 80093b8:	40020400 	.word	0x40020400
 80093bc:	40020800 	.word	0x40020800
 80093c0:	40020c00 	.word	0x40020c00
 80093c4:	40021000 	.word	0x40021000
 80093c8:	40021400 	.word	0x40021400
 80093cc:	40021800 	.word	0x40021800
 80093d0:	40010400 	.word	0x40010400

080093d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	807b      	strh	r3, [r7, #2]
 80093e0:	4613      	mov	r3, r2
 80093e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80093e4:	787b      	ldrb	r3, [r7, #1]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80093ea:	887a      	ldrh	r2, [r7, #2]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80093f0:	e003      	b.n	80093fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80093f2:	887b      	ldrh	r3, [r7, #2]
 80093f4:	041a      	lsls	r2, r3, #16
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	619a      	str	r2, [r3, #24]
}
 80093fa:	bf00      	nop
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	bc80      	pop	{r7}
 8009402:	4770      	bx	lr

08009404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d101      	bne.n	8009416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e31d      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009416:	4b94      	ldr	r3, [pc, #592]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f003 030c 	and.w	r3, r3, #12
 800941e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009420:	4b91      	ldr	r3, [pc, #580]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009428:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d07b      	beq.n	800952e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	2b08      	cmp	r3, #8
 800943a:	d006      	beq.n	800944a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	2b0c      	cmp	r3, #12
 8009440:	d10f      	bne.n	8009462 <HAL_RCC_OscConfig+0x5e>
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009448:	d10b      	bne.n	8009462 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800944a:	4b87      	ldr	r3, [pc, #540]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d06a      	beq.n	800952c <HAL_RCC_OscConfig+0x128>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d166      	bne.n	800952c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e2f7      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d106      	bne.n	8009478 <HAL_RCC_OscConfig+0x74>
 800946a:	4b7f      	ldr	r3, [pc, #508]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a7e      	ldr	r2, [pc, #504]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	e02d      	b.n	80094d4 <HAL_RCC_OscConfig+0xd0>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10c      	bne.n	800949a <HAL_RCC_OscConfig+0x96>
 8009480:	4b79      	ldr	r3, [pc, #484]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a78      	ldr	r2, [pc, #480]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	4b76      	ldr	r3, [pc, #472]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a75      	ldr	r2, [pc, #468]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009496:	6013      	str	r3, [r2, #0]
 8009498:	e01c      	b.n	80094d4 <HAL_RCC_OscConfig+0xd0>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2b05      	cmp	r3, #5
 80094a0:	d10c      	bne.n	80094bc <HAL_RCC_OscConfig+0xb8>
 80094a2:	4b71      	ldr	r3, [pc, #452]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a70      	ldr	r2, [pc, #448]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80094a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	4b6e      	ldr	r3, [pc, #440]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a6d      	ldr	r2, [pc, #436]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80094b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	e00b      	b.n	80094d4 <HAL_RCC_OscConfig+0xd0>
 80094bc:	4b6a      	ldr	r3, [pc, #424]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a69      	ldr	r2, [pc, #420]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80094c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	4b67      	ldr	r3, [pc, #412]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a66      	ldr	r2, [pc, #408]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80094ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d013      	beq.n	8009504 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094dc:	f7ff fcfc 	bl	8008ed8 <HAL_GetTick>
 80094e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094e2:	e008      	b.n	80094f6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094e4:	f7ff fcf8 	bl	8008ed8 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	2b64      	cmp	r3, #100	@ 0x64
 80094f0:	d901      	bls.n	80094f6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e2ad      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094f6:	4b5c      	ldr	r3, [pc, #368]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d0f0      	beq.n	80094e4 <HAL_RCC_OscConfig+0xe0>
 8009502:	e014      	b.n	800952e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009504:	f7ff fce8 	bl	8008ed8 <HAL_GetTick>
 8009508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800950a:	e008      	b.n	800951e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800950c:	f7ff fce4 	bl	8008ed8 <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	2b64      	cmp	r3, #100	@ 0x64
 8009518:	d901      	bls.n	800951e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e299      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800951e:	4b52      	ldr	r3, [pc, #328]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1f0      	bne.n	800950c <HAL_RCC_OscConfig+0x108>
 800952a:	e000      	b.n	800952e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800952c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0302 	and.w	r3, r3, #2
 8009536:	2b00      	cmp	r3, #0
 8009538:	d05a      	beq.n	80095f0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	2b04      	cmp	r3, #4
 800953e:	d005      	beq.n	800954c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	2b0c      	cmp	r3, #12
 8009544:	d119      	bne.n	800957a <HAL_RCC_OscConfig+0x176>
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d116      	bne.n	800957a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800954c:	4b46      	ldr	r3, [pc, #280]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d005      	beq.n	8009564 <HAL_RCC_OscConfig+0x160>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d001      	beq.n	8009564 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e276      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009564:	4b40      	ldr	r3, [pc, #256]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	493d      	ldr	r1, [pc, #244]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009574:	4313      	orrs	r3, r2
 8009576:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009578:	e03a      	b.n	80095f0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d020      	beq.n	80095c4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009582:	4b3a      	ldr	r3, [pc, #232]	@ (800966c <HAL_RCC_OscConfig+0x268>)
 8009584:	2201      	movs	r2, #1
 8009586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009588:	f7ff fca6 	bl	8008ed8 <HAL_GetTick>
 800958c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800958e:	e008      	b.n	80095a2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009590:	f7ff fca2 	bl	8008ed8 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b02      	cmp	r3, #2
 800959c:	d901      	bls.n	80095a2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e257      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095a2:	4b31      	ldr	r3, [pc, #196]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0f0      	beq.n	8009590 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095ae:	4b2e      	ldr	r3, [pc, #184]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	021b      	lsls	r3, r3, #8
 80095bc:	492a      	ldr	r1, [pc, #168]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	604b      	str	r3, [r1, #4]
 80095c2:	e015      	b.n	80095f0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095c4:	4b29      	ldr	r3, [pc, #164]	@ (800966c <HAL_RCC_OscConfig+0x268>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095ca:	f7ff fc85 	bl	8008ed8 <HAL_GetTick>
 80095ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095d0:	e008      	b.n	80095e4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095d2:	f7ff fc81 	bl	8008ed8 <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d901      	bls.n	80095e4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e236      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80095e4:	4b20      	ldr	r3, [pc, #128]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1f0      	bne.n	80095d2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0310 	and.w	r3, r3, #16
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 80b8 	beq.w	800976e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d170      	bne.n	80096e6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009604:	4b18      	ldr	r3, [pc, #96]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800960c:	2b00      	cmp	r3, #0
 800960e:	d005      	beq.n	800961c <HAL_RCC_OscConfig+0x218>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e21a      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a1a      	ldr	r2, [r3, #32]
 8009620:	4b11      	ldr	r3, [pc, #68]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009628:	429a      	cmp	r2, r3
 800962a:	d921      	bls.n	8009670 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fc7d 	bl	8009f30 <RCC_SetFlashLatencyFromMSIRange>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e208      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009640:	4b09      	ldr	r3, [pc, #36]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	4906      	ldr	r1, [pc, #24]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 800964e:	4313      	orrs	r3, r2
 8009650:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009652:	4b05      	ldr	r3, [pc, #20]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	69db      	ldr	r3, [r3, #28]
 800965e:	061b      	lsls	r3, r3, #24
 8009660:	4901      	ldr	r1, [pc, #4]	@ (8009668 <HAL_RCC_OscConfig+0x264>)
 8009662:	4313      	orrs	r3, r2
 8009664:	604b      	str	r3, [r1, #4]
 8009666:	e020      	b.n	80096aa <HAL_RCC_OscConfig+0x2a6>
 8009668:	40023800 	.word	0x40023800
 800966c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009670:	4b99      	ldr	r3, [pc, #612]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a1b      	ldr	r3, [r3, #32]
 800967c:	4996      	ldr	r1, [pc, #600]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 800967e:	4313      	orrs	r3, r2
 8009680:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009682:	4b95      	ldr	r3, [pc, #596]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	061b      	lsls	r3, r3, #24
 8009690:	4991      	ldr	r1, [pc, #580]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009692:	4313      	orrs	r3, r2
 8009694:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fc48 	bl	8009f30 <RCC_SetFlashLatencyFromMSIRange>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e1d3      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	0b5b      	lsrs	r3, r3, #13
 80096b0:	3301      	adds	r3, #1
 80096b2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80096b6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80096ba:	4a87      	ldr	r2, [pc, #540]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80096bc:	6892      	ldr	r2, [r2, #8]
 80096be:	0912      	lsrs	r2, r2, #4
 80096c0:	f002 020f 	and.w	r2, r2, #15
 80096c4:	4985      	ldr	r1, [pc, #532]	@ (80098dc <HAL_RCC_OscConfig+0x4d8>)
 80096c6:	5c8a      	ldrb	r2, [r1, r2]
 80096c8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80096ca:	4a85      	ldr	r2, [pc, #532]	@ (80098e0 <HAL_RCC_OscConfig+0x4dc>)
 80096cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80096ce:	4b85      	ldr	r3, [pc, #532]	@ (80098e4 <HAL_RCC_OscConfig+0x4e0>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fbb4 	bl	8008e40 <HAL_InitTick>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d045      	beq.n	800976e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	e1b5      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d029      	beq.n	8009742 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80096ee:	4b7e      	ldr	r3, [pc, #504]	@ (80098e8 <HAL_RCC_OscConfig+0x4e4>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096f4:	f7ff fbf0 	bl	8008ed8 <HAL_GetTick>
 80096f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80096fa:	e008      	b.n	800970e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80096fc:	f7ff fbec 	bl	8008ed8 <HAL_GetTick>
 8009700:	4602      	mov	r2, r0
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	2b02      	cmp	r3, #2
 8009708:	d901      	bls.n	800970e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e1a1      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800970e:	4b72      	ldr	r3, [pc, #456]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009716:	2b00      	cmp	r3, #0
 8009718:	d0f0      	beq.n	80096fc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800971a:	4b6f      	ldr	r3, [pc, #444]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	496c      	ldr	r1, [pc, #432]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009728:	4313      	orrs	r3, r2
 800972a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800972c:	4b6a      	ldr	r3, [pc, #424]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	69db      	ldr	r3, [r3, #28]
 8009738:	061b      	lsls	r3, r3, #24
 800973a:	4967      	ldr	r1, [pc, #412]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 800973c:	4313      	orrs	r3, r2
 800973e:	604b      	str	r3, [r1, #4]
 8009740:	e015      	b.n	800976e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009742:	4b69      	ldr	r3, [pc, #420]	@ (80098e8 <HAL_RCC_OscConfig+0x4e4>)
 8009744:	2200      	movs	r2, #0
 8009746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009748:	f7ff fbc6 	bl	8008ed8 <HAL_GetTick>
 800974c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800974e:	e008      	b.n	8009762 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009750:	f7ff fbc2 	bl	8008ed8 <HAL_GetTick>
 8009754:	4602      	mov	r2, r0
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	2b02      	cmp	r3, #2
 800975c:	d901      	bls.n	8009762 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e177      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009762:	4b5d      	ldr	r3, [pc, #372]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1f0      	bne.n	8009750 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0308 	and.w	r3, r3, #8
 8009776:	2b00      	cmp	r3, #0
 8009778:	d030      	beq.n	80097dc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d016      	beq.n	80097b0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009782:	4b5a      	ldr	r3, [pc, #360]	@ (80098ec <HAL_RCC_OscConfig+0x4e8>)
 8009784:	2201      	movs	r2, #1
 8009786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009788:	f7ff fba6 	bl	8008ed8 <HAL_GetTick>
 800978c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800978e:	e008      	b.n	80097a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009790:	f7ff fba2 	bl	8008ed8 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	2b02      	cmp	r3, #2
 800979c:	d901      	bls.n	80097a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e157      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80097a2:	4b4d      	ldr	r3, [pc, #308]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80097a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0f0      	beq.n	8009790 <HAL_RCC_OscConfig+0x38c>
 80097ae:	e015      	b.n	80097dc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097b0:	4b4e      	ldr	r3, [pc, #312]	@ (80098ec <HAL_RCC_OscConfig+0x4e8>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097b6:	f7ff fb8f 	bl	8008ed8 <HAL_GetTick>
 80097ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097bc:	e008      	b.n	80097d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097be:	f7ff fb8b 	bl	8008ed8 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d901      	bls.n	80097d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e140      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80097d0:	4b41      	ldr	r3, [pc, #260]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80097d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1f0      	bne.n	80097be <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0304 	and.w	r3, r3, #4
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 80b5 	beq.w	8009954 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80097ea:	2300      	movs	r3, #0
 80097ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097ee:	4b3a      	ldr	r3, [pc, #232]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80097f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10d      	bne.n	8009816 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097fa:	4b37      	ldr	r3, [pc, #220]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80097fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fe:	4a36      	ldr	r2, [pc, #216]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009804:	6253      	str	r3, [r2, #36]	@ 0x24
 8009806:	4b34      	ldr	r3, [pc, #208]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800980e:	60bb      	str	r3, [r7, #8]
 8009810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009812:	2301      	movs	r3, #1
 8009814:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009816:	4b36      	ldr	r3, [pc, #216]	@ (80098f0 <HAL_RCC_OscConfig+0x4ec>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800981e:	2b00      	cmp	r3, #0
 8009820:	d118      	bne.n	8009854 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009822:	4b33      	ldr	r3, [pc, #204]	@ (80098f0 <HAL_RCC_OscConfig+0x4ec>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a32      	ldr	r2, [pc, #200]	@ (80098f0 <HAL_RCC_OscConfig+0x4ec>)
 8009828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800982c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800982e:	f7ff fb53 	bl	8008ed8 <HAL_GetTick>
 8009832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009834:	e008      	b.n	8009848 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009836:	f7ff fb4f 	bl	8008ed8 <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	2b64      	cmp	r3, #100	@ 0x64
 8009842:	d901      	bls.n	8009848 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e104      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009848:	4b29      	ldr	r3, [pc, #164]	@ (80098f0 <HAL_RCC_OscConfig+0x4ec>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0f0      	beq.n	8009836 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d106      	bne.n	800986a <HAL_RCC_OscConfig+0x466>
 800985c:	4b1e      	ldr	r3, [pc, #120]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 800985e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009860:	4a1d      	ldr	r2, [pc, #116]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009866:	6353      	str	r3, [r2, #52]	@ 0x34
 8009868:	e02d      	b.n	80098c6 <HAL_RCC_OscConfig+0x4c2>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10c      	bne.n	800988c <HAL_RCC_OscConfig+0x488>
 8009872:	4b19      	ldr	r3, [pc, #100]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009876:	4a18      	ldr	r2, [pc, #96]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800987c:	6353      	str	r3, [r2, #52]	@ 0x34
 800987e:	4b16      	ldr	r3, [pc, #88]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009882:	4a15      	ldr	r2, [pc, #84]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009884:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009888:	6353      	str	r3, [r2, #52]	@ 0x34
 800988a:	e01c      	b.n	80098c6 <HAL_RCC_OscConfig+0x4c2>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	2b05      	cmp	r3, #5
 8009892:	d10c      	bne.n	80098ae <HAL_RCC_OscConfig+0x4aa>
 8009894:	4b10      	ldr	r3, [pc, #64]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 8009896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009898:	4a0f      	ldr	r2, [pc, #60]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 800989a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800989e:	6353      	str	r3, [r2, #52]	@ 0x34
 80098a0:	4b0d      	ldr	r3, [pc, #52]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80098a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a4:	4a0c      	ldr	r2, [pc, #48]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80098a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098aa:	6353      	str	r3, [r2, #52]	@ 0x34
 80098ac:	e00b      	b.n	80098c6 <HAL_RCC_OscConfig+0x4c2>
 80098ae:	4b0a      	ldr	r3, [pc, #40]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80098b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098b2:	4a09      	ldr	r2, [pc, #36]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80098b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098b8:	6353      	str	r3, [r2, #52]	@ 0x34
 80098ba:	4b07      	ldr	r3, [pc, #28]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80098bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098be:	4a06      	ldr	r2, [pc, #24]	@ (80098d8 <HAL_RCC_OscConfig+0x4d4>)
 80098c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098c4:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d024      	beq.n	8009918 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098ce:	f7ff fb03 	bl	8008ed8 <HAL_GetTick>
 80098d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098d4:	e019      	b.n	800990a <HAL_RCC_OscConfig+0x506>
 80098d6:	bf00      	nop
 80098d8:	40023800 	.word	0x40023800
 80098dc:	0800c22c 	.word	0x0800c22c
 80098e0:	20000000 	.word	0x20000000
 80098e4:	20000130 	.word	0x20000130
 80098e8:	42470020 	.word	0x42470020
 80098ec:	42470680 	.word	0x42470680
 80098f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098f4:	f7ff faf0 	bl	8008ed8 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009902:	4293      	cmp	r3, r2
 8009904:	d901      	bls.n	800990a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e0a3      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800990a:	4b54      	ldr	r3, [pc, #336]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 800990c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800990e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0ee      	beq.n	80098f4 <HAL_RCC_OscConfig+0x4f0>
 8009916:	e014      	b.n	8009942 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009918:	f7ff fade 	bl	8008ed8 <HAL_GetTick>
 800991c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800991e:	e00a      	b.n	8009936 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009920:	f7ff fada 	bl	8008ed8 <HAL_GetTick>
 8009924:	4602      	mov	r2, r0
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800992e:	4293      	cmp	r3, r2
 8009930:	d901      	bls.n	8009936 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e08d      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009936:	4b49      	ldr	r3, [pc, #292]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 8009938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800993a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1ee      	bne.n	8009920 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009942:	7ffb      	ldrb	r3, [r7, #31]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d105      	bne.n	8009954 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009948:	4b44      	ldr	r3, [pc, #272]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 800994a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994c:	4a43      	ldr	r2, [pc, #268]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 800994e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009952:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009958:	2b00      	cmp	r3, #0
 800995a:	d079      	beq.n	8009a50 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	2b0c      	cmp	r3, #12
 8009960:	d056      	beq.n	8009a10 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009966:	2b02      	cmp	r3, #2
 8009968:	d13b      	bne.n	80099e2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800996a:	4b3d      	ldr	r3, [pc, #244]	@ (8009a60 <HAL_RCC_OscConfig+0x65c>)
 800996c:	2200      	movs	r2, #0
 800996e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009970:	f7ff fab2 	bl	8008ed8 <HAL_GetTick>
 8009974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009976:	e008      	b.n	800998a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009978:	f7ff faae 	bl	8008ed8 <HAL_GetTick>
 800997c:	4602      	mov	r2, r0
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	2b02      	cmp	r3, #2
 8009984:	d901      	bls.n	800998a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8009986:	2303      	movs	r3, #3
 8009988:	e063      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800998a:	4b34      	ldr	r3, [pc, #208]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1f0      	bne.n	8009978 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009996:	4b31      	ldr	r3, [pc, #196]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	4319      	orrs	r1, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ac:	430b      	orrs	r3, r1
 80099ae:	492b      	ldr	r1, [pc, #172]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 80099b0:	4313      	orrs	r3, r2
 80099b2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009a60 <HAL_RCC_OscConfig+0x65c>)
 80099b6:	2201      	movs	r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099ba:	f7ff fa8d 	bl	8008ed8 <HAL_GetTick>
 80099be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099c0:	e008      	b.n	80099d4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099c2:	f7ff fa89 	bl	8008ed8 <HAL_GetTick>
 80099c6:	4602      	mov	r2, r0
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	1ad3      	subs	r3, r2, r3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d901      	bls.n	80099d4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e03e      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099d4:	4b21      	ldr	r3, [pc, #132]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0f0      	beq.n	80099c2 <HAL_RCC_OscConfig+0x5be>
 80099e0:	e036      	b.n	8009a50 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009a60 <HAL_RCC_OscConfig+0x65c>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099e8:	f7ff fa76 	bl	8008ed8 <HAL_GetTick>
 80099ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099f0:	f7ff fa72 	bl	8008ed8 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e027      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009a02:	4b16      	ldr	r3, [pc, #88]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <HAL_RCC_OscConfig+0x5ec>
 8009a0e:	e01f      	b.n	8009a50 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d101      	bne.n	8009a1c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e01a      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a5c <HAL_RCC_OscConfig+0x658>)
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d10d      	bne.n	8009a4c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d106      	bne.n	8009a4c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d001      	beq.n	8009a50 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e000      	b.n	8009a52 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3720      	adds	r7, #32
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	40023800 	.word	0x40023800
 8009a60:	42470060 	.word	0x42470060

08009a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e11a      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009a78:	4b8f      	ldr	r3, [pc, #572]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d919      	bls.n	8009aba <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d105      	bne.n	8009a98 <HAL_RCC_ClockConfig+0x34>
 8009a8c:	4b8a      	ldr	r3, [pc, #552]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a89      	ldr	r2, [pc, #548]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009a92:	f043 0304 	orr.w	r3, r3, #4
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	4b87      	ldr	r3, [pc, #540]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f023 0201 	bic.w	r2, r3, #1
 8009aa0:	4985      	ldr	r1, [pc, #532]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aa8:	4b83      	ldr	r3, [pc, #524]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d001      	beq.n	8009aba <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e0f9      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d008      	beq.n	8009ad8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ac6:	4b7d      	ldr	r3, [pc, #500]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	497a      	ldr	r1, [pc, #488]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 808e 	beq.w	8009c02 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d107      	bne.n	8009afe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009aee:	4b73      	ldr	r3, [pc, #460]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d121      	bne.n	8009b3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e0d7      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d107      	bne.n	8009b16 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b06:	4b6d      	ldr	r3, [pc, #436]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d115      	bne.n	8009b3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e0cb      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d107      	bne.n	8009b2e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b1e:	4b67      	ldr	r3, [pc, #412]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e0bf      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009b2e:	4b63      	ldr	r3, [pc, #396]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e0b7      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f023 0203 	bic.w	r2, r3, #3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	495c      	ldr	r1, [pc, #368]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009b50:	f7ff f9c2 	bl	8008ed8 <HAL_GetTick>
 8009b54:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d112      	bne.n	8009b84 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009b5e:	e00a      	b.n	8009b76 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b60:	f7ff f9ba 	bl	8008ed8 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d901      	bls.n	8009b76 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e09b      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009b76:	4b51      	ldr	r3, [pc, #324]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f003 030c 	and.w	r3, r3, #12
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	d1ee      	bne.n	8009b60 <HAL_RCC_ClockConfig+0xfc>
 8009b82:	e03e      	b.n	8009c02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	2b03      	cmp	r3, #3
 8009b8a:	d112      	bne.n	8009bb2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009b8c:	e00a      	b.n	8009ba4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b8e:	f7ff f9a3 	bl	8008ed8 <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d901      	bls.n	8009ba4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e084      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ba4:	4b45      	ldr	r3, [pc, #276]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f003 030c 	and.w	r3, r3, #12
 8009bac:	2b0c      	cmp	r3, #12
 8009bae:	d1ee      	bne.n	8009b8e <HAL_RCC_ClockConfig+0x12a>
 8009bb0:	e027      	b.n	8009c02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d11d      	bne.n	8009bf6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009bba:	e00a      	b.n	8009bd2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bbc:	f7ff f98c 	bl	8008ed8 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e06d      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	f003 030c 	and.w	r3, r3, #12
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	d1ee      	bne.n	8009bbc <HAL_RCC_ClockConfig+0x158>
 8009bde:	e010      	b.n	8009c02 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009be0:	f7ff f97a 	bl	8008ed8 <HAL_GetTick>
 8009be4:	4602      	mov	r2, r0
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d901      	bls.n	8009bf6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e05b      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009bf6:	4b31      	ldr	r3, [pc, #196]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f003 030c 	and.w	r3, r3, #12
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1ee      	bne.n	8009be0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c02:	4b2d      	ldr	r3, [pc, #180]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d219      	bcs.n	8009c44 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d105      	bne.n	8009c22 <HAL_RCC_ClockConfig+0x1be>
 8009c16:	4b28      	ldr	r3, [pc, #160]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a27      	ldr	r2, [pc, #156]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009c1c:	f043 0304 	orr.w	r3, r3, #4
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	4b25      	ldr	r3, [pc, #148]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f023 0201 	bic.w	r2, r3, #1
 8009c2a:	4923      	ldr	r1, [pc, #140]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c32:	4b21      	ldr	r3, [pc, #132]	@ (8009cb8 <HAL_RCC_ClockConfig+0x254>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d001      	beq.n	8009c44 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e034      	b.n	8009cae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0304 	and.w	r3, r3, #4
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d008      	beq.n	8009c62 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c50:	4b1a      	ldr	r3, [pc, #104]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	4917      	ldr	r1, [pc, #92]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0308 	and.w	r3, r3, #8
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d009      	beq.n	8009c82 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c6e:	4b13      	ldr	r3, [pc, #76]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	490f      	ldr	r1, [pc, #60]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c82:	f000 f823 	bl	8009ccc <HAL_RCC_GetSysClockFreq>
 8009c86:	4602      	mov	r2, r0
 8009c88:	4b0c      	ldr	r3, [pc, #48]	@ (8009cbc <HAL_RCC_ClockConfig+0x258>)
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	091b      	lsrs	r3, r3, #4
 8009c8e:	f003 030f 	and.w	r3, r3, #15
 8009c92:	490b      	ldr	r1, [pc, #44]	@ (8009cc0 <HAL_RCC_ClockConfig+0x25c>)
 8009c94:	5ccb      	ldrb	r3, [r1, r3]
 8009c96:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8009cc4 <HAL_RCC_ClockConfig+0x260>)
 8009c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc8 <HAL_RCC_ClockConfig+0x264>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff f8cc 	bl	8008e40 <HAL_InitTick>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	72fb      	strb	r3, [r7, #11]

  return status;
 8009cac:	7afb      	ldrb	r3, [r7, #11]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	40023c00 	.word	0x40023c00
 8009cbc:	40023800 	.word	0x40023800
 8009cc0:	0800c22c 	.word	0x0800c22c
 8009cc4:	20000000 	.word	0x20000000
 8009cc8:	20000130 	.word	0x20000130

08009ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009cd0:	b092      	sub	sp, #72	@ 0x48
 8009cd2:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8009cd4:	4b79      	ldr	r3, [pc, #484]	@ (8009ebc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009cda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cdc:	f003 030c 	and.w	r3, r3, #12
 8009ce0:	2b0c      	cmp	r3, #12
 8009ce2:	d00d      	beq.n	8009d00 <HAL_RCC_GetSysClockFreq+0x34>
 8009ce4:	2b0c      	cmp	r3, #12
 8009ce6:	f200 80d5 	bhi.w	8009e94 <HAL_RCC_GetSysClockFreq+0x1c8>
 8009cea:	2b04      	cmp	r3, #4
 8009cec:	d002      	beq.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x28>
 8009cee:	2b08      	cmp	r3, #8
 8009cf0:	d003      	beq.n	8009cfa <HAL_RCC_GetSysClockFreq+0x2e>
 8009cf2:	e0cf      	b.n	8009e94 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009cf4:	4b72      	ldr	r3, [pc, #456]	@ (8009ec0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009cf6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8009cf8:	e0da      	b.n	8009eb0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009cfa:	4b72      	ldr	r3, [pc, #456]	@ (8009ec4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009cfc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8009cfe:	e0d7      	b.n	8009eb0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d02:	0c9b      	lsrs	r3, r3, #18
 8009d04:	f003 020f 	and.w	r2, r3, #15
 8009d08:	4b6f      	ldr	r3, [pc, #444]	@ (8009ec8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009d0a:	5c9b      	ldrb	r3, [r3, r2]
 8009d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d10:	0d9b      	lsrs	r3, r3, #22
 8009d12:	f003 0303 	and.w	r3, r3, #3
 8009d16:	3301      	adds	r3, #1
 8009d18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009d1a:	4b68      	ldr	r3, [pc, #416]	@ (8009ebc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d05d      	beq.n	8009de2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	4604      	mov	r4, r0
 8009d30:	460d      	mov	r5, r1
 8009d32:	4622      	mov	r2, r4
 8009d34:	462b      	mov	r3, r5
 8009d36:	f04f 0000 	mov.w	r0, #0
 8009d3a:	f04f 0100 	mov.w	r1, #0
 8009d3e:	0159      	lsls	r1, r3, #5
 8009d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d44:	0150      	lsls	r0, r2, #5
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	1a51      	subs	r1, r2, r1
 8009d4e:	6139      	str	r1, [r7, #16]
 8009d50:	4629      	mov	r1, r5
 8009d52:	eb63 0301 	sbc.w	r3, r3, r1
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	f04f 0200 	mov.w	r2, #0
 8009d5c:	f04f 0300 	mov.w	r3, #0
 8009d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d64:	4659      	mov	r1, fp
 8009d66:	018b      	lsls	r3, r1, #6
 8009d68:	4651      	mov	r1, sl
 8009d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009d6e:	4651      	mov	r1, sl
 8009d70:	018a      	lsls	r2, r1, #6
 8009d72:	46d4      	mov	ip, sl
 8009d74:	ebb2 080c 	subs.w	r8, r2, ip
 8009d78:	4659      	mov	r1, fp
 8009d7a:	eb63 0901 	sbc.w	r9, r3, r1
 8009d7e:	f04f 0200 	mov.w	r2, #0
 8009d82:	f04f 0300 	mov.w	r3, #0
 8009d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d92:	4690      	mov	r8, r2
 8009d94:	4699      	mov	r9, r3
 8009d96:	4623      	mov	r3, r4
 8009d98:	eb18 0303 	adds.w	r3, r8, r3
 8009d9c:	60bb      	str	r3, [r7, #8]
 8009d9e:	462b      	mov	r3, r5
 8009da0:	eb49 0303 	adc.w	r3, r9, r3
 8009da4:	60fb      	str	r3, [r7, #12]
 8009da6:	f04f 0200 	mov.w	r2, #0
 8009daa:	f04f 0300 	mov.w	r3, #0
 8009dae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009db2:	4629      	mov	r1, r5
 8009db4:	024b      	lsls	r3, r1, #9
 8009db6:	4620      	mov	r0, r4
 8009db8:	4629      	mov	r1, r5
 8009dba:	4604      	mov	r4, r0
 8009dbc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	024a      	lsls	r2, r1, #9
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dca:	2200      	movs	r2, #0
 8009dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009dd4:	f7f6 f9d2 	bl	800017c <__aeabi_uldivmod>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4613      	mov	r3, r2
 8009dde:	647b      	str	r3, [r7, #68]	@ 0x44
 8009de0:	e055      	b.n	8009e8e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de4:	2200      	movs	r2, #0
 8009de6:	623b      	str	r3, [r7, #32]
 8009de8:	627a      	str	r2, [r7, #36]	@ 0x24
 8009dea:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009dee:	4642      	mov	r2, r8
 8009df0:	464b      	mov	r3, r9
 8009df2:	f04f 0000 	mov.w	r0, #0
 8009df6:	f04f 0100 	mov.w	r1, #0
 8009dfa:	0159      	lsls	r1, r3, #5
 8009dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e00:	0150      	lsls	r0, r2, #5
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	46c4      	mov	ip, r8
 8009e08:	ebb2 0a0c 	subs.w	sl, r2, ip
 8009e0c:	4640      	mov	r0, r8
 8009e0e:	4649      	mov	r1, r9
 8009e10:	468c      	mov	ip, r1
 8009e12:	eb63 0b0c 	sbc.w	fp, r3, ip
 8009e16:	f04f 0200 	mov.w	r2, #0
 8009e1a:	f04f 0300 	mov.w	r3, #0
 8009e1e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009e22:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009e26:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009e2a:	ebb2 040a 	subs.w	r4, r2, sl
 8009e2e:	eb63 050b 	sbc.w	r5, r3, fp
 8009e32:	f04f 0200 	mov.w	r2, #0
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	00eb      	lsls	r3, r5, #3
 8009e3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e40:	00e2      	lsls	r2, r4, #3
 8009e42:	4614      	mov	r4, r2
 8009e44:	461d      	mov	r5, r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	18e3      	adds	r3, r4, r3
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	eb45 0303 	adc.w	r3, r5, r3
 8009e52:	607b      	str	r3, [r7, #4]
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e60:	4629      	mov	r1, r5
 8009e62:	028b      	lsls	r3, r1, #10
 8009e64:	4620      	mov	r0, r4
 8009e66:	4629      	mov	r1, r5
 8009e68:	4604      	mov	r4, r0
 8009e6a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8009e6e:	4601      	mov	r1, r0
 8009e70:	028a      	lsls	r2, r1, #10
 8009e72:	4610      	mov	r0, r2
 8009e74:	4619      	mov	r1, r3
 8009e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e78:	2200      	movs	r2, #0
 8009e7a:	61bb      	str	r3, [r7, #24]
 8009e7c:	61fa      	str	r2, [r7, #28]
 8009e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e82:	f7f6 f97b 	bl	800017c <__aeabi_uldivmod>
 8009e86:	4602      	mov	r2, r0
 8009e88:	460b      	mov	r3, r1
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8009e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e90:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8009e92:	e00d      	b.n	8009eb0 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8009e94:	4b09      	ldr	r3, [pc, #36]	@ (8009ebc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	0b5b      	lsrs	r3, r3, #13
 8009e9a:	f003 0307 	and.w	r3, r3, #7
 8009e9e:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eac:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8009eae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3748      	adds	r7, #72	@ 0x48
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ebc:	40023800 	.word	0x40023800
 8009ec0:	00f42400 	.word	0x00f42400
 8009ec4:	007a1200 	.word	0x007a1200
 8009ec8:	0800c220 	.word	0x0800c220

08009ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ed0:	4b02      	ldr	r3, [pc, #8]	@ (8009edc <HAL_RCC_GetHCLKFreq+0x10>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bc80      	pop	{r7}
 8009eda:	4770      	bx	lr
 8009edc:	20000000 	.word	0x20000000

08009ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ee4:	f7ff fff2 	bl	8009ecc <HAL_RCC_GetHCLKFreq>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	4b05      	ldr	r3, [pc, #20]	@ (8009f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	f003 0307 	and.w	r3, r3, #7
 8009ef4:	4903      	ldr	r1, [pc, #12]	@ (8009f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ef6:	5ccb      	ldrb	r3, [r1, r3]
 8009ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	40023800 	.word	0x40023800
 8009f04:	0800c23c 	.word	0x0800c23c

08009f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009f0c:	f7ff ffde 	bl	8009ecc <HAL_RCC_GetHCLKFreq>
 8009f10:	4602      	mov	r2, r0
 8009f12:	4b05      	ldr	r3, [pc, #20]	@ (8009f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	0adb      	lsrs	r3, r3, #11
 8009f18:	f003 0307 	and.w	r3, r3, #7
 8009f1c:	4903      	ldr	r1, [pc, #12]	@ (8009f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f1e:	5ccb      	ldrb	r3, [r1, r3]
 8009f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	40023800 	.word	0x40023800
 8009f2c:	0800c23c 	.word	0x0800c23c

08009f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b087      	sub	sp, #28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009f38:	2300      	movs	r3, #0
 8009f3a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8009f3c:	4b29      	ldr	r3, [pc, #164]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d12c      	bne.n	8009fa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009f48:	4b26      	ldr	r3, [pc, #152]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d005      	beq.n	8009f60 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009f54:	4b24      	ldr	r3, [pc, #144]	@ (8009fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8009f5c:	617b      	str	r3, [r7, #20]
 8009f5e:	e016      	b.n	8009f8e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f60:	4b20      	ldr	r3, [pc, #128]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f64:	4a1f      	ldr	r2, [pc, #124]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f6a:	6253      	str	r3, [r2, #36]	@ 0x24
 8009f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8009f78:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8009f80:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f82:	4b18      	ldr	r3, [pc, #96]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f86:	4a17      	ldr	r2, [pc, #92]	@ (8009fe4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8009f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f8c:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8009f94:	d105      	bne.n	8009fa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009f9c:	d101      	bne.n	8009fa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d105      	bne.n	8009fb4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8009fa8:	4b10      	ldr	r3, [pc, #64]	@ (8009fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a0f      	ldr	r2, [pc, #60]	@ (8009fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009fae:	f043 0304 	orr.w	r3, r3, #4
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8009fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f023 0201 	bic.w	r2, r3, #1
 8009fbc:	490b      	ldr	r1, [pc, #44]	@ (8009fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009fc4:	4b09      	ldr	r3, [pc, #36]	@ (8009fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d001      	beq.n	8009fd6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e000      	b.n	8009fd8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	371c      	adds	r7, #28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bc80      	pop	{r7}
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	40023800 	.word	0x40023800
 8009fe8:	40007000 	.word	0x40007000
 8009fec:	40023c00 	.word	0x40023c00

08009ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d101      	bne.n	800a002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e042      	b.n	800a088 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d106      	bne.n	800a01c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7fe f9b0 	bl	800837c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2224      	movs	r2, #36	@ 0x24
 800a020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68da      	ldr	r2, [r3, #12]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 f82b 	bl	800a090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	691a      	ldr	r2, [r3, #16]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	695a      	ldr	r2, [r3, #20]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68da      	ldr	r2, [r3, #12]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2220      	movs	r2, #32
 800a07c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	431a      	orrs	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800a0d0:	f023 030c 	bic.w	r3, r3, #12
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6812      	ldr	r2, [r2, #0]
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	430b      	orrs	r3, r1
 800a0dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	699a      	ldr	r2, [r3, #24]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a55      	ldr	r2, [pc, #340]	@ (800a250 <UART_SetConfig+0x1c0>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d103      	bne.n	800a106 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a0fe:	f7ff ff03 	bl	8009f08 <HAL_RCC_GetPCLK2Freq>
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	e002      	b.n	800a10c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a106:	f7ff feeb 	bl	8009ee0 <HAL_RCC_GetPCLK1Freq>
 800a10a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a114:	d14c      	bne.n	800a1b0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	009a      	lsls	r2, r3, #2
 800a120:	441a      	add	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	fbb2 f3f3 	udiv	r3, r2, r3
 800a12c:	4a49      	ldr	r2, [pc, #292]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a12e:	fba2 2303 	umull	r2, r3, r2, r3
 800a132:	095b      	lsrs	r3, r3, #5
 800a134:	0119      	lsls	r1, r3, #4
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	009a      	lsls	r2, r3, #2
 800a140:	441a      	add	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	005b      	lsls	r3, r3, #1
 800a148:	fbb2 f2f3 	udiv	r2, r2, r3
 800a14c:	4b41      	ldr	r3, [pc, #260]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a14e:	fba3 0302 	umull	r0, r3, r3, r2
 800a152:	095b      	lsrs	r3, r3, #5
 800a154:	2064      	movs	r0, #100	@ 0x64
 800a156:	fb00 f303 	mul.w	r3, r0, r3
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	00db      	lsls	r3, r3, #3
 800a15e:	3332      	adds	r3, #50	@ 0x32
 800a160:	4a3c      	ldr	r2, [pc, #240]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a162:	fba2 2303 	umull	r2, r3, r2, r3
 800a166:	095b      	lsrs	r3, r3, #5
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a16e:	4419      	add	r1, r3
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	4613      	mov	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	009a      	lsls	r2, r3, #2
 800a17a:	441a      	add	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	fbb2 f2f3 	udiv	r2, r2, r3
 800a186:	4b33      	ldr	r3, [pc, #204]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a188:	fba3 0302 	umull	r0, r3, r3, r2
 800a18c:	095b      	lsrs	r3, r3, #5
 800a18e:	2064      	movs	r0, #100	@ 0x64
 800a190:	fb00 f303 	mul.w	r3, r0, r3
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	3332      	adds	r3, #50	@ 0x32
 800a19a:	4a2e      	ldr	r2, [pc, #184]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a19c:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a0:	095b      	lsrs	r3, r3, #5
 800a1a2:	f003 0207 	and.w	r2, r3, #7
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	440a      	add	r2, r1
 800a1ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1ae:	e04a      	b.n	800a246 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009a      	lsls	r2, r3, #2
 800a1ba:	441a      	add	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c6:	4a23      	ldr	r2, [pc, #140]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1cc:	095b      	lsrs	r3, r3, #5
 800a1ce:	0119      	lsls	r1, r3, #4
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	009a      	lsls	r2, r3, #2
 800a1da:	441a      	add	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a1e6:	4b1b      	ldr	r3, [pc, #108]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a1e8:	fba3 0302 	umull	r0, r3, r3, r2
 800a1ec:	095b      	lsrs	r3, r3, #5
 800a1ee:	2064      	movs	r0, #100	@ 0x64
 800a1f0:	fb00 f303 	mul.w	r3, r0, r3
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	011b      	lsls	r3, r3, #4
 800a1f8:	3332      	adds	r3, #50	@ 0x32
 800a1fa:	4a16      	ldr	r2, [pc, #88]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a1fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a200:	095b      	lsrs	r3, r3, #5
 800a202:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a206:	4419      	add	r1, r3
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	009a      	lsls	r2, r3, #2
 800a212:	441a      	add	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a21e:	4b0d      	ldr	r3, [pc, #52]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a220:	fba3 0302 	umull	r0, r3, r3, r2
 800a224:	095b      	lsrs	r3, r3, #5
 800a226:	2064      	movs	r0, #100	@ 0x64
 800a228:	fb00 f303 	mul.w	r3, r0, r3
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	3332      	adds	r3, #50	@ 0x32
 800a232:	4a08      	ldr	r2, [pc, #32]	@ (800a254 <UART_SetConfig+0x1c4>)
 800a234:	fba2 2303 	umull	r2, r3, r2, r3
 800a238:	095b      	lsrs	r3, r3, #5
 800a23a:	f003 020f 	and.w	r2, r3, #15
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	440a      	add	r2, r1
 800a244:	609a      	str	r2, [r3, #8]
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	40013800 	.word	0x40013800
 800a254:	51eb851f 	.word	0x51eb851f

0800a258 <exit>:
 800a258:	b508      	push	{r3, lr}
 800a25a:	4b06      	ldr	r3, [pc, #24]	@ (800a274 <exit+0x1c>)
 800a25c:	4604      	mov	r4, r0
 800a25e:	b113      	cbz	r3, 800a266 <exit+0xe>
 800a260:	2100      	movs	r1, #0
 800a262:	f3af 8000 	nop.w
 800a266:	4b04      	ldr	r3, [pc, #16]	@ (800a278 <exit+0x20>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	b103      	cbz	r3, 800a26e <exit+0x16>
 800a26c:	4798      	blx	r3
 800a26e:	4620      	mov	r0, r4
 800a270:	f7fe f90b 	bl	800848a <_exit>
 800a274:	00000000 	.word	0x00000000
 800a278:	20000340 	.word	0x20000340

0800a27c <malloc>:
 800a27c:	4b02      	ldr	r3, [pc, #8]	@ (800a288 <malloc+0xc>)
 800a27e:	4601      	mov	r1, r0
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	f000 b82d 	b.w	800a2e0 <_malloc_r>
 800a286:	bf00      	nop
 800a288:	20000144 	.word	0x20000144

0800a28c <free>:
 800a28c:	4b02      	ldr	r3, [pc, #8]	@ (800a298 <free+0xc>)
 800a28e:	4601      	mov	r1, r0
 800a290:	6818      	ldr	r0, [r3, #0]
 800a292:	f000 ba23 	b.w	800a6dc <_free_r>
 800a296:	bf00      	nop
 800a298:	20000144 	.word	0x20000144

0800a29c <sbrk_aligned>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	4e0f      	ldr	r6, [pc, #60]	@ (800a2dc <sbrk_aligned+0x40>)
 800a2a0:	460c      	mov	r4, r1
 800a2a2:	6831      	ldr	r1, [r6, #0]
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	b911      	cbnz	r1, 800a2ae <sbrk_aligned+0x12>
 800a2a8:	f000 f9ae 	bl	800a608 <_sbrk_r>
 800a2ac:	6030      	str	r0, [r6, #0]
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	f000 f9a9 	bl	800a608 <_sbrk_r>
 800a2b6:	1c43      	adds	r3, r0, #1
 800a2b8:	d103      	bne.n	800a2c2 <sbrk_aligned+0x26>
 800a2ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a2be:	4620      	mov	r0, r4
 800a2c0:	bd70      	pop	{r4, r5, r6, pc}
 800a2c2:	1cc4      	adds	r4, r0, #3
 800a2c4:	f024 0403 	bic.w	r4, r4, #3
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d0f8      	beq.n	800a2be <sbrk_aligned+0x22>
 800a2cc:	1a21      	subs	r1, r4, r0
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 f99a 	bl	800a608 <_sbrk_r>
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d1f2      	bne.n	800a2be <sbrk_aligned+0x22>
 800a2d8:	e7ef      	b.n	800a2ba <sbrk_aligned+0x1e>
 800a2da:	bf00      	nop
 800a2dc:	20000200 	.word	0x20000200

0800a2e0 <_malloc_r>:
 800a2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e4:	1ccd      	adds	r5, r1, #3
 800a2e6:	f025 0503 	bic.w	r5, r5, #3
 800a2ea:	3508      	adds	r5, #8
 800a2ec:	2d0c      	cmp	r5, #12
 800a2ee:	bf38      	it	cc
 800a2f0:	250c      	movcc	r5, #12
 800a2f2:	2d00      	cmp	r5, #0
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	db01      	blt.n	800a2fc <_malloc_r+0x1c>
 800a2f8:	42a9      	cmp	r1, r5
 800a2fa:	d904      	bls.n	800a306 <_malloc_r+0x26>
 800a2fc:	230c      	movs	r3, #12
 800a2fe:	6033      	str	r3, [r6, #0]
 800a300:	2000      	movs	r0, #0
 800a302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a306:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3dc <_malloc_r+0xfc>
 800a30a:	f000 f869 	bl	800a3e0 <__malloc_lock>
 800a30e:	f8d8 3000 	ldr.w	r3, [r8]
 800a312:	461c      	mov	r4, r3
 800a314:	bb44      	cbnz	r4, 800a368 <_malloc_r+0x88>
 800a316:	4629      	mov	r1, r5
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff ffbf 	bl	800a29c <sbrk_aligned>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	4604      	mov	r4, r0
 800a322:	d158      	bne.n	800a3d6 <_malloc_r+0xf6>
 800a324:	f8d8 4000 	ldr.w	r4, [r8]
 800a328:	4627      	mov	r7, r4
 800a32a:	2f00      	cmp	r7, #0
 800a32c:	d143      	bne.n	800a3b6 <_malloc_r+0xd6>
 800a32e:	2c00      	cmp	r4, #0
 800a330:	d04b      	beq.n	800a3ca <_malloc_r+0xea>
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	4639      	mov	r1, r7
 800a336:	4630      	mov	r0, r6
 800a338:	eb04 0903 	add.w	r9, r4, r3
 800a33c:	f000 f964 	bl	800a608 <_sbrk_r>
 800a340:	4581      	cmp	r9, r0
 800a342:	d142      	bne.n	800a3ca <_malloc_r+0xea>
 800a344:	6821      	ldr	r1, [r4, #0]
 800a346:	4630      	mov	r0, r6
 800a348:	1a6d      	subs	r5, r5, r1
 800a34a:	4629      	mov	r1, r5
 800a34c:	f7ff ffa6 	bl	800a29c <sbrk_aligned>
 800a350:	3001      	adds	r0, #1
 800a352:	d03a      	beq.n	800a3ca <_malloc_r+0xea>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	442b      	add	r3, r5
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	f8d8 3000 	ldr.w	r3, [r8]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	bb62      	cbnz	r2, 800a3bc <_malloc_r+0xdc>
 800a362:	f8c8 7000 	str.w	r7, [r8]
 800a366:	e00f      	b.n	800a388 <_malloc_r+0xa8>
 800a368:	6822      	ldr	r2, [r4, #0]
 800a36a:	1b52      	subs	r2, r2, r5
 800a36c:	d420      	bmi.n	800a3b0 <_malloc_r+0xd0>
 800a36e:	2a0b      	cmp	r2, #11
 800a370:	d917      	bls.n	800a3a2 <_malloc_r+0xc2>
 800a372:	1961      	adds	r1, r4, r5
 800a374:	42a3      	cmp	r3, r4
 800a376:	6025      	str	r5, [r4, #0]
 800a378:	bf18      	it	ne
 800a37a:	6059      	strne	r1, [r3, #4]
 800a37c:	6863      	ldr	r3, [r4, #4]
 800a37e:	bf08      	it	eq
 800a380:	f8c8 1000 	streq.w	r1, [r8]
 800a384:	5162      	str	r2, [r4, r5]
 800a386:	604b      	str	r3, [r1, #4]
 800a388:	4630      	mov	r0, r6
 800a38a:	f000 f82f 	bl	800a3ec <__malloc_unlock>
 800a38e:	f104 000b 	add.w	r0, r4, #11
 800a392:	1d23      	adds	r3, r4, #4
 800a394:	f020 0007 	bic.w	r0, r0, #7
 800a398:	1ac2      	subs	r2, r0, r3
 800a39a:	bf1c      	itt	ne
 800a39c:	1a1b      	subne	r3, r3, r0
 800a39e:	50a3      	strne	r3, [r4, r2]
 800a3a0:	e7af      	b.n	800a302 <_malloc_r+0x22>
 800a3a2:	6862      	ldr	r2, [r4, #4]
 800a3a4:	42a3      	cmp	r3, r4
 800a3a6:	bf0c      	ite	eq
 800a3a8:	f8c8 2000 	streq.w	r2, [r8]
 800a3ac:	605a      	strne	r2, [r3, #4]
 800a3ae:	e7eb      	b.n	800a388 <_malloc_r+0xa8>
 800a3b0:	4623      	mov	r3, r4
 800a3b2:	6864      	ldr	r4, [r4, #4]
 800a3b4:	e7ae      	b.n	800a314 <_malloc_r+0x34>
 800a3b6:	463c      	mov	r4, r7
 800a3b8:	687f      	ldr	r7, [r7, #4]
 800a3ba:	e7b6      	b.n	800a32a <_malloc_r+0x4a>
 800a3bc:	461a      	mov	r2, r3
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	42a3      	cmp	r3, r4
 800a3c2:	d1fb      	bne.n	800a3bc <_malloc_r+0xdc>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	6053      	str	r3, [r2, #4]
 800a3c8:	e7de      	b.n	800a388 <_malloc_r+0xa8>
 800a3ca:	230c      	movs	r3, #12
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	6033      	str	r3, [r6, #0]
 800a3d0:	f000 f80c 	bl	800a3ec <__malloc_unlock>
 800a3d4:	e794      	b.n	800a300 <_malloc_r+0x20>
 800a3d6:	6005      	str	r5, [r0, #0]
 800a3d8:	e7d6      	b.n	800a388 <_malloc_r+0xa8>
 800a3da:	bf00      	nop
 800a3dc:	20000204 	.word	0x20000204

0800a3e0 <__malloc_lock>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	@ (800a3e8 <__malloc_lock+0x8>)
 800a3e2:	f000 b94c 	b.w	800a67e <__retarget_lock_acquire_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	20000344 	.word	0x20000344

0800a3ec <__malloc_unlock>:
 800a3ec:	4801      	ldr	r0, [pc, #4]	@ (800a3f4 <__malloc_unlock+0x8>)
 800a3ee:	f000 b947 	b.w	800a680 <__retarget_lock_release_recursive>
 800a3f2:	bf00      	nop
 800a3f4:	20000344 	.word	0x20000344

0800a3f8 <rand>:
 800a3f8:	4b16      	ldr	r3, [pc, #88]	@ (800a454 <rand+0x5c>)
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	681c      	ldr	r4, [r3, #0]
 800a3fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a400:	b9b3      	cbnz	r3, 800a430 <rand+0x38>
 800a402:	2018      	movs	r0, #24
 800a404:	f7ff ff3a 	bl	800a27c <malloc>
 800a408:	4602      	mov	r2, r0
 800a40a:	6320      	str	r0, [r4, #48]	@ 0x30
 800a40c:	b920      	cbnz	r0, 800a418 <rand+0x20>
 800a40e:	2152      	movs	r1, #82	@ 0x52
 800a410:	4b11      	ldr	r3, [pc, #68]	@ (800a458 <rand+0x60>)
 800a412:	4812      	ldr	r0, [pc, #72]	@ (800a45c <rand+0x64>)
 800a414:	f000 f944 	bl	800a6a0 <__assert_func>
 800a418:	4911      	ldr	r1, [pc, #68]	@ (800a460 <rand+0x68>)
 800a41a:	4b12      	ldr	r3, [pc, #72]	@ (800a464 <rand+0x6c>)
 800a41c:	e9c0 1300 	strd	r1, r3, [r0]
 800a420:	4b11      	ldr	r3, [pc, #68]	@ (800a468 <rand+0x70>)
 800a422:	2100      	movs	r1, #0
 800a424:	6083      	str	r3, [r0, #8]
 800a426:	230b      	movs	r3, #11
 800a428:	8183      	strh	r3, [r0, #12]
 800a42a:	2001      	movs	r0, #1
 800a42c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a430:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a432:	480e      	ldr	r0, [pc, #56]	@ (800a46c <rand+0x74>)
 800a434:	690b      	ldr	r3, [r1, #16]
 800a436:	694c      	ldr	r4, [r1, #20]
 800a438:	4358      	muls	r0, r3
 800a43a:	4a0d      	ldr	r2, [pc, #52]	@ (800a470 <rand+0x78>)
 800a43c:	fb02 0004 	mla	r0, r2, r4, r0
 800a440:	fba3 3202 	umull	r3, r2, r3, r2
 800a444:	3301      	adds	r3, #1
 800a446:	eb40 0002 	adc.w	r0, r0, r2
 800a44a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a44e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a452:	bd10      	pop	{r4, pc}
 800a454:	20000144 	.word	0x20000144
 800a458:	0800c244 	.word	0x0800c244
 800a45c:	0800c25b 	.word	0x0800c25b
 800a460:	abcd330e 	.word	0xabcd330e
 800a464:	e66d1234 	.word	0xe66d1234
 800a468:	0005deec 	.word	0x0005deec
 800a46c:	5851f42d 	.word	0x5851f42d
 800a470:	4c957f2d 	.word	0x4c957f2d

0800a474 <std>:
 800a474:	2300      	movs	r3, #0
 800a476:	b510      	push	{r4, lr}
 800a478:	4604      	mov	r4, r0
 800a47a:	e9c0 3300 	strd	r3, r3, [r0]
 800a47e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a482:	6083      	str	r3, [r0, #8]
 800a484:	8181      	strh	r1, [r0, #12]
 800a486:	6643      	str	r3, [r0, #100]	@ 0x64
 800a488:	81c2      	strh	r2, [r0, #14]
 800a48a:	6183      	str	r3, [r0, #24]
 800a48c:	4619      	mov	r1, r3
 800a48e:	2208      	movs	r2, #8
 800a490:	305c      	adds	r0, #92	@ 0x5c
 800a492:	f000 f8b1 	bl	800a5f8 <memset>
 800a496:	4b0d      	ldr	r3, [pc, #52]	@ (800a4cc <std+0x58>)
 800a498:	6224      	str	r4, [r4, #32]
 800a49a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a49c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d0 <std+0x5c>)
 800a49e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d4 <std+0x60>)
 800a4a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d8 <std+0x64>)
 800a4a6:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a4dc <std+0x68>)
 800a4aa:	429c      	cmp	r4, r3
 800a4ac:	d006      	beq.n	800a4bc <std+0x48>
 800a4ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4b2:	4294      	cmp	r4, r2
 800a4b4:	d002      	beq.n	800a4bc <std+0x48>
 800a4b6:	33d0      	adds	r3, #208	@ 0xd0
 800a4b8:	429c      	cmp	r4, r3
 800a4ba:	d105      	bne.n	800a4c8 <std+0x54>
 800a4bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c4:	f000 b8da 	b.w	800a67c <__retarget_lock_init_recursive>
 800a4c8:	bd10      	pop	{r4, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0800a8bd 	.word	0x0800a8bd
 800a4d0:	0800a8df 	.word	0x0800a8df
 800a4d4:	0800a917 	.word	0x0800a917
 800a4d8:	0800a93b 	.word	0x0800a93b
 800a4dc:	20000208 	.word	0x20000208

0800a4e0 <stdio_exit_handler>:
 800a4e0:	4a02      	ldr	r2, [pc, #8]	@ (800a4ec <stdio_exit_handler+0xc>)
 800a4e2:	4903      	ldr	r1, [pc, #12]	@ (800a4f0 <stdio_exit_handler+0x10>)
 800a4e4:	4803      	ldr	r0, [pc, #12]	@ (800a4f4 <stdio_exit_handler+0x14>)
 800a4e6:	f000 b869 	b.w	800a5bc <_fwalk_sglue>
 800a4ea:	bf00      	nop
 800a4ec:	20000138 	.word	0x20000138
 800a4f0:	0800a86d 	.word	0x0800a86d
 800a4f4:	20000148 	.word	0x20000148

0800a4f8 <cleanup_stdio>:
 800a4f8:	6841      	ldr	r1, [r0, #4]
 800a4fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a52c <cleanup_stdio+0x34>)
 800a4fc:	b510      	push	{r4, lr}
 800a4fe:	4299      	cmp	r1, r3
 800a500:	4604      	mov	r4, r0
 800a502:	d001      	beq.n	800a508 <cleanup_stdio+0x10>
 800a504:	f000 f9b2 	bl	800a86c <_fflush_r>
 800a508:	68a1      	ldr	r1, [r4, #8]
 800a50a:	4b09      	ldr	r3, [pc, #36]	@ (800a530 <cleanup_stdio+0x38>)
 800a50c:	4299      	cmp	r1, r3
 800a50e:	d002      	beq.n	800a516 <cleanup_stdio+0x1e>
 800a510:	4620      	mov	r0, r4
 800a512:	f000 f9ab 	bl	800a86c <_fflush_r>
 800a516:	68e1      	ldr	r1, [r4, #12]
 800a518:	4b06      	ldr	r3, [pc, #24]	@ (800a534 <cleanup_stdio+0x3c>)
 800a51a:	4299      	cmp	r1, r3
 800a51c:	d004      	beq.n	800a528 <cleanup_stdio+0x30>
 800a51e:	4620      	mov	r0, r4
 800a520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a524:	f000 b9a2 	b.w	800a86c <_fflush_r>
 800a528:	bd10      	pop	{r4, pc}
 800a52a:	bf00      	nop
 800a52c:	20000208 	.word	0x20000208
 800a530:	20000270 	.word	0x20000270
 800a534:	200002d8 	.word	0x200002d8

0800a538 <global_stdio_init.part.0>:
 800a538:	b510      	push	{r4, lr}
 800a53a:	4b0b      	ldr	r3, [pc, #44]	@ (800a568 <global_stdio_init.part.0+0x30>)
 800a53c:	4c0b      	ldr	r4, [pc, #44]	@ (800a56c <global_stdio_init.part.0+0x34>)
 800a53e:	4a0c      	ldr	r2, [pc, #48]	@ (800a570 <global_stdio_init.part.0+0x38>)
 800a540:	4620      	mov	r0, r4
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	2104      	movs	r1, #4
 800a546:	2200      	movs	r2, #0
 800a548:	f7ff ff94 	bl	800a474 <std>
 800a54c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a550:	2201      	movs	r2, #1
 800a552:	2109      	movs	r1, #9
 800a554:	f7ff ff8e 	bl	800a474 <std>
 800a558:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a55c:	2202      	movs	r2, #2
 800a55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a562:	2112      	movs	r1, #18
 800a564:	f7ff bf86 	b.w	800a474 <std>
 800a568:	20000340 	.word	0x20000340
 800a56c:	20000208 	.word	0x20000208
 800a570:	0800a4e1 	.word	0x0800a4e1

0800a574 <__sfp_lock_acquire>:
 800a574:	4801      	ldr	r0, [pc, #4]	@ (800a57c <__sfp_lock_acquire+0x8>)
 800a576:	f000 b882 	b.w	800a67e <__retarget_lock_acquire_recursive>
 800a57a:	bf00      	nop
 800a57c:	20000345 	.word	0x20000345

0800a580 <__sfp_lock_release>:
 800a580:	4801      	ldr	r0, [pc, #4]	@ (800a588 <__sfp_lock_release+0x8>)
 800a582:	f000 b87d 	b.w	800a680 <__retarget_lock_release_recursive>
 800a586:	bf00      	nop
 800a588:	20000345 	.word	0x20000345

0800a58c <__sinit>:
 800a58c:	b510      	push	{r4, lr}
 800a58e:	4604      	mov	r4, r0
 800a590:	f7ff fff0 	bl	800a574 <__sfp_lock_acquire>
 800a594:	6a23      	ldr	r3, [r4, #32]
 800a596:	b11b      	cbz	r3, 800a5a0 <__sinit+0x14>
 800a598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a59c:	f7ff bff0 	b.w	800a580 <__sfp_lock_release>
 800a5a0:	4b04      	ldr	r3, [pc, #16]	@ (800a5b4 <__sinit+0x28>)
 800a5a2:	6223      	str	r3, [r4, #32]
 800a5a4:	4b04      	ldr	r3, [pc, #16]	@ (800a5b8 <__sinit+0x2c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1f5      	bne.n	800a598 <__sinit+0xc>
 800a5ac:	f7ff ffc4 	bl	800a538 <global_stdio_init.part.0>
 800a5b0:	e7f2      	b.n	800a598 <__sinit+0xc>
 800a5b2:	bf00      	nop
 800a5b4:	0800a4f9 	.word	0x0800a4f9
 800a5b8:	20000340 	.word	0x20000340

0800a5bc <_fwalk_sglue>:
 800a5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	4688      	mov	r8, r1
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	2600      	movs	r6, #0
 800a5c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5cc:	f1b9 0901 	subs.w	r9, r9, #1
 800a5d0:	d505      	bpl.n	800a5de <_fwalk_sglue+0x22>
 800a5d2:	6824      	ldr	r4, [r4, #0]
 800a5d4:	2c00      	cmp	r4, #0
 800a5d6:	d1f7      	bne.n	800a5c8 <_fwalk_sglue+0xc>
 800a5d8:	4630      	mov	r0, r6
 800a5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5de:	89ab      	ldrh	r3, [r5, #12]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d907      	bls.n	800a5f4 <_fwalk_sglue+0x38>
 800a5e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	d003      	beq.n	800a5f4 <_fwalk_sglue+0x38>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	47c0      	blx	r8
 800a5f2:	4306      	orrs	r6, r0
 800a5f4:	3568      	adds	r5, #104	@ 0x68
 800a5f6:	e7e9      	b.n	800a5cc <_fwalk_sglue+0x10>

0800a5f8 <memset>:
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	4402      	add	r2, r0
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d100      	bne.n	800a602 <memset+0xa>
 800a600:	4770      	bx	lr
 800a602:	f803 1b01 	strb.w	r1, [r3], #1
 800a606:	e7f9      	b.n	800a5fc <memset+0x4>

0800a608 <_sbrk_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	2300      	movs	r3, #0
 800a60c:	4d05      	ldr	r5, [pc, #20]	@ (800a624 <_sbrk_r+0x1c>)
 800a60e:	4604      	mov	r4, r0
 800a610:	4608      	mov	r0, r1
 800a612:	602b      	str	r3, [r5, #0]
 800a614:	f7fd ffae 	bl	8008574 <_sbrk>
 800a618:	1c43      	adds	r3, r0, #1
 800a61a:	d102      	bne.n	800a622 <_sbrk_r+0x1a>
 800a61c:	682b      	ldr	r3, [r5, #0]
 800a61e:	b103      	cbz	r3, 800a622 <_sbrk_r+0x1a>
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	bd38      	pop	{r3, r4, r5, pc}
 800a624:	20000348 	.word	0x20000348

0800a628 <__errno>:
 800a628:	4b01      	ldr	r3, [pc, #4]	@ (800a630 <__errno+0x8>)
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	4770      	bx	lr
 800a62e:	bf00      	nop
 800a630:	20000144 	.word	0x20000144

0800a634 <__libc_init_array>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	2600      	movs	r6, #0
 800a638:	4d0c      	ldr	r5, [pc, #48]	@ (800a66c <__libc_init_array+0x38>)
 800a63a:	4c0d      	ldr	r4, [pc, #52]	@ (800a670 <__libc_init_array+0x3c>)
 800a63c:	1b64      	subs	r4, r4, r5
 800a63e:	10a4      	asrs	r4, r4, #2
 800a640:	42a6      	cmp	r6, r4
 800a642:	d109      	bne.n	800a658 <__libc_init_array+0x24>
 800a644:	f000 fe18 	bl	800b278 <_init>
 800a648:	2600      	movs	r6, #0
 800a64a:	4d0a      	ldr	r5, [pc, #40]	@ (800a674 <__libc_init_array+0x40>)
 800a64c:	4c0a      	ldr	r4, [pc, #40]	@ (800a678 <__libc_init_array+0x44>)
 800a64e:	1b64      	subs	r4, r4, r5
 800a650:	10a4      	asrs	r4, r4, #2
 800a652:	42a6      	cmp	r6, r4
 800a654:	d105      	bne.n	800a662 <__libc_init_array+0x2e>
 800a656:	bd70      	pop	{r4, r5, r6, pc}
 800a658:	f855 3b04 	ldr.w	r3, [r5], #4
 800a65c:	4798      	blx	r3
 800a65e:	3601      	adds	r6, #1
 800a660:	e7ee      	b.n	800a640 <__libc_init_array+0xc>
 800a662:	f855 3b04 	ldr.w	r3, [r5], #4
 800a666:	4798      	blx	r3
 800a668:	3601      	adds	r6, #1
 800a66a:	e7f2      	b.n	800a652 <__libc_init_array+0x1e>
 800a66c:	0800c32c 	.word	0x0800c32c
 800a670:	0800c32c 	.word	0x0800c32c
 800a674:	0800c32c 	.word	0x0800c32c
 800a678:	0800c330 	.word	0x0800c330

0800a67c <__retarget_lock_init_recursive>:
 800a67c:	4770      	bx	lr

0800a67e <__retarget_lock_acquire_recursive>:
 800a67e:	4770      	bx	lr

0800a680 <__retarget_lock_release_recursive>:
 800a680:	4770      	bx	lr

0800a682 <memcpy>:
 800a682:	440a      	add	r2, r1
 800a684:	4291      	cmp	r1, r2
 800a686:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a68a:	d100      	bne.n	800a68e <memcpy+0xc>
 800a68c:	4770      	bx	lr
 800a68e:	b510      	push	{r4, lr}
 800a690:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a694:	4291      	cmp	r1, r2
 800a696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a69a:	d1f9      	bne.n	800a690 <memcpy+0xe>
 800a69c:	bd10      	pop	{r4, pc}
	...

0800a6a0 <__assert_func>:
 800a6a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6a2:	4614      	mov	r4, r2
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4b09      	ldr	r3, [pc, #36]	@ (800a6cc <__assert_func+0x2c>)
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68d8      	ldr	r0, [r3, #12]
 800a6ae:	b954      	cbnz	r4, 800a6c6 <__assert_func+0x26>
 800a6b0:	4b07      	ldr	r3, [pc, #28]	@ (800a6d0 <__assert_func+0x30>)
 800a6b2:	461c      	mov	r4, r3
 800a6b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6b8:	9100      	str	r1, [sp, #0]
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	4905      	ldr	r1, [pc, #20]	@ (800a6d4 <__assert_func+0x34>)
 800a6be:	f000 f941 	bl	800a944 <fiprintf>
 800a6c2:	f000 f997 	bl	800a9f4 <abort>
 800a6c6:	4b04      	ldr	r3, [pc, #16]	@ (800a6d8 <__assert_func+0x38>)
 800a6c8:	e7f4      	b.n	800a6b4 <__assert_func+0x14>
 800a6ca:	bf00      	nop
 800a6cc:	20000144 	.word	0x20000144
 800a6d0:	0800c2ee 	.word	0x0800c2ee
 800a6d4:	0800c2c0 	.word	0x0800c2c0
 800a6d8:	0800c2b3 	.word	0x0800c2b3

0800a6dc <_free_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4605      	mov	r5, r0
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	d040      	beq.n	800a766 <_free_r+0x8a>
 800a6e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e8:	1f0c      	subs	r4, r1, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	bfb8      	it	lt
 800a6ee:	18e4      	addlt	r4, r4, r3
 800a6f0:	f7ff fe76 	bl	800a3e0 <__malloc_lock>
 800a6f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a768 <_free_r+0x8c>)
 800a6f6:	6813      	ldr	r3, [r2, #0]
 800a6f8:	b933      	cbnz	r3, 800a708 <_free_r+0x2c>
 800a6fa:	6063      	str	r3, [r4, #4]
 800a6fc:	6014      	str	r4, [r2, #0]
 800a6fe:	4628      	mov	r0, r5
 800a700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a704:	f7ff be72 	b.w	800a3ec <__malloc_unlock>
 800a708:	42a3      	cmp	r3, r4
 800a70a:	d908      	bls.n	800a71e <_free_r+0x42>
 800a70c:	6820      	ldr	r0, [r4, #0]
 800a70e:	1821      	adds	r1, r4, r0
 800a710:	428b      	cmp	r3, r1
 800a712:	bf01      	itttt	eq
 800a714:	6819      	ldreq	r1, [r3, #0]
 800a716:	685b      	ldreq	r3, [r3, #4]
 800a718:	1809      	addeq	r1, r1, r0
 800a71a:	6021      	streq	r1, [r4, #0]
 800a71c:	e7ed      	b.n	800a6fa <_free_r+0x1e>
 800a71e:	461a      	mov	r2, r3
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	b10b      	cbz	r3, 800a728 <_free_r+0x4c>
 800a724:	42a3      	cmp	r3, r4
 800a726:	d9fa      	bls.n	800a71e <_free_r+0x42>
 800a728:	6811      	ldr	r1, [r2, #0]
 800a72a:	1850      	adds	r0, r2, r1
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d10b      	bne.n	800a748 <_free_r+0x6c>
 800a730:	6820      	ldr	r0, [r4, #0]
 800a732:	4401      	add	r1, r0
 800a734:	1850      	adds	r0, r2, r1
 800a736:	4283      	cmp	r3, r0
 800a738:	6011      	str	r1, [r2, #0]
 800a73a:	d1e0      	bne.n	800a6fe <_free_r+0x22>
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	4408      	add	r0, r1
 800a742:	6010      	str	r0, [r2, #0]
 800a744:	6053      	str	r3, [r2, #4]
 800a746:	e7da      	b.n	800a6fe <_free_r+0x22>
 800a748:	d902      	bls.n	800a750 <_free_r+0x74>
 800a74a:	230c      	movs	r3, #12
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	e7d6      	b.n	800a6fe <_free_r+0x22>
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	1821      	adds	r1, r4, r0
 800a754:	428b      	cmp	r3, r1
 800a756:	bf01      	itttt	eq
 800a758:	6819      	ldreq	r1, [r3, #0]
 800a75a:	685b      	ldreq	r3, [r3, #4]
 800a75c:	1809      	addeq	r1, r1, r0
 800a75e:	6021      	streq	r1, [r4, #0]
 800a760:	6063      	str	r3, [r4, #4]
 800a762:	6054      	str	r4, [r2, #4]
 800a764:	e7cb      	b.n	800a6fe <_free_r+0x22>
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	20000204 	.word	0x20000204

0800a76c <__sflush_r>:
 800a76c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a772:	0716      	lsls	r6, r2, #28
 800a774:	4605      	mov	r5, r0
 800a776:	460c      	mov	r4, r1
 800a778:	d454      	bmi.n	800a824 <__sflush_r+0xb8>
 800a77a:	684b      	ldr	r3, [r1, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dc02      	bgt.n	800a786 <__sflush_r+0x1a>
 800a780:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a782:	2b00      	cmp	r3, #0
 800a784:	dd48      	ble.n	800a818 <__sflush_r+0xac>
 800a786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a788:	2e00      	cmp	r6, #0
 800a78a:	d045      	beq.n	800a818 <__sflush_r+0xac>
 800a78c:	2300      	movs	r3, #0
 800a78e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a792:	682f      	ldr	r7, [r5, #0]
 800a794:	6a21      	ldr	r1, [r4, #32]
 800a796:	602b      	str	r3, [r5, #0]
 800a798:	d030      	beq.n	800a7fc <__sflush_r+0x90>
 800a79a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	0759      	lsls	r1, r3, #29
 800a7a0:	d505      	bpl.n	800a7ae <__sflush_r+0x42>
 800a7a2:	6863      	ldr	r3, [r4, #4]
 800a7a4:	1ad2      	subs	r2, r2, r3
 800a7a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7a8:	b10b      	cbz	r3, 800a7ae <__sflush_r+0x42>
 800a7aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7ac:	1ad2      	subs	r2, r2, r3
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7b4:	6a21      	ldr	r1, [r4, #32]
 800a7b6:	47b0      	blx	r6
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	d106      	bne.n	800a7cc <__sflush_r+0x60>
 800a7be:	6829      	ldr	r1, [r5, #0]
 800a7c0:	291d      	cmp	r1, #29
 800a7c2:	d82b      	bhi.n	800a81c <__sflush_r+0xb0>
 800a7c4:	4a28      	ldr	r2, [pc, #160]	@ (800a868 <__sflush_r+0xfc>)
 800a7c6:	410a      	asrs	r2, r1
 800a7c8:	07d6      	lsls	r6, r2, #31
 800a7ca:	d427      	bmi.n	800a81c <__sflush_r+0xb0>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	6062      	str	r2, [r4, #4]
 800a7d0:	6922      	ldr	r2, [r4, #16]
 800a7d2:	04d9      	lsls	r1, r3, #19
 800a7d4:	6022      	str	r2, [r4, #0]
 800a7d6:	d504      	bpl.n	800a7e2 <__sflush_r+0x76>
 800a7d8:	1c42      	adds	r2, r0, #1
 800a7da:	d101      	bne.n	800a7e0 <__sflush_r+0x74>
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	b903      	cbnz	r3, 800a7e2 <__sflush_r+0x76>
 800a7e0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7e4:	602f      	str	r7, [r5, #0]
 800a7e6:	b1b9      	cbz	r1, 800a818 <__sflush_r+0xac>
 800a7e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7ec:	4299      	cmp	r1, r3
 800a7ee:	d002      	beq.n	800a7f6 <__sflush_r+0x8a>
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f7ff ff73 	bl	800a6dc <_free_r>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7fa:	e00d      	b.n	800a818 <__sflush_r+0xac>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b0      	blx	r6
 800a802:	4602      	mov	r2, r0
 800a804:	1c50      	adds	r0, r2, #1
 800a806:	d1c9      	bne.n	800a79c <__sflush_r+0x30>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0c6      	beq.n	800a79c <__sflush_r+0x30>
 800a80e:	2b1d      	cmp	r3, #29
 800a810:	d001      	beq.n	800a816 <__sflush_r+0xaa>
 800a812:	2b16      	cmp	r3, #22
 800a814:	d11d      	bne.n	800a852 <__sflush_r+0xe6>
 800a816:	602f      	str	r7, [r5, #0]
 800a818:	2000      	movs	r0, #0
 800a81a:	e021      	b.n	800a860 <__sflush_r+0xf4>
 800a81c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a820:	b21b      	sxth	r3, r3
 800a822:	e01a      	b.n	800a85a <__sflush_r+0xee>
 800a824:	690f      	ldr	r7, [r1, #16]
 800a826:	2f00      	cmp	r7, #0
 800a828:	d0f6      	beq.n	800a818 <__sflush_r+0xac>
 800a82a:	0793      	lsls	r3, r2, #30
 800a82c:	bf18      	it	ne
 800a82e:	2300      	movne	r3, #0
 800a830:	680e      	ldr	r6, [r1, #0]
 800a832:	bf08      	it	eq
 800a834:	694b      	ldreq	r3, [r1, #20]
 800a836:	1bf6      	subs	r6, r6, r7
 800a838:	600f      	str	r7, [r1, #0]
 800a83a:	608b      	str	r3, [r1, #8]
 800a83c:	2e00      	cmp	r6, #0
 800a83e:	ddeb      	ble.n	800a818 <__sflush_r+0xac>
 800a840:	4633      	mov	r3, r6
 800a842:	463a      	mov	r2, r7
 800a844:	4628      	mov	r0, r5
 800a846:	6a21      	ldr	r1, [r4, #32]
 800a848:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a84c:	47e0      	blx	ip
 800a84e:	2800      	cmp	r0, #0
 800a850:	dc07      	bgt.n	800a862 <__sflush_r+0xf6>
 800a852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a85a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a85e:	81a3      	strh	r3, [r4, #12]
 800a860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a862:	4407      	add	r7, r0
 800a864:	1a36      	subs	r6, r6, r0
 800a866:	e7e9      	b.n	800a83c <__sflush_r+0xd0>
 800a868:	dfbffffe 	.word	0xdfbffffe

0800a86c <_fflush_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	690b      	ldr	r3, [r1, #16]
 800a870:	4605      	mov	r5, r0
 800a872:	460c      	mov	r4, r1
 800a874:	b913      	cbnz	r3, 800a87c <_fflush_r+0x10>
 800a876:	2500      	movs	r5, #0
 800a878:	4628      	mov	r0, r5
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	b118      	cbz	r0, 800a886 <_fflush_r+0x1a>
 800a87e:	6a03      	ldr	r3, [r0, #32]
 800a880:	b90b      	cbnz	r3, 800a886 <_fflush_r+0x1a>
 800a882:	f7ff fe83 	bl	800a58c <__sinit>
 800a886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d0f3      	beq.n	800a876 <_fflush_r+0xa>
 800a88e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a890:	07d0      	lsls	r0, r2, #31
 800a892:	d404      	bmi.n	800a89e <_fflush_r+0x32>
 800a894:	0599      	lsls	r1, r3, #22
 800a896:	d402      	bmi.n	800a89e <_fflush_r+0x32>
 800a898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a89a:	f7ff fef0 	bl	800a67e <__retarget_lock_acquire_recursive>
 800a89e:	4628      	mov	r0, r5
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	f7ff ff63 	bl	800a76c <__sflush_r>
 800a8a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	07da      	lsls	r2, r3, #31
 800a8ac:	d4e4      	bmi.n	800a878 <_fflush_r+0xc>
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	059b      	lsls	r3, r3, #22
 800a8b2:	d4e1      	bmi.n	800a878 <_fflush_r+0xc>
 800a8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8b6:	f7ff fee3 	bl	800a680 <__retarget_lock_release_recursive>
 800a8ba:	e7dd      	b.n	800a878 <_fflush_r+0xc>

0800a8bc <__sread>:
 800a8bc:	b510      	push	{r4, lr}
 800a8be:	460c      	mov	r4, r1
 800a8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c4:	f000 f872 	bl	800a9ac <_read_r>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	bfab      	itete	ge
 800a8cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d0:	181b      	addge	r3, r3, r0
 800a8d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8d6:	bfac      	ite	ge
 800a8d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8da:	81a3      	strhlt	r3, [r4, #12]
 800a8dc:	bd10      	pop	{r4, pc}

0800a8de <__swrite>:
 800a8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e2:	461f      	mov	r7, r3
 800a8e4:	898b      	ldrh	r3, [r1, #12]
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	05db      	lsls	r3, r3, #23
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	d505      	bpl.n	800a8fc <__swrite+0x1e>
 800a8f0:	2302      	movs	r3, #2
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f8:	f000 f846 	bl	800a988 <_lseek_r>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	4632      	mov	r2, r6
 800a900:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	4628      	mov	r0, r5
 800a908:	463b      	mov	r3, r7
 800a90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a90e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a912:	f000 b85d 	b.w	800a9d0 <_write_r>

0800a916 <__sseek>:
 800a916:	b510      	push	{r4, lr}
 800a918:	460c      	mov	r4, r1
 800a91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91e:	f000 f833 	bl	800a988 <_lseek_r>
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	bf15      	itete	ne
 800a928:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a92a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a92e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a932:	81a3      	strheq	r3, [r4, #12]
 800a934:	bf18      	it	ne
 800a936:	81a3      	strhne	r3, [r4, #12]
 800a938:	bd10      	pop	{r4, pc}

0800a93a <__sclose>:
 800a93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93e:	f000 b813 	b.w	800a968 <_close_r>
	...

0800a944 <fiprintf>:
 800a944:	b40e      	push	{r1, r2, r3}
 800a946:	b503      	push	{r0, r1, lr}
 800a948:	4601      	mov	r1, r0
 800a94a:	ab03      	add	r3, sp, #12
 800a94c:	4805      	ldr	r0, [pc, #20]	@ (800a964 <fiprintf+0x20>)
 800a94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a952:	6800      	ldr	r0, [r0, #0]
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	f000 f87b 	bl	800aa50 <_vfiprintf_r>
 800a95a:	b002      	add	sp, #8
 800a95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a960:	b003      	add	sp, #12
 800a962:	4770      	bx	lr
 800a964:	20000144 	.word	0x20000144

0800a968 <_close_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	2300      	movs	r3, #0
 800a96c:	4d05      	ldr	r5, [pc, #20]	@ (800a984 <_close_r+0x1c>)
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	f7fd fdcd 	bl	8008512 <_close>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_close_r+0x1a>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_close_r+0x1a>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20000348 	.word	0x20000348

0800a988 <_lseek_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4604      	mov	r4, r0
 800a98c:	4608      	mov	r0, r1
 800a98e:	4611      	mov	r1, r2
 800a990:	2200      	movs	r2, #0
 800a992:	4d05      	ldr	r5, [pc, #20]	@ (800a9a8 <_lseek_r+0x20>)
 800a994:	602a      	str	r2, [r5, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	f7fd fddf 	bl	800855a <_lseek>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_lseek_r+0x1e>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_lseek_r+0x1e>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	20000348 	.word	0x20000348

0800a9ac <_read_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	4611      	mov	r1, r2
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	4d05      	ldr	r5, [pc, #20]	@ (800a9cc <_read_r+0x20>)
 800a9b8:	602a      	str	r2, [r5, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f7fd fd70 	bl	80084a0 <_read>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_read_r+0x1e>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_read_r+0x1e>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	20000348 	.word	0x20000348

0800a9d0 <_write_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	4608      	mov	r0, r1
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4d05      	ldr	r5, [pc, #20]	@ (800a9f0 <_write_r+0x20>)
 800a9dc:	602a      	str	r2, [r5, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	f7fd fd7b 	bl	80084da <_write>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_write_r+0x1e>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_write_r+0x1e>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	20000348 	.word	0x20000348

0800a9f4 <abort>:
 800a9f4:	2006      	movs	r0, #6
 800a9f6:	b508      	push	{r3, lr}
 800a9f8:	f000 fc14 	bl	800b224 <raise>
 800a9fc:	2001      	movs	r0, #1
 800a9fe:	f7fd fd44 	bl	800848a <_exit>

0800aa02 <__sfputc_r>:
 800aa02:	6893      	ldr	r3, [r2, #8]
 800aa04:	b410      	push	{r4}
 800aa06:	3b01      	subs	r3, #1
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	6093      	str	r3, [r2, #8]
 800aa0c:	da07      	bge.n	800aa1e <__sfputc_r+0x1c>
 800aa0e:	6994      	ldr	r4, [r2, #24]
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	db01      	blt.n	800aa18 <__sfputc_r+0x16>
 800aa14:	290a      	cmp	r1, #10
 800aa16:	d102      	bne.n	800aa1e <__sfputc_r+0x1c>
 800aa18:	bc10      	pop	{r4}
 800aa1a:	f000 bac3 	b.w	800afa4 <__swbuf_r>
 800aa1e:	6813      	ldr	r3, [r2, #0]
 800aa20:	1c58      	adds	r0, r3, #1
 800aa22:	6010      	str	r0, [r2, #0]
 800aa24:	7019      	strb	r1, [r3, #0]
 800aa26:	4608      	mov	r0, r1
 800aa28:	bc10      	pop	{r4}
 800aa2a:	4770      	bx	lr

0800aa2c <__sfputs_r>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	4606      	mov	r6, r0
 800aa30:	460f      	mov	r7, r1
 800aa32:	4614      	mov	r4, r2
 800aa34:	18d5      	adds	r5, r2, r3
 800aa36:	42ac      	cmp	r4, r5
 800aa38:	d101      	bne.n	800aa3e <__sfputs_r+0x12>
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	e007      	b.n	800aa4e <__sfputs_r+0x22>
 800aa3e:	463a      	mov	r2, r7
 800aa40:	4630      	mov	r0, r6
 800aa42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa46:	f7ff ffdc 	bl	800aa02 <__sfputc_r>
 800aa4a:	1c43      	adds	r3, r0, #1
 800aa4c:	d1f3      	bne.n	800aa36 <__sfputs_r+0xa>
 800aa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa50 <_vfiprintf_r>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	460d      	mov	r5, r1
 800aa56:	4614      	mov	r4, r2
 800aa58:	4698      	mov	r8, r3
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	b09d      	sub	sp, #116	@ 0x74
 800aa5e:	b118      	cbz	r0, 800aa68 <_vfiprintf_r+0x18>
 800aa60:	6a03      	ldr	r3, [r0, #32]
 800aa62:	b90b      	cbnz	r3, 800aa68 <_vfiprintf_r+0x18>
 800aa64:	f7ff fd92 	bl	800a58c <__sinit>
 800aa68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa6a:	07d9      	lsls	r1, r3, #31
 800aa6c:	d405      	bmi.n	800aa7a <_vfiprintf_r+0x2a>
 800aa6e:	89ab      	ldrh	r3, [r5, #12]
 800aa70:	059a      	lsls	r2, r3, #22
 800aa72:	d402      	bmi.n	800aa7a <_vfiprintf_r+0x2a>
 800aa74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa76:	f7ff fe02 	bl	800a67e <__retarget_lock_acquire_recursive>
 800aa7a:	89ab      	ldrh	r3, [r5, #12]
 800aa7c:	071b      	lsls	r3, r3, #28
 800aa7e:	d501      	bpl.n	800aa84 <_vfiprintf_r+0x34>
 800aa80:	692b      	ldr	r3, [r5, #16]
 800aa82:	b99b      	cbnz	r3, 800aaac <_vfiprintf_r+0x5c>
 800aa84:	4629      	mov	r1, r5
 800aa86:	4630      	mov	r0, r6
 800aa88:	f000 faca 	bl	800b020 <__swsetup_r>
 800aa8c:	b170      	cbz	r0, 800aaac <_vfiprintf_r+0x5c>
 800aa8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa90:	07dc      	lsls	r4, r3, #31
 800aa92:	d504      	bpl.n	800aa9e <_vfiprintf_r+0x4e>
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa98:	b01d      	add	sp, #116	@ 0x74
 800aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9e:	89ab      	ldrh	r3, [r5, #12]
 800aaa0:	0598      	lsls	r0, r3, #22
 800aaa2:	d4f7      	bmi.n	800aa94 <_vfiprintf_r+0x44>
 800aaa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaa6:	f7ff fdeb 	bl	800a680 <__retarget_lock_release_recursive>
 800aaaa:	e7f3      	b.n	800aa94 <_vfiprintf_r+0x44>
 800aaac:	2300      	movs	r3, #0
 800aaae:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab0:	2320      	movs	r3, #32
 800aab2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aab6:	2330      	movs	r3, #48	@ 0x30
 800aab8:	f04f 0901 	mov.w	r9, #1
 800aabc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aac0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ac6c <_vfiprintf_r+0x21c>
 800aac4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aac8:	4623      	mov	r3, r4
 800aaca:	469a      	mov	sl, r3
 800aacc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aad0:	b10a      	cbz	r2, 800aad6 <_vfiprintf_r+0x86>
 800aad2:	2a25      	cmp	r2, #37	@ 0x25
 800aad4:	d1f9      	bne.n	800aaca <_vfiprintf_r+0x7a>
 800aad6:	ebba 0b04 	subs.w	fp, sl, r4
 800aada:	d00b      	beq.n	800aaf4 <_vfiprintf_r+0xa4>
 800aadc:	465b      	mov	r3, fp
 800aade:	4622      	mov	r2, r4
 800aae0:	4629      	mov	r1, r5
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff ffa2 	bl	800aa2c <__sfputs_r>
 800aae8:	3001      	adds	r0, #1
 800aaea:	f000 80a7 	beq.w	800ac3c <_vfiprintf_r+0x1ec>
 800aaee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaf0:	445a      	add	r2, fp
 800aaf2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aaf4:	f89a 3000 	ldrb.w	r3, [sl]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 809f 	beq.w	800ac3c <_vfiprintf_r+0x1ec>
 800aafe:	2300      	movs	r3, #0
 800ab00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab08:	f10a 0a01 	add.w	sl, sl, #1
 800ab0c:	9304      	str	r3, [sp, #16]
 800ab0e:	9307      	str	r3, [sp, #28]
 800ab10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab14:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab16:	4654      	mov	r4, sl
 800ab18:	2205      	movs	r2, #5
 800ab1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab1e:	4853      	ldr	r0, [pc, #332]	@ (800ac6c <_vfiprintf_r+0x21c>)
 800ab20:	f000 fb9c 	bl	800b25c <memchr>
 800ab24:	9a04      	ldr	r2, [sp, #16]
 800ab26:	b9d8      	cbnz	r0, 800ab60 <_vfiprintf_r+0x110>
 800ab28:	06d1      	lsls	r1, r2, #27
 800ab2a:	bf44      	itt	mi
 800ab2c:	2320      	movmi	r3, #32
 800ab2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab32:	0713      	lsls	r3, r2, #28
 800ab34:	bf44      	itt	mi
 800ab36:	232b      	movmi	r3, #43	@ 0x2b
 800ab38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab42:	d015      	beq.n	800ab70 <_vfiprintf_r+0x120>
 800ab44:	4654      	mov	r4, sl
 800ab46:	2000      	movs	r0, #0
 800ab48:	f04f 0c0a 	mov.w	ip, #10
 800ab4c:	9a07      	ldr	r2, [sp, #28]
 800ab4e:	4621      	mov	r1, r4
 800ab50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab54:	3b30      	subs	r3, #48	@ 0x30
 800ab56:	2b09      	cmp	r3, #9
 800ab58:	d94b      	bls.n	800abf2 <_vfiprintf_r+0x1a2>
 800ab5a:	b1b0      	cbz	r0, 800ab8a <_vfiprintf_r+0x13a>
 800ab5c:	9207      	str	r2, [sp, #28]
 800ab5e:	e014      	b.n	800ab8a <_vfiprintf_r+0x13a>
 800ab60:	eba0 0308 	sub.w	r3, r0, r8
 800ab64:	fa09 f303 	lsl.w	r3, r9, r3
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	46a2      	mov	sl, r4
 800ab6c:	9304      	str	r3, [sp, #16]
 800ab6e:	e7d2      	b.n	800ab16 <_vfiprintf_r+0xc6>
 800ab70:	9b03      	ldr	r3, [sp, #12]
 800ab72:	1d19      	adds	r1, r3, #4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	9103      	str	r1, [sp, #12]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	bfbb      	ittet	lt
 800ab7c:	425b      	neglt	r3, r3
 800ab7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab82:	9307      	strge	r3, [sp, #28]
 800ab84:	9307      	strlt	r3, [sp, #28]
 800ab86:	bfb8      	it	lt
 800ab88:	9204      	strlt	r2, [sp, #16]
 800ab8a:	7823      	ldrb	r3, [r4, #0]
 800ab8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab8e:	d10a      	bne.n	800aba6 <_vfiprintf_r+0x156>
 800ab90:	7863      	ldrb	r3, [r4, #1]
 800ab92:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab94:	d132      	bne.n	800abfc <_vfiprintf_r+0x1ac>
 800ab96:	9b03      	ldr	r3, [sp, #12]
 800ab98:	3402      	adds	r4, #2
 800ab9a:	1d1a      	adds	r2, r3, #4
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	9203      	str	r2, [sp, #12]
 800aba0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aba4:	9305      	str	r3, [sp, #20]
 800aba6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ac70 <_vfiprintf_r+0x220>
 800abaa:	2203      	movs	r2, #3
 800abac:	4650      	mov	r0, sl
 800abae:	7821      	ldrb	r1, [r4, #0]
 800abb0:	f000 fb54 	bl	800b25c <memchr>
 800abb4:	b138      	cbz	r0, 800abc6 <_vfiprintf_r+0x176>
 800abb6:	2240      	movs	r2, #64	@ 0x40
 800abb8:	9b04      	ldr	r3, [sp, #16]
 800abba:	eba0 000a 	sub.w	r0, r0, sl
 800abbe:	4082      	lsls	r2, r0
 800abc0:	4313      	orrs	r3, r2
 800abc2:	3401      	adds	r4, #1
 800abc4:	9304      	str	r3, [sp, #16]
 800abc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abca:	2206      	movs	r2, #6
 800abcc:	4829      	ldr	r0, [pc, #164]	@ (800ac74 <_vfiprintf_r+0x224>)
 800abce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abd2:	f000 fb43 	bl	800b25c <memchr>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d03f      	beq.n	800ac5a <_vfiprintf_r+0x20a>
 800abda:	4b27      	ldr	r3, [pc, #156]	@ (800ac78 <_vfiprintf_r+0x228>)
 800abdc:	bb1b      	cbnz	r3, 800ac26 <_vfiprintf_r+0x1d6>
 800abde:	9b03      	ldr	r3, [sp, #12]
 800abe0:	3307      	adds	r3, #7
 800abe2:	f023 0307 	bic.w	r3, r3, #7
 800abe6:	3308      	adds	r3, #8
 800abe8:	9303      	str	r3, [sp, #12]
 800abea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abec:	443b      	add	r3, r7
 800abee:	9309      	str	r3, [sp, #36]	@ 0x24
 800abf0:	e76a      	b.n	800aac8 <_vfiprintf_r+0x78>
 800abf2:	460c      	mov	r4, r1
 800abf4:	2001      	movs	r0, #1
 800abf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800abfa:	e7a8      	b.n	800ab4e <_vfiprintf_r+0xfe>
 800abfc:	2300      	movs	r3, #0
 800abfe:	f04f 0c0a 	mov.w	ip, #10
 800ac02:	4619      	mov	r1, r3
 800ac04:	3401      	adds	r4, #1
 800ac06:	9305      	str	r3, [sp, #20]
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac0e:	3a30      	subs	r2, #48	@ 0x30
 800ac10:	2a09      	cmp	r2, #9
 800ac12:	d903      	bls.n	800ac1c <_vfiprintf_r+0x1cc>
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d0c6      	beq.n	800aba6 <_vfiprintf_r+0x156>
 800ac18:	9105      	str	r1, [sp, #20]
 800ac1a:	e7c4      	b.n	800aba6 <_vfiprintf_r+0x156>
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	2301      	movs	r3, #1
 800ac20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac24:	e7f0      	b.n	800ac08 <_vfiprintf_r+0x1b8>
 800ac26:	ab03      	add	r3, sp, #12
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	462a      	mov	r2, r5
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	4b13      	ldr	r3, [pc, #76]	@ (800ac7c <_vfiprintf_r+0x22c>)
 800ac30:	a904      	add	r1, sp, #16
 800ac32:	f3af 8000 	nop.w
 800ac36:	4607      	mov	r7, r0
 800ac38:	1c78      	adds	r0, r7, #1
 800ac3a:	d1d6      	bne.n	800abea <_vfiprintf_r+0x19a>
 800ac3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac3e:	07d9      	lsls	r1, r3, #31
 800ac40:	d405      	bmi.n	800ac4e <_vfiprintf_r+0x1fe>
 800ac42:	89ab      	ldrh	r3, [r5, #12]
 800ac44:	059a      	lsls	r2, r3, #22
 800ac46:	d402      	bmi.n	800ac4e <_vfiprintf_r+0x1fe>
 800ac48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac4a:	f7ff fd19 	bl	800a680 <__retarget_lock_release_recursive>
 800ac4e:	89ab      	ldrh	r3, [r5, #12]
 800ac50:	065b      	lsls	r3, r3, #25
 800ac52:	f53f af1f 	bmi.w	800aa94 <_vfiprintf_r+0x44>
 800ac56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac58:	e71e      	b.n	800aa98 <_vfiprintf_r+0x48>
 800ac5a:	ab03      	add	r3, sp, #12
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	462a      	mov	r2, r5
 800ac60:	4630      	mov	r0, r6
 800ac62:	4b06      	ldr	r3, [pc, #24]	@ (800ac7c <_vfiprintf_r+0x22c>)
 800ac64:	a904      	add	r1, sp, #16
 800ac66:	f000 f87d 	bl	800ad64 <_printf_i>
 800ac6a:	e7e4      	b.n	800ac36 <_vfiprintf_r+0x1e6>
 800ac6c:	0800c2ef 	.word	0x0800c2ef
 800ac70:	0800c2f5 	.word	0x0800c2f5
 800ac74:	0800c2f9 	.word	0x0800c2f9
 800ac78:	00000000 	.word	0x00000000
 800ac7c:	0800aa2d 	.word	0x0800aa2d

0800ac80 <_printf_common>:
 800ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	4616      	mov	r6, r2
 800ac86:	4698      	mov	r8, r3
 800ac88:	688a      	ldr	r2, [r1, #8]
 800ac8a:	690b      	ldr	r3, [r1, #16]
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	bfb8      	it	lt
 800ac92:	4613      	movlt	r3, r2
 800ac94:	6033      	str	r3, [r6, #0]
 800ac96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aca0:	b10a      	cbz	r2, 800aca6 <_printf_common+0x26>
 800aca2:	3301      	adds	r3, #1
 800aca4:	6033      	str	r3, [r6, #0]
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	0699      	lsls	r1, r3, #26
 800acaa:	bf42      	ittt	mi
 800acac:	6833      	ldrmi	r3, [r6, #0]
 800acae:	3302      	addmi	r3, #2
 800acb0:	6033      	strmi	r3, [r6, #0]
 800acb2:	6825      	ldr	r5, [r4, #0]
 800acb4:	f015 0506 	ands.w	r5, r5, #6
 800acb8:	d106      	bne.n	800acc8 <_printf_common+0x48>
 800acba:	f104 0a19 	add.w	sl, r4, #25
 800acbe:	68e3      	ldr	r3, [r4, #12]
 800acc0:	6832      	ldr	r2, [r6, #0]
 800acc2:	1a9b      	subs	r3, r3, r2
 800acc4:	42ab      	cmp	r3, r5
 800acc6:	dc2b      	bgt.n	800ad20 <_printf_common+0xa0>
 800acc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800accc:	6822      	ldr	r2, [r4, #0]
 800acce:	3b00      	subs	r3, #0
 800acd0:	bf18      	it	ne
 800acd2:	2301      	movne	r3, #1
 800acd4:	0692      	lsls	r2, r2, #26
 800acd6:	d430      	bmi.n	800ad3a <_printf_common+0xba>
 800acd8:	4641      	mov	r1, r8
 800acda:	4638      	mov	r0, r7
 800acdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ace0:	47c8      	blx	r9
 800ace2:	3001      	adds	r0, #1
 800ace4:	d023      	beq.n	800ad2e <_printf_common+0xae>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	6922      	ldr	r2, [r4, #16]
 800acea:	f003 0306 	and.w	r3, r3, #6
 800acee:	2b04      	cmp	r3, #4
 800acf0:	bf14      	ite	ne
 800acf2:	2500      	movne	r5, #0
 800acf4:	6833      	ldreq	r3, [r6, #0]
 800acf6:	f04f 0600 	mov.w	r6, #0
 800acfa:	bf08      	it	eq
 800acfc:	68e5      	ldreq	r5, [r4, #12]
 800acfe:	f104 041a 	add.w	r4, r4, #26
 800ad02:	bf08      	it	eq
 800ad04:	1aed      	subeq	r5, r5, r3
 800ad06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ad0a:	bf08      	it	eq
 800ad0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad10:	4293      	cmp	r3, r2
 800ad12:	bfc4      	itt	gt
 800ad14:	1a9b      	subgt	r3, r3, r2
 800ad16:	18ed      	addgt	r5, r5, r3
 800ad18:	42b5      	cmp	r5, r6
 800ad1a:	d11a      	bne.n	800ad52 <_printf_common+0xd2>
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e008      	b.n	800ad32 <_printf_common+0xb2>
 800ad20:	2301      	movs	r3, #1
 800ad22:	4652      	mov	r2, sl
 800ad24:	4641      	mov	r1, r8
 800ad26:	4638      	mov	r0, r7
 800ad28:	47c8      	blx	r9
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d103      	bne.n	800ad36 <_printf_common+0xb6>
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad36:	3501      	adds	r5, #1
 800ad38:	e7c1      	b.n	800acbe <_printf_common+0x3e>
 800ad3a:	2030      	movs	r0, #48	@ 0x30
 800ad3c:	18e1      	adds	r1, r4, r3
 800ad3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad42:	1c5a      	adds	r2, r3, #1
 800ad44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad48:	4422      	add	r2, r4
 800ad4a:	3302      	adds	r3, #2
 800ad4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad50:	e7c2      	b.n	800acd8 <_printf_common+0x58>
 800ad52:	2301      	movs	r3, #1
 800ad54:	4622      	mov	r2, r4
 800ad56:	4641      	mov	r1, r8
 800ad58:	4638      	mov	r0, r7
 800ad5a:	47c8      	blx	r9
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d0e6      	beq.n	800ad2e <_printf_common+0xae>
 800ad60:	3601      	adds	r6, #1
 800ad62:	e7d9      	b.n	800ad18 <_printf_common+0x98>

0800ad64 <_printf_i>:
 800ad64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad68:	7e0f      	ldrb	r7, [r1, #24]
 800ad6a:	4691      	mov	r9, r2
 800ad6c:	2f78      	cmp	r7, #120	@ 0x78
 800ad6e:	4680      	mov	r8, r0
 800ad70:	460c      	mov	r4, r1
 800ad72:	469a      	mov	sl, r3
 800ad74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ad76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad7a:	d807      	bhi.n	800ad8c <_printf_i+0x28>
 800ad7c:	2f62      	cmp	r7, #98	@ 0x62
 800ad7e:	d80a      	bhi.n	800ad96 <_printf_i+0x32>
 800ad80:	2f00      	cmp	r7, #0
 800ad82:	f000 80d3 	beq.w	800af2c <_printf_i+0x1c8>
 800ad86:	2f58      	cmp	r7, #88	@ 0x58
 800ad88:	f000 80ba 	beq.w	800af00 <_printf_i+0x19c>
 800ad8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad94:	e03a      	b.n	800ae0c <_printf_i+0xa8>
 800ad96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad9a:	2b15      	cmp	r3, #21
 800ad9c:	d8f6      	bhi.n	800ad8c <_printf_i+0x28>
 800ad9e:	a101      	add	r1, pc, #4	@ (adr r1, 800ada4 <_printf_i+0x40>)
 800ada0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ada4:	0800adfd 	.word	0x0800adfd
 800ada8:	0800ae11 	.word	0x0800ae11
 800adac:	0800ad8d 	.word	0x0800ad8d
 800adb0:	0800ad8d 	.word	0x0800ad8d
 800adb4:	0800ad8d 	.word	0x0800ad8d
 800adb8:	0800ad8d 	.word	0x0800ad8d
 800adbc:	0800ae11 	.word	0x0800ae11
 800adc0:	0800ad8d 	.word	0x0800ad8d
 800adc4:	0800ad8d 	.word	0x0800ad8d
 800adc8:	0800ad8d 	.word	0x0800ad8d
 800adcc:	0800ad8d 	.word	0x0800ad8d
 800add0:	0800af13 	.word	0x0800af13
 800add4:	0800ae3b 	.word	0x0800ae3b
 800add8:	0800aecd 	.word	0x0800aecd
 800addc:	0800ad8d 	.word	0x0800ad8d
 800ade0:	0800ad8d 	.word	0x0800ad8d
 800ade4:	0800af35 	.word	0x0800af35
 800ade8:	0800ad8d 	.word	0x0800ad8d
 800adec:	0800ae3b 	.word	0x0800ae3b
 800adf0:	0800ad8d 	.word	0x0800ad8d
 800adf4:	0800ad8d 	.word	0x0800ad8d
 800adf8:	0800aed5 	.word	0x0800aed5
 800adfc:	6833      	ldr	r3, [r6, #0]
 800adfe:	1d1a      	adds	r2, r3, #4
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6032      	str	r2, [r6, #0]
 800ae04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e09e      	b.n	800af4e <_printf_i+0x1ea>
 800ae10:	6833      	ldr	r3, [r6, #0]
 800ae12:	6820      	ldr	r0, [r4, #0]
 800ae14:	1d19      	adds	r1, r3, #4
 800ae16:	6031      	str	r1, [r6, #0]
 800ae18:	0606      	lsls	r6, r0, #24
 800ae1a:	d501      	bpl.n	800ae20 <_printf_i+0xbc>
 800ae1c:	681d      	ldr	r5, [r3, #0]
 800ae1e:	e003      	b.n	800ae28 <_printf_i+0xc4>
 800ae20:	0645      	lsls	r5, r0, #25
 800ae22:	d5fb      	bpl.n	800ae1c <_printf_i+0xb8>
 800ae24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae28:	2d00      	cmp	r5, #0
 800ae2a:	da03      	bge.n	800ae34 <_printf_i+0xd0>
 800ae2c:	232d      	movs	r3, #45	@ 0x2d
 800ae2e:	426d      	negs	r5, r5
 800ae30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae34:	230a      	movs	r3, #10
 800ae36:	4859      	ldr	r0, [pc, #356]	@ (800af9c <_printf_i+0x238>)
 800ae38:	e011      	b.n	800ae5e <_printf_i+0xfa>
 800ae3a:	6821      	ldr	r1, [r4, #0]
 800ae3c:	6833      	ldr	r3, [r6, #0]
 800ae3e:	0608      	lsls	r0, r1, #24
 800ae40:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae44:	d402      	bmi.n	800ae4c <_printf_i+0xe8>
 800ae46:	0649      	lsls	r1, r1, #25
 800ae48:	bf48      	it	mi
 800ae4a:	b2ad      	uxthmi	r5, r5
 800ae4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae4e:	6033      	str	r3, [r6, #0]
 800ae50:	bf14      	ite	ne
 800ae52:	230a      	movne	r3, #10
 800ae54:	2308      	moveq	r3, #8
 800ae56:	4851      	ldr	r0, [pc, #324]	@ (800af9c <_printf_i+0x238>)
 800ae58:	2100      	movs	r1, #0
 800ae5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae5e:	6866      	ldr	r6, [r4, #4]
 800ae60:	2e00      	cmp	r6, #0
 800ae62:	bfa8      	it	ge
 800ae64:	6821      	ldrge	r1, [r4, #0]
 800ae66:	60a6      	str	r6, [r4, #8]
 800ae68:	bfa4      	itt	ge
 800ae6a:	f021 0104 	bicge.w	r1, r1, #4
 800ae6e:	6021      	strge	r1, [r4, #0]
 800ae70:	b90d      	cbnz	r5, 800ae76 <_printf_i+0x112>
 800ae72:	2e00      	cmp	r6, #0
 800ae74:	d04b      	beq.n	800af0e <_printf_i+0x1aa>
 800ae76:	4616      	mov	r6, r2
 800ae78:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae7c:	fb03 5711 	mls	r7, r3, r1, r5
 800ae80:	5dc7      	ldrb	r7, [r0, r7]
 800ae82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae86:	462f      	mov	r7, r5
 800ae88:	42bb      	cmp	r3, r7
 800ae8a:	460d      	mov	r5, r1
 800ae8c:	d9f4      	bls.n	800ae78 <_printf_i+0x114>
 800ae8e:	2b08      	cmp	r3, #8
 800ae90:	d10b      	bne.n	800aeaa <_printf_i+0x146>
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	07df      	lsls	r7, r3, #31
 800ae96:	d508      	bpl.n	800aeaa <_printf_i+0x146>
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	6861      	ldr	r1, [r4, #4]
 800ae9c:	4299      	cmp	r1, r3
 800ae9e:	bfde      	ittt	le
 800aea0:	2330      	movle	r3, #48	@ 0x30
 800aea2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aea6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800aeaa:	1b92      	subs	r2, r2, r6
 800aeac:	6122      	str	r2, [r4, #16]
 800aeae:	464b      	mov	r3, r9
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	4640      	mov	r0, r8
 800aeb4:	f8cd a000 	str.w	sl, [sp]
 800aeb8:	aa03      	add	r2, sp, #12
 800aeba:	f7ff fee1 	bl	800ac80 <_printf_common>
 800aebe:	3001      	adds	r0, #1
 800aec0:	d14a      	bne.n	800af58 <_printf_i+0x1f4>
 800aec2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aec6:	b004      	add	sp, #16
 800aec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	f043 0320 	orr.w	r3, r3, #32
 800aed2:	6023      	str	r3, [r4, #0]
 800aed4:	2778      	movs	r7, #120	@ 0x78
 800aed6:	4832      	ldr	r0, [pc, #200]	@ (800afa0 <_printf_i+0x23c>)
 800aed8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	6831      	ldr	r1, [r6, #0]
 800aee0:	061f      	lsls	r7, r3, #24
 800aee2:	f851 5b04 	ldr.w	r5, [r1], #4
 800aee6:	d402      	bmi.n	800aeee <_printf_i+0x18a>
 800aee8:	065f      	lsls	r7, r3, #25
 800aeea:	bf48      	it	mi
 800aeec:	b2ad      	uxthmi	r5, r5
 800aeee:	6031      	str	r1, [r6, #0]
 800aef0:	07d9      	lsls	r1, r3, #31
 800aef2:	bf44      	itt	mi
 800aef4:	f043 0320 	orrmi.w	r3, r3, #32
 800aef8:	6023      	strmi	r3, [r4, #0]
 800aefa:	b11d      	cbz	r5, 800af04 <_printf_i+0x1a0>
 800aefc:	2310      	movs	r3, #16
 800aefe:	e7ab      	b.n	800ae58 <_printf_i+0xf4>
 800af00:	4826      	ldr	r0, [pc, #152]	@ (800af9c <_printf_i+0x238>)
 800af02:	e7e9      	b.n	800aed8 <_printf_i+0x174>
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	f023 0320 	bic.w	r3, r3, #32
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	e7f6      	b.n	800aefc <_printf_i+0x198>
 800af0e:	4616      	mov	r6, r2
 800af10:	e7bd      	b.n	800ae8e <_printf_i+0x12a>
 800af12:	6833      	ldr	r3, [r6, #0]
 800af14:	6825      	ldr	r5, [r4, #0]
 800af16:	1d18      	adds	r0, r3, #4
 800af18:	6961      	ldr	r1, [r4, #20]
 800af1a:	6030      	str	r0, [r6, #0]
 800af1c:	062e      	lsls	r6, r5, #24
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	d501      	bpl.n	800af26 <_printf_i+0x1c2>
 800af22:	6019      	str	r1, [r3, #0]
 800af24:	e002      	b.n	800af2c <_printf_i+0x1c8>
 800af26:	0668      	lsls	r0, r5, #25
 800af28:	d5fb      	bpl.n	800af22 <_printf_i+0x1be>
 800af2a:	8019      	strh	r1, [r3, #0]
 800af2c:	2300      	movs	r3, #0
 800af2e:	4616      	mov	r6, r2
 800af30:	6123      	str	r3, [r4, #16]
 800af32:	e7bc      	b.n	800aeae <_printf_i+0x14a>
 800af34:	6833      	ldr	r3, [r6, #0]
 800af36:	2100      	movs	r1, #0
 800af38:	1d1a      	adds	r2, r3, #4
 800af3a:	6032      	str	r2, [r6, #0]
 800af3c:	681e      	ldr	r6, [r3, #0]
 800af3e:	6862      	ldr	r2, [r4, #4]
 800af40:	4630      	mov	r0, r6
 800af42:	f000 f98b 	bl	800b25c <memchr>
 800af46:	b108      	cbz	r0, 800af4c <_printf_i+0x1e8>
 800af48:	1b80      	subs	r0, r0, r6
 800af4a:	6060      	str	r0, [r4, #4]
 800af4c:	6863      	ldr	r3, [r4, #4]
 800af4e:	6123      	str	r3, [r4, #16]
 800af50:	2300      	movs	r3, #0
 800af52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af56:	e7aa      	b.n	800aeae <_printf_i+0x14a>
 800af58:	4632      	mov	r2, r6
 800af5a:	4649      	mov	r1, r9
 800af5c:	4640      	mov	r0, r8
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	47d0      	blx	sl
 800af62:	3001      	adds	r0, #1
 800af64:	d0ad      	beq.n	800aec2 <_printf_i+0x15e>
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	079b      	lsls	r3, r3, #30
 800af6a:	d413      	bmi.n	800af94 <_printf_i+0x230>
 800af6c:	68e0      	ldr	r0, [r4, #12]
 800af6e:	9b03      	ldr	r3, [sp, #12]
 800af70:	4298      	cmp	r0, r3
 800af72:	bfb8      	it	lt
 800af74:	4618      	movlt	r0, r3
 800af76:	e7a6      	b.n	800aec6 <_printf_i+0x162>
 800af78:	2301      	movs	r3, #1
 800af7a:	4632      	mov	r2, r6
 800af7c:	4649      	mov	r1, r9
 800af7e:	4640      	mov	r0, r8
 800af80:	47d0      	blx	sl
 800af82:	3001      	adds	r0, #1
 800af84:	d09d      	beq.n	800aec2 <_printf_i+0x15e>
 800af86:	3501      	adds	r5, #1
 800af88:	68e3      	ldr	r3, [r4, #12]
 800af8a:	9903      	ldr	r1, [sp, #12]
 800af8c:	1a5b      	subs	r3, r3, r1
 800af8e:	42ab      	cmp	r3, r5
 800af90:	dcf2      	bgt.n	800af78 <_printf_i+0x214>
 800af92:	e7eb      	b.n	800af6c <_printf_i+0x208>
 800af94:	2500      	movs	r5, #0
 800af96:	f104 0619 	add.w	r6, r4, #25
 800af9a:	e7f5      	b.n	800af88 <_printf_i+0x224>
 800af9c:	0800c300 	.word	0x0800c300
 800afa0:	0800c311 	.word	0x0800c311

0800afa4 <__swbuf_r>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	460e      	mov	r6, r1
 800afa8:	4614      	mov	r4, r2
 800afaa:	4605      	mov	r5, r0
 800afac:	b118      	cbz	r0, 800afb6 <__swbuf_r+0x12>
 800afae:	6a03      	ldr	r3, [r0, #32]
 800afb0:	b90b      	cbnz	r3, 800afb6 <__swbuf_r+0x12>
 800afb2:	f7ff faeb 	bl	800a58c <__sinit>
 800afb6:	69a3      	ldr	r3, [r4, #24]
 800afb8:	60a3      	str	r3, [r4, #8]
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	071a      	lsls	r2, r3, #28
 800afbe:	d501      	bpl.n	800afc4 <__swbuf_r+0x20>
 800afc0:	6923      	ldr	r3, [r4, #16]
 800afc2:	b943      	cbnz	r3, 800afd6 <__swbuf_r+0x32>
 800afc4:	4621      	mov	r1, r4
 800afc6:	4628      	mov	r0, r5
 800afc8:	f000 f82a 	bl	800b020 <__swsetup_r>
 800afcc:	b118      	cbz	r0, 800afd6 <__swbuf_r+0x32>
 800afce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800afd2:	4638      	mov	r0, r7
 800afd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	6922      	ldr	r2, [r4, #16]
 800afda:	b2f6      	uxtb	r6, r6
 800afdc:	1a98      	subs	r0, r3, r2
 800afde:	6963      	ldr	r3, [r4, #20]
 800afe0:	4637      	mov	r7, r6
 800afe2:	4283      	cmp	r3, r0
 800afe4:	dc05      	bgt.n	800aff2 <__swbuf_r+0x4e>
 800afe6:	4621      	mov	r1, r4
 800afe8:	4628      	mov	r0, r5
 800afea:	f7ff fc3f 	bl	800a86c <_fflush_r>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d1ed      	bne.n	800afce <__swbuf_r+0x2a>
 800aff2:	68a3      	ldr	r3, [r4, #8]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	60a3      	str	r3, [r4, #8]
 800aff8:	6823      	ldr	r3, [r4, #0]
 800affa:	1c5a      	adds	r2, r3, #1
 800affc:	6022      	str	r2, [r4, #0]
 800affe:	701e      	strb	r6, [r3, #0]
 800b000:	6962      	ldr	r2, [r4, #20]
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	429a      	cmp	r2, r3
 800b006:	d004      	beq.n	800b012 <__swbuf_r+0x6e>
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	07db      	lsls	r3, r3, #31
 800b00c:	d5e1      	bpl.n	800afd2 <__swbuf_r+0x2e>
 800b00e:	2e0a      	cmp	r6, #10
 800b010:	d1df      	bne.n	800afd2 <__swbuf_r+0x2e>
 800b012:	4621      	mov	r1, r4
 800b014:	4628      	mov	r0, r5
 800b016:	f7ff fc29 	bl	800a86c <_fflush_r>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d0d9      	beq.n	800afd2 <__swbuf_r+0x2e>
 800b01e:	e7d6      	b.n	800afce <__swbuf_r+0x2a>

0800b020 <__swsetup_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4b29      	ldr	r3, [pc, #164]	@ (800b0c8 <__swsetup_r+0xa8>)
 800b024:	4605      	mov	r5, r0
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	460c      	mov	r4, r1
 800b02a:	b118      	cbz	r0, 800b034 <__swsetup_r+0x14>
 800b02c:	6a03      	ldr	r3, [r0, #32]
 800b02e:	b90b      	cbnz	r3, 800b034 <__swsetup_r+0x14>
 800b030:	f7ff faac 	bl	800a58c <__sinit>
 800b034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b038:	0719      	lsls	r1, r3, #28
 800b03a:	d422      	bmi.n	800b082 <__swsetup_r+0x62>
 800b03c:	06da      	lsls	r2, r3, #27
 800b03e:	d407      	bmi.n	800b050 <__swsetup_r+0x30>
 800b040:	2209      	movs	r2, #9
 800b042:	602a      	str	r2, [r5, #0]
 800b044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b04c:	81a3      	strh	r3, [r4, #12]
 800b04e:	e033      	b.n	800b0b8 <__swsetup_r+0x98>
 800b050:	0758      	lsls	r0, r3, #29
 800b052:	d512      	bpl.n	800b07a <__swsetup_r+0x5a>
 800b054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b056:	b141      	cbz	r1, 800b06a <__swsetup_r+0x4a>
 800b058:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b05c:	4299      	cmp	r1, r3
 800b05e:	d002      	beq.n	800b066 <__swsetup_r+0x46>
 800b060:	4628      	mov	r0, r5
 800b062:	f7ff fb3b 	bl	800a6dc <_free_r>
 800b066:	2300      	movs	r3, #0
 800b068:	6363      	str	r3, [r4, #52]	@ 0x34
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	2300      	movs	r3, #0
 800b074:	6063      	str	r3, [r4, #4]
 800b076:	6923      	ldr	r3, [r4, #16]
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	f043 0308 	orr.w	r3, r3, #8
 800b080:	81a3      	strh	r3, [r4, #12]
 800b082:	6923      	ldr	r3, [r4, #16]
 800b084:	b94b      	cbnz	r3, 800b09a <__swsetup_r+0x7a>
 800b086:	89a3      	ldrh	r3, [r4, #12]
 800b088:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b08c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b090:	d003      	beq.n	800b09a <__swsetup_r+0x7a>
 800b092:	4621      	mov	r1, r4
 800b094:	4628      	mov	r0, r5
 800b096:	f000 f83e 	bl	800b116 <__smakebuf_r>
 800b09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09e:	f013 0201 	ands.w	r2, r3, #1
 800b0a2:	d00a      	beq.n	800b0ba <__swsetup_r+0x9a>
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	60a2      	str	r2, [r4, #8]
 800b0a8:	6962      	ldr	r2, [r4, #20]
 800b0aa:	4252      	negs	r2, r2
 800b0ac:	61a2      	str	r2, [r4, #24]
 800b0ae:	6922      	ldr	r2, [r4, #16]
 800b0b0:	b942      	cbnz	r2, 800b0c4 <__swsetup_r+0xa4>
 800b0b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b0b6:	d1c5      	bne.n	800b044 <__swsetup_r+0x24>
 800b0b8:	bd38      	pop	{r3, r4, r5, pc}
 800b0ba:	0799      	lsls	r1, r3, #30
 800b0bc:	bf58      	it	pl
 800b0be:	6962      	ldrpl	r2, [r4, #20]
 800b0c0:	60a2      	str	r2, [r4, #8]
 800b0c2:	e7f4      	b.n	800b0ae <__swsetup_r+0x8e>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	e7f7      	b.n	800b0b8 <__swsetup_r+0x98>
 800b0c8:	20000144 	.word	0x20000144

0800b0cc <__swhatbuf_r>:
 800b0cc:	b570      	push	{r4, r5, r6, lr}
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0d4:	4615      	mov	r5, r2
 800b0d6:	2900      	cmp	r1, #0
 800b0d8:	461e      	mov	r6, r3
 800b0da:	b096      	sub	sp, #88	@ 0x58
 800b0dc:	da0c      	bge.n	800b0f8 <__swhatbuf_r+0x2c>
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0e6:	bf14      	ite	ne
 800b0e8:	2340      	movne	r3, #64	@ 0x40
 800b0ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	6031      	str	r1, [r6, #0]
 800b0f2:	602b      	str	r3, [r5, #0]
 800b0f4:	b016      	add	sp, #88	@ 0x58
 800b0f6:	bd70      	pop	{r4, r5, r6, pc}
 800b0f8:	466a      	mov	r2, sp
 800b0fa:	f000 f849 	bl	800b190 <_fstat_r>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	dbed      	blt.n	800b0de <__swhatbuf_r+0x12>
 800b102:	9901      	ldr	r1, [sp, #4]
 800b104:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b108:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b10c:	4259      	negs	r1, r3
 800b10e:	4159      	adcs	r1, r3
 800b110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b114:	e7eb      	b.n	800b0ee <__swhatbuf_r+0x22>

0800b116 <__smakebuf_r>:
 800b116:	898b      	ldrh	r3, [r1, #12]
 800b118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b11a:	079d      	lsls	r5, r3, #30
 800b11c:	4606      	mov	r6, r0
 800b11e:	460c      	mov	r4, r1
 800b120:	d507      	bpl.n	800b132 <__smakebuf_r+0x1c>
 800b122:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b126:	6023      	str	r3, [r4, #0]
 800b128:	6123      	str	r3, [r4, #16]
 800b12a:	2301      	movs	r3, #1
 800b12c:	6163      	str	r3, [r4, #20]
 800b12e:	b003      	add	sp, #12
 800b130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b132:	466a      	mov	r2, sp
 800b134:	ab01      	add	r3, sp, #4
 800b136:	f7ff ffc9 	bl	800b0cc <__swhatbuf_r>
 800b13a:	9f00      	ldr	r7, [sp, #0]
 800b13c:	4605      	mov	r5, r0
 800b13e:	4639      	mov	r1, r7
 800b140:	4630      	mov	r0, r6
 800b142:	f7ff f8cd 	bl	800a2e0 <_malloc_r>
 800b146:	b948      	cbnz	r0, 800b15c <__smakebuf_r+0x46>
 800b148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b14c:	059a      	lsls	r2, r3, #22
 800b14e:	d4ee      	bmi.n	800b12e <__smakebuf_r+0x18>
 800b150:	f023 0303 	bic.w	r3, r3, #3
 800b154:	f043 0302 	orr.w	r3, r3, #2
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	e7e2      	b.n	800b122 <__smakebuf_r+0xc>
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b166:	81a3      	strh	r3, [r4, #12]
 800b168:	9b01      	ldr	r3, [sp, #4]
 800b16a:	6020      	str	r0, [r4, #0]
 800b16c:	b15b      	cbz	r3, 800b186 <__smakebuf_r+0x70>
 800b16e:	4630      	mov	r0, r6
 800b170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b174:	f000 f81e 	bl	800b1b4 <_isatty_r>
 800b178:	b128      	cbz	r0, 800b186 <__smakebuf_r+0x70>
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	f023 0303 	bic.w	r3, r3, #3
 800b180:	f043 0301 	orr.w	r3, r3, #1
 800b184:	81a3      	strh	r3, [r4, #12]
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	431d      	orrs	r5, r3
 800b18a:	81a5      	strh	r5, [r4, #12]
 800b18c:	e7cf      	b.n	800b12e <__smakebuf_r+0x18>
	...

0800b190 <_fstat_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	2300      	movs	r3, #0
 800b194:	4d06      	ldr	r5, [pc, #24]	@ (800b1b0 <_fstat_r+0x20>)
 800b196:	4604      	mov	r4, r0
 800b198:	4608      	mov	r0, r1
 800b19a:	4611      	mov	r1, r2
 800b19c:	602b      	str	r3, [r5, #0]
 800b19e:	f7fd f9c3 	bl	8008528 <_fstat>
 800b1a2:	1c43      	adds	r3, r0, #1
 800b1a4:	d102      	bne.n	800b1ac <_fstat_r+0x1c>
 800b1a6:	682b      	ldr	r3, [r5, #0]
 800b1a8:	b103      	cbz	r3, 800b1ac <_fstat_r+0x1c>
 800b1aa:	6023      	str	r3, [r4, #0]
 800b1ac:	bd38      	pop	{r3, r4, r5, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20000348 	.word	0x20000348

0800b1b4 <_isatty_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	4d05      	ldr	r5, [pc, #20]	@ (800b1d0 <_isatty_r+0x1c>)
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	f7fd f9c1 	bl	8008546 <_isatty>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_isatty_r+0x1a>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_isatty_r+0x1a>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	20000348 	.word	0x20000348

0800b1d4 <_raise_r>:
 800b1d4:	291f      	cmp	r1, #31
 800b1d6:	b538      	push	{r3, r4, r5, lr}
 800b1d8:	4605      	mov	r5, r0
 800b1da:	460c      	mov	r4, r1
 800b1dc:	d904      	bls.n	800b1e8 <_raise_r+0x14>
 800b1de:	2316      	movs	r3, #22
 800b1e0:	6003      	str	r3, [r0, #0]
 800b1e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1ea:	b112      	cbz	r2, 800b1f2 <_raise_r+0x1e>
 800b1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1f0:	b94b      	cbnz	r3, 800b206 <_raise_r+0x32>
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f830 	bl	800b258 <_getpid_r>
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b202:	f000 b817 	b.w	800b234 <_kill_r>
 800b206:	2b01      	cmp	r3, #1
 800b208:	d00a      	beq.n	800b220 <_raise_r+0x4c>
 800b20a:	1c59      	adds	r1, r3, #1
 800b20c:	d103      	bne.n	800b216 <_raise_r+0x42>
 800b20e:	2316      	movs	r3, #22
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	2001      	movs	r0, #1
 800b214:	e7e7      	b.n	800b1e6 <_raise_r+0x12>
 800b216:	2100      	movs	r1, #0
 800b218:	4620      	mov	r0, r4
 800b21a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b21e:	4798      	blx	r3
 800b220:	2000      	movs	r0, #0
 800b222:	e7e0      	b.n	800b1e6 <_raise_r+0x12>

0800b224 <raise>:
 800b224:	4b02      	ldr	r3, [pc, #8]	@ (800b230 <raise+0xc>)
 800b226:	4601      	mov	r1, r0
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	f7ff bfd3 	b.w	800b1d4 <_raise_r>
 800b22e:	bf00      	nop
 800b230:	20000144 	.word	0x20000144

0800b234 <_kill_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	2300      	movs	r3, #0
 800b238:	4d06      	ldr	r5, [pc, #24]	@ (800b254 <_kill_r+0x20>)
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	4611      	mov	r1, r2
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	f7fd f912 	bl	800846a <_kill>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d102      	bne.n	800b250 <_kill_r+0x1c>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b103      	cbz	r3, 800b250 <_kill_r+0x1c>
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	bd38      	pop	{r3, r4, r5, pc}
 800b252:	bf00      	nop
 800b254:	20000348 	.word	0x20000348

0800b258 <_getpid_r>:
 800b258:	f7fd b900 	b.w	800845c <_getpid>

0800b25c <memchr>:
 800b25c:	4603      	mov	r3, r0
 800b25e:	b510      	push	{r4, lr}
 800b260:	b2c9      	uxtb	r1, r1
 800b262:	4402      	add	r2, r0
 800b264:	4293      	cmp	r3, r2
 800b266:	4618      	mov	r0, r3
 800b268:	d101      	bne.n	800b26e <memchr+0x12>
 800b26a:	2000      	movs	r0, #0
 800b26c:	e003      	b.n	800b276 <memchr+0x1a>
 800b26e:	7804      	ldrb	r4, [r0, #0]
 800b270:	3301      	adds	r3, #1
 800b272:	428c      	cmp	r4, r1
 800b274:	d1f6      	bne.n	800b264 <memchr+0x8>
 800b276:	bd10      	pop	{r4, pc}

0800b278 <_init>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	bf00      	nop
 800b27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b27e:	bc08      	pop	{r3}
 800b280:	469e      	mov	lr, r3
 800b282:	4770      	bx	lr

0800b284 <_fini>:
 800b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b286:	bf00      	nop
 800b288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b28a:	bc08      	pop	{r3}
 800b28c:	469e      	mov	lr, r3
 800b28e:	4770      	bx	lr
